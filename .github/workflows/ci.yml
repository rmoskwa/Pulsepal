name: PulsePal CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION: '3.10'

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff
    
    - name: Run Ruff linter
      run: |
        ruff check .
    
    - name: Check formatting with Ruff
      run: |
        ruff format --check .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Create .env file for testing
      run: |
        cat > .env << EOF
        # Test environment variables
        GOOGLE_API_KEY=test_key
        SUPABASE_URL=https://test.supabase.co
        SUPABASE_KEY=test_key
        GOOGLE_API_KEY_EMBEDDING=test_key
        TEST_MODE=true
        ENVIRONMENT=testing
        EOF
    
    - name: Run import validation
      run: |
        python scripts/validate_imports.py
      continue-on-error: true  # Don't fail if script doesn't exist yet
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=pulsepal --cov-report=term-missing
      continue-on-error: true  # Don't fail build on test failures during setup
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  import-validation:
    name: Validate Imports
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check for circular imports
      run: |
        python -c "
        import sys
        import ast
        from pathlib import Path
        
        def check_imports(file_path):
            with open(file_path, 'r') as f:
                try:
                    tree = ast.parse(f.read())
                    imports = []
                    for node in ast.walk(tree):
                        if isinstance(node, ast.Import):
                            for name in node.names:
                                imports.append(name.name)
                        elif isinstance(node, ast.ImportFrom):
                            if node.module:
                                imports.append(node.module)
                    return imports
                except SyntaxError:
                    return []
        
        # Check all Python files
        issues = []
        for py_file in Path('pulsepal').rglob('*.py'):
            imports = check_imports(py_file)
            # Basic check for suspicious patterns
            if 'pulsepal' in str(py_file):
                for imp in imports:
                    if imp and imp.startswith('pulsepal'):
                        # Check for potential circular imports
                        parts = imp.split('.')
                        if len(parts) > 3:  # Deep nesting might indicate issues
                            issues.append(f'{py_file}: Deep import {imp}')
        
        if issues:
            print('‚ö†Ô∏è  Potential import issues found:')
            for issue in issues[:10]:  # Show first 10
                print(f'  - {issue}')
        else:
            print('‚úì No obvious import issues detected')
        "
      continue-on-error: true

  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Check for sensitive data
      run: |
        # Check for potential API keys or secrets
        echo "Checking for exposed secrets..."
        
        # Look for common secret patterns
        if grep -r --include="*.py" -E "(api_key|secret|password|token)\s*=\s*['\"][^'\"]{20,}" .; then
          echo "‚ö†Ô∏è  Warning: Potential secrets found in code"
          exit 1
        fi
        
        # Ensure alpha_keys.json doesn't exist
        if [ -f "alpha_keys.json" ]; then
          echo "‚ùå Error: alpha_keys.json should not be in repository"
          exit 1
        fi
        
        echo "‚úì No obvious secrets detected"
      continue-on-error: true

  deploy:
    name: Deploy (Manual)
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy notification
      run: |
        echo "üöÄ Ready for deployment"
        echo "This is a manual deployment trigger placeholder"
        echo "Implement actual deployment steps here when ready"
        
        # Deployment checklist
        echo ""
        echo "Deployment Checklist:"
        echo "- [ ] All tests passing"
        echo "- [ ] No security issues"
        echo "- [ ] Backup created"
        echo "- [ ] Rollback plan ready"
        echo "- [ ] Team notified"