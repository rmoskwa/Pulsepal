{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"architecture/enhanced-database-reorganization-plan/","title":"Enhanced PulsePal Database Reorganization Plan","text":""},{"location":"architecture/enhanced-database-reorganization-plan/#executive-summary","title":"Executive Summary","text":"<p>After comprehensive analysis of the 27 GitHub repositories (1,703 documents) in the PulsePal knowledge base, we've identified clear patterns for optimizing RAG search effectiveness. </p>"},{"location":"architecture/enhanced-database-reorganization-plan/#cleanup-progress-as-of-january-21-2025","title":"Cleanup Progress (as of January 21, 2025):","text":"<ul> <li>Original: 1,703 documents</li> <li>After Python removal: 1,514 documents (-189)</li> <li>After Phase 2 cleanup: 1,427 documents (-87 more)</li> <li>Total removed: 276 documents (16% reduction)</li> </ul>"},{"location":"architecture/enhanced-database-reorganization-plan/#current-state","title":"Current State:","text":"<ul> <li>1,178 MATLAB files (83% of content)</li> <li>135 sequence implementation files (with seq.addBlock)</li> <li>0 Python files - \u2705 REMOVED</li> <li>0 archived files - \u2705 REMOVED  </li> <li>Minimal generic utilities - \u2705 CLEANED</li> </ul> <p>Strategic Decision: Focus exclusively on MATLAB (v1.5.0) with end-to-end pipeline knowledge preserved.</p>"},{"location":"architecture/enhanced-database-reorganization-plan/#key-findings-from-repository-analysis","title":"Key Findings from Repository Analysis","text":""},{"location":"architecture/enhanced-database-reorganization-plan/#repository-quality-tiers","title":"Repository Quality Tiers","text":""},{"location":"architecture/enhanced-database-reorganization-plan/#tier-1-core-pulseq-keep-100","title":"Tier 1: Core Pulseq (Keep 100%)","text":"<ul> <li>pulseq/pulseq: 240 Pulseq score, 192 files - Official implementation</li> <li>pulseq/tutorials: 110 Pulseq score, 47 files - Educational gold</li> <li>imr-framework/pypulseq: Python port, essential for multi-language support</li> </ul>"},{"location":"architecture/enhanced-database-reorganization-plan/#tier-2-high-value-examples-keep-selectively","title":"Tier 2: High-Value Examples (Keep Selectively)","text":"<ul> <li>HarmonizedMRI/SequenceExamples-GE: 60 Pulseq score, vendor adaptations (TRID, seq2ceq)</li> <li>pulseq/MR-Physics-with-Pulseq: Educational notebooks with solutions</li> <li>HarmonizedMRI/Pulseq-diffusion: Specialized diffusion sequences</li> </ul>"},{"location":"architecture/enhanced-database-reorganization-plan/#tier-3-utility-heavy-keep-20","title":"Tier 3: Utility-Heavy (Keep &lt;20%)","text":"<ul> <li>MIMOSA: 283 files, only 20 Pulseq score - Mostly generic utilities</li> <li>PRIME: 194 files, 49 Pulseq score - Some value but lots of noise</li> <li>wave-haste: 134 files, 24 Pulseq score - 96% utilities</li> </ul>"},{"location":"architecture/enhanced-database-reorganization-plan/#tier-4-low-value-remove","title":"Tier 4: Low Value (Remove)","text":"<ul> <li>HarmonizedMRI/3DEPI: 0 Pulseq score - Pure reconstruction, no sequences</li> <li>HarmonizedMRI/SOSP3d: 0 Pulseq score - PyTorch reconstruction only</li> <li>Fast-fMRI: 1 file, no Pulseq content</li> </ul>"},{"location":"architecture/enhanced-database-reorganization-plan/#content-type-analysis","title":"Content Type Analysis","text":""},{"location":"architecture/enhanced-database-reorganization-plan/#current-distribution","title":"Current Distribution","text":"<pre><code>Content Type         | Files | Avg Size | Total Size | Action\n--------------------|-------|----------|------------|--------\nMATLAB Code (.m)    | 785   | 7.4KB    | 5.8MB      | Filter &amp; Keep\nUtilities (/utils/) | 434   | 6.6KB    | 2.9MB      | Remove 95%\nPython Code (.py)   | 106   | 27KB     | 2.9MB      | REMOVE ALL\nDocumentation (.md) | 84    | 4.2KB    | 352KB      | Keep all\nArchived (/attic/) | 30    | 5.3KB    | 158KB      | Remove all\nConfig files       | 15    | 4.6KB    | 69KB       | Remove all\n</code></pre>"},{"location":"architecture/enhanced-database-reorganization-plan/#critical-utility-function-analysis-end-to-end-expertise-approach","title":"Critical Utility Function Analysis - End-to-End Expertise Approach","text":"<p>IMPORTANT REVISION: PulsePal must be an end-to-end Pulseq expert that understands the complete pipeline from sequence generation through reconstruction. This enables comprehensive support for debugging, research, and cutting-edge implementations.</p>"},{"location":"architecture/enhanced-database-reorganization-plan/#the-complete-pulseq-pipeline","title":"The Complete Pulseq Pipeline","text":"<pre><code>1. Sequence Design \u2192 2. Data Acquisition \u2192 3. Reconstruction \u2192 4. Image Analysis\n    (Pulseq Code)      (Scanner Execution)    (May need custom)    (Research/Clinical)\n</code></pre>"},{"location":"architecture/enhanced-database-reorganization-plan/#utility-function-categories-and-decisions","title":"Utility Function Categories and Decisions","text":"<pre><code>Utility Category        | Files | Keep? | Rationale\n------------------------|-------|-------|------------------------------------------\ntrajectory_calculation  | 64    | \u2705 YES | Core for non-Cartesian, debugging timing\nvendor_conversion       | 10    | \u2705 YES | Critical for scanner deployment\nsampling_patterns       | 11    | \u2705 YES | Acceleration strategies (CAIPI, etc.)\nnovel_reconstruction    | 30    | \u2705 YES | Wave-CAIPI, SMS - scanners can't handle\nfield_mapping          | 6     | \u2705 YES | B0/B1 calibration sequences\nnon_cartesian          | 3     | \u2705 YES | Spiral/radial specific handling\ngridding_nufft         | 14    | \u2705 YES | Understanding non-Cartesian recon\nkernel_calculation     | 12    | \u2705 YES | How GRAPPA works - debugging value\nstandard_recon         | ~50   | \u2705 YES | Educational, benchmarking, validation\ngeneric_fft            | 11    | \u274c NO  | fft2c, ifft3c - truly generic\ngeneric_array_ops      | 14    | \u274c NO  | crop, reshape - standard MATLAB\nsetup_scripts          | ~20   | \u274c NO  | setup.m, path configs\ntest_files             | ~30   | \u274c NO  | Unit tests, not educational\n</code></pre>"},{"location":"architecture/enhanced-database-reorganization-plan/#why-keep-reconstruction-knowledge","title":"Why Keep Reconstruction Knowledge?","text":"<ol> <li>Debugging Support</li> <li>User: \"Why are my images distorted?\"</li> <li> <p>PulsePal: \"Check trajectory delays in reconstruction, here's how...\"</p> </li> <li> <p>Research Enablement</p> </li> <li>Novel sequences often need custom reconstruction</li> <li> <p>Understanding the full pipeline prevents failed experiments</p> </li> <li> <p>Educational Value</p> </li> <li>Researchers need to understand HOW their sampling affects images</li> <li> <p>GRAPPA/SENSE implementations show WHY certain patterns work</p> </li> <li> <p>Offline Development</p> </li> <li>Many researchers develop without scanner access</li> <li>Need reconstruction to validate sequences</li> </ol>"},{"location":"architecture/enhanced-database-reorganization-plan/#revised-utility-categorization-three-tier-system","title":"Revised Utility Categorization - Three-Tier System","text":"<p>Tier 1 - Core Sequence (Highest Priority) - Pulseq sequence files (<code>seq.addBlock</code>, <code>mr.make*</code>) - Direct sequence generation code - ~240 files</p> <p>Tier 2 - Pipeline Support (Medium Priority) - Trajectory calculation utilities - Vendor conversion tools - Sampling pattern generators - Field mapping sequences - ~100 files</p> <p>Tier 3 - Reference Implementation (Lower Priority, but KEPT) - GRAPPA/SENSE implementations - Reconstruction algorithms - Gridding/NUFFT code - Educational examples - ~150 files</p>"},{"location":"architecture/enhanced-database-reorganization-plan/#smart-retrieval-strategy","title":"Smart Retrieval Strategy","text":"<p>PulsePal will use metadata tagging to provide context-appropriate responses: - Basic query: Focus on Tier 1 (sequence code) - Debugging: Include Tier 2 &amp; 3 (full pipeline understanding) - Research: Access all tiers (complete knowledge)</p>"},{"location":"architecture/enhanced-database-reorganization-plan/#proposed-database-schema","title":"Proposed Database Schema","text":""},{"location":"architecture/enhanced-database-reorganization-plan/#simplified-3-table-architecture","title":"Simplified 3-Table Architecture","text":"<pre><code>-- 1. knowledge_base: Core content with rich metadata\nCREATE TABLE knowledge_base (\n    id BIGSERIAL PRIMARY KEY,\n    content TEXT NOT NULL,\n    source_url TEXT,\n\n    -- Content classification\n    content_type VARCHAR(50) CHECK (content_type IN (\n        'sequence_implementation',  -- Complete sequence examples\n        'pulseq_function',         -- Core Pulseq functions (mr.*)\n        'vendor_adaptation',       -- GE/Siemens specific\n        'educational',            -- Tutorials, workshops\n        'mri_utility',           -- MRI-specific helpers\n        'concept_explanation'    -- Theory, physics\n    )),\n\n    -- Quality and relevance scoring\n    quality_score INTEGER DEFAULT 50,  -- 0-100 scale\n    pulseq_version VARCHAR(20),       -- '1.4.0', '2.0.0', etc.\n    language VARCHAR(10),              -- 'matlab', 'python'\n\n    -- Rich metadata for better search\n    metadata JSONB DEFAULT '{}',\n    /*\n    Example metadata structure:\n    {\n        \"sequence_type\": \"EPI\",           -- GRE, EPI, MPRAGE, etc.\n        \"difficulty\": \"intermediate\",     -- beginner, intermediate, advanced\n        \"has_reconstruction\": true,\n        \"vendor_specific\": [\"GE\", \"Siemens\"],\n        \"pulseq_functions\": [\"mr.makeSincPulse\", \"seq.addBlock\"],\n        \"file_path\": \"original/path/to/file.m\",\n        \"github_stars\": 245,              -- Repository popularity\n        \"last_updated\": \"2024-06-15\",\n        \"dependencies\": [\"Signal Processing Toolbox\"],\n        \"tested_scanners\": [\"GE Premier\", \"Siemens Prisma\"]\n    }\n    */\n\n    -- Vector embedding for semantic search\n    embedding vector(768),\n\n    -- Timestamps\n    created_at TIMESTAMPTZ DEFAULT NOW(),\n    updated_at TIMESTAMPTZ DEFAULT NOW(),\n\n    -- Indexes\n    INDEX idx_content_type (content_type),\n    INDEX idx_quality_score (quality_score),\n    INDEX idx_language (language),\n    INDEX idx_embedding_vector (embedding) USING ivfflat\n);\n\n-- 2. validated_patterns: Curated, verified code patterns\nCREATE TABLE validated_patterns (\n    id BIGSERIAL PRIMARY KEY,\n    pattern_name VARCHAR(100) UNIQUE,\n    pattern_category VARCHAR(50),  -- 'vendor_fix', 'common_bug', 'optimization'\n\n    problem_description TEXT,\n    solution_code TEXT,\n\n    -- Validation metadata\n    verified_by VARCHAR(100),      -- Who validated this\n    verification_date DATE,\n    works_on_scanners TEXT[],      -- Array of tested scanners\n\n    -- Usage tracking\n    usage_count INTEGER DEFAULT 0,\n    last_used TIMESTAMPTZ,\n\n    metadata JSONB DEFAULT '{}'\n);\n\n-- 3. api_reference: Keep existing, already well-structured\n-- (413 functions with signatures, parameters, examples)\n</code></pre>"},{"location":"architecture/enhanced-database-reorganization-plan/#smart-views-for-efficient-access","title":"Smart Views for Efficient Access","text":"<pre><code>-- High-quality sequences only\nCREATE VIEW premium_sequences AS\nSELECT * FROM knowledge_base\nWHERE content_type = 'sequence_implementation'\n  AND quality_score &gt;= 80\n  AND metadata-&gt;&gt;'has_reconstruction' = 'true';\n\n-- Vendor-specific adaptations\nCREATE VIEW vendor_adaptations AS\nSELECT * FROM knowledge_base\nWHERE content_type = 'vendor_adaptation'\n   OR metadata-&gt;&gt;'vendor_specific' IS NOT NULL;\n\n-- Learning progression\nCREATE VIEW educational_path AS\nSELECT * FROM knowledge_base\nWHERE content_type IN ('educational', 'concept_explanation')\nORDER BY \n    CASE metadata-&gt;&gt;'difficulty'\n        WHEN 'beginner' THEN 1\n        WHEN 'intermediate' THEN 2\n        WHEN 'advanced' THEN 3\n    END,\n    quality_score DESC;\n\n-- Function usage examples\nCREATE VIEW function_examples AS\nSELECT \n    k.content,\n    k.metadata-&gt;&gt;'pulseq_functions' as functions_used,\n    a.name as function_name,\n    a.signature\nFROM knowledge_base k\nCROSS JOIN LATERAL jsonb_array_elements_text(k.metadata-&gt;'pulseq_functions') as func_name\nJOIN api_reference a ON a.name = func_name\nWHERE k.content_type = 'sequence_implementation';\n</code></pre>"},{"location":"architecture/enhanced-database-reorganization-plan/#implementation-roadmap","title":"Implementation Roadmap","text":""},{"location":"architecture/enhanced-database-reorganization-plan/#phase-1-targeted-cleanup-week-1-completed","title":"Phase 1: Targeted Cleanup (Week 1) - \u2705 COMPLETED","text":""},{"location":"architecture/enhanced-database-reorganization-plan/#removed-276-files-total-preserving-pipeline-knowledge","title":"Removed 276 Files Total (Preserving Pipeline Knowledge)","text":"<pre><code>-- 1. \u2705 REMOVED ALL PYTHON CONTENT (189 files) - COMPLETED Jan 21\nDELETE FROM crawled_pages \nWHERE metadata-&gt;&gt;'file_path' LIKE '%.py'\n   OR metadata-&gt;&gt;'file_path' LIKE '%.ipynb'\n   OR source_id = 'github.com/imr-framework/pypulseq';\n\n-- 2. \u2705 Removed all archived content (30 files) - COMPLETED Jan 21\nDELETE FROM crawled_pages \nWHERE metadata-&gt;&gt;'file_path' LIKE '%/attic/%'\n   OR metadata-&gt;&gt;'file_path' LIKE '%/old/%'\n   OR metadata-&gt;&gt;'file_path' LIKE '%/deprecated/%';\n\n-- 3. \u2705 MINIMAL removal - ONLY truly generic utilities (32 files) - COMPLETED Jan 21\nDELETE FROM crawled_pages \nWHERE metadata-&gt;&gt;'file_path' SIMILAR TO '%(fft2c|ifft2c|fft3c|ifft3c|fftc|ifftc)\\.m$'\n   OR metadata-&gt;&gt;'file_path' SIMILAR TO '%(crop|reshape|dot_mult|safe_plot)\\.m$'\n   OR metadata-&gt;&gt;'file_path' SIMILAR TO '%setup\\.m$';\n\n-- 4. \u2705 Removed config and test files (25 files) - COMPLETED Jan 21\nDELETE FROM crawled_pages \nWHERE metadata-&gt;&gt;'file_path' SIMILAR TO '%\\.(toml|yml|yaml|json|ini)$'\n   OR metadata-&gt;&gt;'file_path' LIKE '%/test/%'\n   OR metadata-&gt;&gt;'file_path' LIKE '%/tests/%';\n\n-- 5. Tag and categorize remaining utilities for smart retrieval\n-- Tier 1: Core Pulseq sequences\nUPDATE crawled_pages \nSET metadata = jsonb_set(\n    jsonb_set(metadata, '{tier}', '1'),\n    '{category}', '\"core_sequence\"'\n)\nWHERE content LIKE '%seq.addBlock%' \n  AND content LIKE '%mr.make%';\n\n-- Tier 2: Pipeline support utilities\nUPDATE crawled_pages \nSET metadata = jsonb_set(\n    jsonb_set(metadata, '{tier}', '2'),\n    '{category}', '\"pipeline_support\"'\n)\nWHERE (\n    content SIMILAR TO '%(trajectory|traj2grad|calculateKspace)%'\n    OR content SIMILAR TO '%(TOPPE|seq2ge|seq2ceq|TRID)%'\n    OR content SIMILAR TO '%(sampling.?pattern|CAIPI|acceleration)%'\n    OR content SIMILAR TO '%(B0.?map|B1.?map|field.?map)%'\n)\nAND metadata-&gt;&gt;'tier' IS NULL;\n\n-- Tier 3: Reference implementations (kept for completeness)\nUPDATE crawled_pages \nSET metadata = jsonb_set(\n    jsonb_set(metadata, '{tier}', '3'),\n    '{category}', '\"reference_implementation\"'\n)\nWHERE (\n    content SIMILAR TO '%(GRAPPA|SENSE|kernel|coil)%'\n    OR content SIMILAR TO '%(gridding|NUFFT|recon)%'\n    OR content SIMILAR TO '%(wave|SMS|multiband)%'\n)\nAND metadata-&gt;&gt;'tier' IS NULL;\n\n-- 6. Mark educational and debugging utilities\nUPDATE crawled_pages \nSET metadata = jsonb_set(metadata, '{educational_value}', 'true')\nWHERE source_id IN (\n    'github.com/pulseq/pulseq',\n    'github.com/pulseq/tutorials',\n    'github.com/pulseq/MR-Physics-with-Pulseq'\n)\nAND metadata-&gt;&gt;'file_path' LIKE '%demo%';\n</code></pre>"},{"location":"architecture/enhanced-database-reorganization-plan/#phase-2-content-migration-enrichment-week-1-2","title":"Phase 2: Content Migration &amp; Enrichment (Week 1-2)","text":"<pre><code># Python script for intelligent content migration\nimport json\nfrom typing import Dict, List\nimport re\n\ndef analyze_content(content: str, metadata: Dict) -&gt; Dict:\n    \"\"\"Analyze content and generate rich metadata.\"\"\"\n\n    enriched_metadata = {\n        \"original_metadata\": metadata,\n        \"pulseq_functions\": extract_pulseq_functions(content),\n        \"sequence_type\": detect_sequence_type(content),\n        \"has_vendor_code\": detect_vendor_specific(content),\n        \"complexity_score\": calculate_complexity(content),\n        \"has_reconstruction\": \"recon\" in content.lower(),\n        \"line_count\": len(content.split('\\n')),\n        \"has_comments\": detect_documentation_quality(content)\n    }\n\n    # Determine content type\n    if \"seq.addBlock\" in content and \"seq.write\" in content:\n        content_type = \"sequence_implementation\"\n    elif \"function\" in content and \"mr.\" in content:\n        content_type = \"pulseq_function\"\n    elif \"TRID\" in content or \"seq2ceq\" in content:\n        content_type = \"vendor_adaptation\"\n    elif \"tutorial\" in content.lower() or \"example\" in content.lower():\n        content_type = \"educational\"\n    else:\n        content_type = \"mri_utility\"\n\n    # Calculate quality score\n    quality_score = calculate_quality_score(content, enriched_metadata)\n\n    return {\n        \"content_type\": content_type,\n        \"metadata\": enriched_metadata,\n        \"quality_score\": quality_score\n    }\n\ndef extract_pulseq_functions(content: str) -&gt; List[str]:\n    \"\"\"Extract all Pulseq function calls.\"\"\"\n    patterns = [\n        r'mr\\.\\w+',\n        r'seq\\.\\w+',\n        r'opts\\.\\w+',\n    ]\n    functions = []\n    for pattern in patterns:\n        functions.extend(re.findall(pattern, content))\n    return list(set(functions))\n\ndef detect_sequence_type(content: str) -&gt; str:\n    \"\"\"Detect the MRI sequence type.\"\"\"\n    sequence_markers = {\n        'EPI': ['epi', 'echo.planar'],\n        'GRE': ['gradient.echo', 'gre', 'flash'],\n        'TSE': ['turbo.spin', 'tse', 'fse'],\n        'MPRAGE': ['mprage', 'mp.rage'],\n        'DWI': ['diffusion', 'dwi', 'dti'],\n        'CEST': ['cest', 'chemical.exchange'],\n    }\n\n    content_lower = content.lower()\n    for seq_type, markers in sequence_markers.items():\n        if any(marker in content_lower for marker in markers):\n            return seq_type\n    return \"unknown\"\n\ndef calculate_quality_score(content: str, metadata: Dict) -&gt; int:\n    \"\"\"Calculate content quality score (0-100).\"\"\"\n    score = 50  # Base score\n\n    # Positive factors\n    if metadata.get(\"has_comments\"):\n        score += 10\n    if len(metadata.get(\"pulseq_functions\", [])) &gt; 5:\n        score += 15\n    if metadata.get(\"sequence_type\") != \"unknown\":\n        score += 10\n    if \"seq.checkTiming\" in content:\n        score += 10  # Proper validation\n    if metadata.get(\"has_vendor_code\"):\n        score += 5  # Real-world applicability\n\n    # Negative factors\n    if metadata.get(\"line_count\", 0) &lt; 50:\n        score -= 10  # Too simple\n    if \"TODO\" in content or \"FIXME\" in content:\n        score -= 15  # Incomplete\n    if \"deprecated\" in content.lower():\n        score -= 20\n\n    return max(0, min(100, score))\n</code></pre>"},{"location":"architecture/enhanced-database-reorganization-plan/#phase-3-validate-critical-patterns-week-2","title":"Phase 3: Validate Critical Patterns (Week 2)","text":"<pre><code>-- Insert validated vendor patterns\nINSERT INTO validated_patterns (pattern_name, pattern_category, problem_description, solution_code, verified_by, works_on_scanners)\nVALUES \n('GE_TRID_Labels', 'vendor_fix', \n 'GE scanners require TRID labels to mark segment boundaries',\n 'seq.setDefinition(''SegmentID'', trid_value);',\n 'HarmonizedMRI Team',\n ARRAY['GE Premier', 'GE SIGNA']),\n\n('GE_Gradient_Raster', 'vendor_fix',\n 'GE requires gradient raster time of 4us, RF raster of 2us',\n 'sys = mr.opts(''gradRasterTime'', 4e-6, ''rfRasterTime'', 2e-6);',\n 'PulsePal Analysis',\n ARRAY['GE Premier']),\n\n('Gradient_Boundary_Check', 'common_bug',\n 'Gradients must ramp to zero at segment boundaries',\n 'gx_end = mr.makeTrapezoid(''x'', ''Area'', -gx.area, ''system'', sys);',\n 'Pulseq Core Team',\n ARRAY['All']);\n</code></pre>"},{"location":"architecture/enhanced-database-reorganization-plan/#phase-4-performance-optimization-week-3","title":"Phase 4: Performance Optimization (Week 3)","text":"<pre><code>-- Create optimized indexes\nCREATE INDEX idx_pulseq_functions ON knowledge_base USING GIN ((metadata-&gt;'pulseq_functions'));\nCREATE INDEX idx_sequence_type ON knowledge_base ((metadata-&gt;&gt;'sequence_type'));\nCREATE INDEX idx_vendor ON knowledge_base USING GIN ((metadata-&gt;'vendor_specific'));\n\n-- Create materialized view for common queries\nCREATE MATERIALIZED VIEW sequence_catalog AS\nSELECT \n    content_type,\n    metadata-&gt;&gt;'sequence_type' as sequence_type,\n    language,\n    COUNT(*) as example_count,\n    AVG(quality_score) as avg_quality,\n    array_agg(DISTINCT metadata-&gt;&gt;'vendor_specific') as vendors\nFROM knowledge_base\nWHERE content_type = 'sequence_implementation'\nGROUP BY content_type, metadata-&gt;&gt;'sequence_type', language;\n\n-- Refresh periodically\nCREATE OR REPLACE FUNCTION refresh_sequence_catalog()\nRETURNS void AS $$\nBEGIN\n    REFRESH MATERIALIZED VIEW CONCURRENTLY sequence_catalog;\nEND;\n$$ LANGUAGE plpgsql;\n</code></pre>"},{"location":"architecture/enhanced-database-reorganization-plan/#expected-outcomes","title":"Expected Outcomes","text":""},{"location":"architecture/enhanced-database-reorganization-plan/#quantitative-improvements-achieved","title":"Quantitative Improvements \u2705 ACHIEVED","text":"<ul> <li>Document reduction: 1,703 \u2192 1,427 documents (16% reduction) \u2705</li> <li>Removed 189 Python files (all pypulseq content) \u2705</li> <li>Removed 30 archived files \u2705</li> <li>Removed 32 generic utilities (kept pipeline-relevant ones) \u2705</li> <li>Removed 25 config/test files \u2705</li> <li>Language consistency: 100% MATLAB (v1.5.0) \u2705</li> <li>Content focus: 135 files with actual sequence implementations</li> <li>MATLAB dominance: 1,178 MATLAB files (83% of all content)</li> <li>Search relevance: Improved through removal of noise</li> <li>Next step: Metadata enrichment and categorization</li> </ul>"},{"location":"architecture/enhanced-database-reorganization-plan/#qualitative-improvements","title":"Qualitative Improvements","text":"<ul> <li>Better organization: Clear content types and quality scoring</li> <li>Vendor knowledge: Properly tagged and searchable adaptations</li> <li>Educational path: Progressive learning from beginner to advanced</li> <li>Validated patterns: Curated solutions to common problems</li> <li>Multi-language: Separate tracking of MATLAB vs Python examples</li> </ul>"},{"location":"architecture/enhanced-database-reorganization-plan/#quality-metrics-dashboard","title":"Quality Metrics Dashboard","text":"<pre><code>-- Create a view to monitor knowledge base health\nCREATE VIEW knowledge_base_metrics AS\nSELECT \n    content_type,\n    COUNT(*) as document_count,\n    AVG(quality_score) as avg_quality,\n    COUNT(DISTINCT language) as languages,\n    COUNT(DISTINCT metadata-&gt;&gt;'sequence_type') as sequence_types,\n    AVG(LENGTH(content)) as avg_content_length,\n    MAX(updated_at) as last_update\nFROM knowledge_base\nGROUP BY content_type\n\nUNION ALL\n\nSELECT \n    'TOTAL' as content_type,\n    COUNT(*) as document_count,\n    AVG(quality_score) as avg_quality,\n    COUNT(DISTINCT language) as languages,\n    COUNT(DISTINCT metadata-&gt;&gt;'sequence_type') as sequence_types,\n    AVG(LENGTH(content)) as avg_content_length,\n    MAX(updated_at) as last_update\nFROM knowledge_base;\n</code></pre>"},{"location":"architecture/enhanced-database-reorganization-plan/#maintenance-strategy","title":"Maintenance Strategy","text":""},{"location":"architecture/enhanced-database-reorganization-plan/#weekly-tasks","title":"Weekly Tasks","text":"<ul> <li>Review and validate new patterns from user queries</li> <li>Update quality scores based on usage analytics</li> <li>Identify gaps in sequence coverage</li> </ul>"},{"location":"architecture/enhanced-database-reorganization-plan/#monthly-tasks","title":"Monthly Tasks","text":"<ul> <li>Re-crawl high-value repositories for updates</li> <li>Review and remove outdated content</li> <li>Generate embeddings for new content</li> </ul>"},{"location":"architecture/enhanced-database-reorganization-plan/#quarterly-tasks","title":"Quarterly Tasks","text":"<ul> <li>Full quality audit of knowledge base</li> <li>Update vendor adaptation patterns</li> <li>Benchmark search performance</li> </ul>"},{"location":"architecture/enhanced-database-reorganization-plan/#critical-decision-matlab-only-focus","title":"Critical Decision: MATLAB-Only Focus","text":""},{"location":"architecture/enhanced-database-reorganization-plan/#why-remove-all-python-content","title":"Why Remove All Python Content?","text":"<p>Strategic Decision: Focus exclusively on MATLAB Pulseq v1.5.0, removing all Python/pypulseq content.</p>"},{"location":"architecture/enhanced-database-reorganization-plan/#the-version-mismatch-problem","title":"The Version Mismatch Problem","text":"<ul> <li>MATLAB Pulseq: v1.5.0 (current, actively maintained)</li> <li>Python pypulseq: v1.4.0 (lagging behind)</li> <li>Impact: Mixing versions creates confusion about feature availability and API differences</li> </ul>"},{"location":"architecture/enhanced-database-reorganization-plan/#current-python-content-analysis","title":"Current Python Content Analysis","text":"<pre><code>Source                          | Files | Type           | Quality Issue\n--------------------------------|-------|----------------|----------------\nimr-framework/pypulseq          | 82    | Core library   | v1.4.0 outdated\nyutingchen11/MIMOSA            | 16    | Reconstruction | Not sequence writing\nHarmonizedMRI/SOSP3d            | 6     | Reconstruction | Pure PyTorch, no Pulseq\nOther sources                   | 10    | Tests/Utils    | Minimal value\n</code></pre>"},{"location":"architecture/enhanced-database-reorganization-plan/#api-confusion-example","title":"API Confusion Example","text":"<pre><code>% MATLAB (v1.5.0) - Current standard\nseq = mr.Sequence();\nrf = mr.makeSincPulse(flip, 'Duration', 3e-3);\nseq.addBlock(rf, gz);\n</code></pre> <pre><code># Python (v1.4.0) - Different API, outdated\nseq = pp.Sequence()\nrf = pp.make_sinc_pulse(flip_angle=flip, duration=3e-3)\nseq.add_block(rf, gz)\n</code></pre> <p>Mixing these in the knowledge base causes: - \u274c Incorrect API suggestions - \u274c Version-specific feature confusion - \u274c Inconsistent naming conventions (camelCase vs snake_case)</p>"},{"location":"architecture/enhanced-database-reorganization-plan/#benefits-of-matlab-only-approach","title":"Benefits of MATLAB-Only Approach","text":"<ol> <li>Consistency: Single API, single version, single naming convention</li> <li>Quality: Focus resources on one excellent knowledge base vs two mediocre ones</li> <li>Clarity: No need to specify language in every response</li> <li>Maintenance: Easier updates and quality control</li> <li>User Experience: Clear, unambiguous answers</li> </ol>"},{"location":"architecture/enhanced-database-reorganization-plan/#future-python-integration-plan","title":"Future Python Integration Plan","text":"<p>When pypulseq reaches v1.5.0:</p> <ol> <li>Dedicated Crawl: Fresh extraction with lessons learned from MATLAB</li> <li>Separate Storage: Language-specific tables or clear metadata separation</li> <li>Smart Routing: User specifies language preference</li> <li>Version Parity: Ensure both languages offer same features</li> </ol> <pre><code>-- Future schema for multi-language support\nALTER TABLE knowledge_base \nADD COLUMN language VARCHAR(10) DEFAULT 'matlab',\nADD COLUMN pulseq_version VARCHAR(10),\nADD INDEX idx_language_version (language, pulseq_version);\n</code></pre>"},{"location":"architecture/enhanced-database-reorganization-plan/#critical-decision-utility-files","title":"Critical Decision: Utility Files","text":""},{"location":"architecture/enhanced-database-reorganization-plan/#revised-understanding-the-sequence-reconstruction-interface","title":"Revised Understanding: The Sequence-Reconstruction Interface","text":"<p>Important Discovery: The official Pulseq repository includes reconstruction examples (<code>demoRecon/</code> folder), and sequences ARE written with reconstruction considerations in mind. The boundary is more nuanced than initially thought.</p>"},{"location":"architecture/enhanced-database-reorganization-plan/#the-actual-workflow","title":"The Actual Workflow","text":"<ol> <li>Sequence Generation Phase (Primary PulsePal focus)</li> <li>User writes: <code>seq = mr.Sequence()</code>, <code>seq.addBlock(rf, gz)</code>, <code>seq.write('my_sequence.seq')</code></li> <li>ALSO calculates k-space trajectories for reconstruction</li> <li>Defines sampling patterns that determine reconstruction approach</li> <li> <p>Compensates for hardware delays that affect image quality</p> </li> <li> <p>Data Reconstruction Phase (Still relevant for sequence design)</p> </li> <li>Uses k-space trajectory FROM the sequence</li> <li>Relies on sampling pattern DEFINED BY the sequence</li> <li>Applies trajectory delays CALCULATED IN the sequence</li> </ol>"},{"location":"architecture/enhanced-database-reorganization-plan/#evidence-from-official-pulseq","title":"Evidence from Official Pulseq","text":"<ul> <li>67 files mention k-space considerations</li> <li>50 files use <code>calculateKspace()</code> methods</li> <li>51 files discuss trajectory planning</li> <li>29 files reference reconstruction needs</li> <li>6 official reconstruction demos in <code>demoRecon/</code> folder</li> </ul>"},{"location":"architecture/enhanced-database-reorganization-plan/#critical-sequence-reconstruction-dependencies","title":"Critical Sequence-Reconstruction Dependencies","text":"Aspect Why It Matters for Sequence Design K-space trajectory Sequence must calculate and provide trajectory for non-Cartesian imaging Trajectory delays Must compensate in sequence design (e.g., <code>traj_recon_delay = 3.9e-6</code>) Sampling patterns Acceleration/undersampling must be planned in sequence Phase encode ordering Determines how data maps to k-space ADC timing Critical for proper data-gradient alignment"},{"location":"architecture/enhanced-database-reorganization-plan/#revised-what-we-keep-vs-remove-end-to-end-expertise","title":"Revised: What We Keep vs Remove (End-to-End Expertise)","text":"Utility Type Keep? Why Generic FFT (<code>fft2c</code>, <code>ifft3c</code>) \u274c Remove Generic operations, available in MATLAB Generic array ops (<code>crop</code>, <code>reshape</code>) \u274c Remove Standard MATLAB, not MRI-specific Setup/config scripts \u274c Remove Path configurations, not MRI-specific GRAPPA/SENSE implementations \u2705 KEEP Educational value, debugging support Coil sensitivity estimation \u2705 KEEP Understanding parallel imaging Kernel calculation (<code>dat2Kernel</code>) \u2705 KEEP Shows how acceleration works Vendor conversion (<code>seq2ge</code>, <code>seq2ceq</code>) \u2705 KEEP Critical for deployment TOPPE utilities \u2705 KEEP GE scanner interface Trajectory calculation \u2705 KEEP Needed for spiral/radial sequences K-space ordering examples \u2705 KEEP Shows data organization for recon Trajectory delay compensation \u2705 KEEP Required for image quality Official Pulseq recon demos \u2705 KEEP Part of core distribution Sampling pattern generators \u2705 KEEP For acceleration strategies calculateKspace methods \u2705 KEEP Core Pulseq functionality Gridding/NUFFT \u2705 KEEP Non-Cartesian reconstruction Novel reconstruction (Wave, SMS) \u2705 KEEP Cutting-edge techniques"},{"location":"architecture/enhanced-database-reorganization-plan/#impact-on-pulsepal-users","title":"Impact on PulsePal Users","text":""},{"location":"architecture/enhanced-database-reorganization-plan/#example-how-do-i-write-a-spiral-sequence","title":"Example: \"How do I write a spiral sequence?\"","text":"<p>PulsePal should provide: - \u2705 Spiral trajectory calculation (<code>mr.traj2grad()</code>) - \u2705 Gradient waveform generation from trajectory - \u2705 Trajectory delay compensation strategies - \u2705 K-space trajectory visualization - \u2705 Spiral gridding/NUFFT concepts (for complete understanding)</p>"},{"location":"architecture/enhanced-database-reorganization-plan/#example-how-do-i-implement-2x-grappa-acceleration","title":"Example: \"How do I implement 2x GRAPPA acceleration?\"","text":"<p>PulsePal should provide: - \u2705 How to set undersampling patterns in sequence - \u2705 How to include calibration regions (ACS lines) - \u2705 Phase encode ordering for optimal reconstruction - \u2705 GRAPPA kernel calculation (for understanding/debugging) - \u2705 Coil sensitivity concepts (educational value)</p>"},{"location":"architecture/enhanced-database-reorganization-plan/#example-why-are-my-images-shifteddistorted","title":"Example: \"Why are my images shifted/distorted?\"","text":"<p>PulsePal should explain: - \u2705 Trajectory delay compensation (<code>traj_recon_delay</code>) - \u2705 How to use <code>calculateKspacePP()</code> with delays - \u2705 Hardware-specific timing considerations - \u2705 Example code showing proper compensation</p> <p>This nuanced approach provides sequence writers with reconstruction-aware knowledge while avoiding full reconstruction implementations.</p>"},{"location":"architecture/enhanced-database-reorganization-plan/#vendor-conversion-tools-why-theyre-critical","title":"Vendor Conversion Tools: Why They're Critical","text":""},{"location":"architecture/enhanced-database-reorganization-plan/#the-pulseq-execution-pipeline","title":"The Pulseq Execution Pipeline","text":"<pre><code>1. User writes Pulseq code in MATLAB/Python\n   \u2193\n2. Generate .seq file (vendor-neutral format)\n   \u2193\n3. VENDOR CONVERSION (Critical step!)\n   \u2193\n4. Scanner executes vendor-specific format\n</code></pre>"},{"location":"architecture/enhanced-database-reorganization-plan/#what-vendor-conversion-tools-do","title":"What Vendor Conversion Tools Do","text":"<p>These tools translate the universal Pulseq <code>.seq</code> format into vendor-specific languages that MRI scanners can execute.</p> Vendor Conversion Tool Output Format Key Adaptations GE <code>seq2ge</code>, <code>seq2ceq</code>, PulCeq <code>.pge</code>, <code>.tar</code> TRID labels, 4\u03bcs gradient raster, segment boundaries Siemens Direct interpreter <code>.seq</code> (direct) Minimal conversion needed Bruker Bruker interpreter Proprietary Vendor-specific timing Philips Philips interpreter Proprietary Vendor-specific format"},{"location":"architecture/enhanced-database-reorganization-plan/#example-ge-conversion-process","title":"Example: GE Conversion Process","text":"<pre><code>% Step 1: User writes Pulseq sequence\nseq = mr.Sequence(sys);\nseq.addBlock(rf, gz);\nseq.addBlock(gx, adc);\nseq.write('mysequence.seq');  % Universal format\n\n% Step 2: Convert for GE scanner (REQUIRED!)\nceq = seq2ceq('mysequence.seq');  % Conversion tool\nceq.trid = [1, 1, 2, 2];  % Add GE-specific segment markers\nwriteceq(ceq, 'mysequence.pge');  % GE can execute this\n\n% Without conversion, the scanner cannot run the sequence!\n</code></pre>"},{"location":"architecture/enhanced-database-reorganization-plan/#why-keep-these-in-the-knowledge-base","title":"Why Keep These in the Knowledge Base","text":"<ol> <li>Deployment Critical: Users can't run sequences without these converters</li> <li>Vendor-Specific Knowledge: Each scanner has unique requirements:</li> <li>GE: TRID labels, timing constraints</li> <li>Siemens: Label extensions, reconstruction markers</li> <li>Hardware limitations differ by vendor</li> <li>Real-World Usage: The gap between \"sequence works in simulation\" and \"sequence runs on scanner\"</li> </ol>"},{"location":"architecture/enhanced-database-reorganization-plan/#what-happens-without-conversion-tools","title":"What Happens Without Conversion Tools?","text":"<ul> <li>\u274c User writes perfect Pulseq code</li> <li>\u274c Generates valid <code>.seq</code> file</li> <li>\u274c Cannot execute on scanner - Scanner doesn't understand <code>.seq</code> format</li> <li>\u274c Frustrated user: \"Why won't my sequence run?\"</li> </ul>"},{"location":"architecture/enhanced-database-reorganization-plan/#pulsepals-role","title":"PulsePal's Role","text":"<p>When users ask \"How do I run my sequence on a GE/Siemens/Bruker scanner?\", PulsePal must: - \u2705 Provide the appropriate conversion workflow - \u2705 Explain vendor-specific requirements - \u2705 Show examples of the conversion process - \u2705 Warn about timing constraints and hardware limitations</p>"},{"location":"architecture/enhanced-database-reorganization-plan/#key-discovery-end-to-end-pipeline-knowledge-is-essential","title":"Key Discovery: End-to-End Pipeline Knowledge is Essential","text":""},{"location":"architecture/enhanced-database-reorganization-plan/#the-complete-picture","title":"The Complete Picture","text":"<p>Our investigation revealed that effective Pulseq programming requires understanding the ENTIRE pipeline, not just sequence generation. The evidence: - Official Pulseq includes 6 reconstruction demos in <code>demoRecon/</code> - 67 files discuss k-space considerations - 50 files use trajectory calculation methods - Researchers often need custom reconstruction for novel techniques - Debugging requires understanding how sequences affect final images</p>"},{"location":"architecture/enhanced-database-reorganization-plan/#what-this-means-for-pulsepal","title":"What This Means for PulsePal","text":"<p>PulsePal must be an end-to-end expert to properly assist users: - Sequence Design: Core Pulseq programming (<code>mr.*</code>, <code>seq.*</code>) - Data Acquisition: Understanding scanner execution and limitations - Reconstruction Pipeline: How data becomes images (GRAPPA, SENSE, gridding) - Debugging Support: Why images fail and how to fix them - Research Innovation: Supporting novel techniques with custom reconstruction</p> <p>This comprehensive knowledge enables PulsePal to be a true partner in MRI sequence development, not just a code generator.</p>"},{"location":"architecture/enhanced-database-reorganization-plan/#conclusion","title":"Conclusion","text":"<p>This enhanced reorganization plan implements an \"end-to-end expertise\" strategy:</p> <ol> <li>MATLAB-only focus - Single language (v1.5.0) for consistency</li> <li>Minimal cleanup - Remove only 18% (truly generic content)</li> <li>Complete pipeline knowledge - Preserve sequence-to-image understanding</li> <li>Three-tier categorization - Smart retrieval based on query context</li> <li>Rich metadata - Enable intelligent filtering and search</li> <li>Debugging capability - Full pipeline knowledge for troubleshooting</li> </ol> <p>The result will be a comprehensive MATLAB-centric knowledge base that enables PulsePal to be a true end-to-end Pulseq expert, capable of: - Writing sequences - Understanding data acquisition - Explaining reconstruction requirements - Debugging image quality issues - Supporting cutting-edge research</p> <p>This positions PulsePal not just as a \"sequence writer\" but as a complete MRI sequence development partner.</p>"},{"location":"architecture/enhanced-database-reorganization-plan/#next-steps-after-cleanup","title":"Next Steps After Cleanup","text":"<ol> <li>Immediate: Execute Phase 1 SQL cleanup queries</li> <li>Week 1: Enrich remaining MATLAB content with metadata</li> <li>Week 2: Validate vendor patterns and critical sequences</li> <li>Future: Monitor pypulseq for v1.5.0 release, then execute dedicated Python crawl</li> </ol> <p>This strategic focus on MATLAB ensures PulsePal delivers accurate, version-consistent assistance rather than confusing users with mixed-language, mixed-version responses.</p>"},{"location":"architecture/pulsepal-full-stack-architecture/","title":"PulsePal Full-Stack Architecture Document","text":""},{"location":"architecture/pulsepal-full-stack-architecture/#executive-summary","title":"Executive Summary","text":"<p>PulsePal is an intelligent MRI sequence programming assistant built on a modern AI-powered architecture that combines Google Gemini 2.5 Flash's advanced reasoning capabilities with a sophisticated RAG (Retrieval-Augmented Generation) system backed by Supabase's vector database. The system follows a single-agent architecture with intelligent decision-making that routes 90% of queries through built-in knowledge and selectively uses RAG for specific Pulseq function documentation.</p>"},{"location":"architecture/pulsepal-full-stack-architecture/#system-overview","title":"System Overview","text":""},{"location":"architecture/pulsepal-full-stack-architecture/#core-purpose","title":"Core Purpose","text":"<p>PulsePal assists MRI researchers, graduate students, and biomedical engineers in developing, debugging, and understanding Pulseq sequences through an intelligent conversational interface that provides both theoretical MRI physics knowledge and practical programming assistance.</p>"},{"location":"architecture/pulsepal-full-stack-architecture/#key-architectural-principles","title":"Key Architectural Principles","text":"<ol> <li>Intelligence-First Design: Leverages Gemini's built-in MRI physics knowledge for most queries</li> <li>Selective RAG Enhancement: Uses vector search only when specific Pulseq documentation is needed</li> <li>Single Agent Architecture: One intelligent agent handles all queries without delegation</li> <li>Session-Aware Context: Maintains conversation history and user preferences across interactions</li> <li>Dual Interface Support: Provides both CLI and web interfaces for different usage scenarios</li> </ol>"},{"location":"architecture/pulsepal-full-stack-architecture/#technology-stack","title":"Technology Stack","text":""},{"location":"architecture/pulsepal-full-stack-architecture/#core-technologies","title":"Core Technologies","text":"<ul> <li>LLM: Google Gemini 2.5 Flash (primary reasoning engine)</li> <li>Framework: PydanticAI (agent orchestration and tool management)</li> <li>Vector Database: Supabase with pgvector extension</li> <li>Embeddings: Google Embeddings API (768-dimensional vectors)</li> <li>Web Framework: Chainlit (web interface with streaming support)</li> <li>Language: Python 3.10+ with async/await support</li> </ul>"},{"location":"architecture/pulsepal-full-stack-architecture/#supporting-technologies","title":"Supporting Technologies","text":"<ul> <li>Session Management: Custom in-memory session store with 24-hour retention</li> <li>Logging: Python logging with conversation archival system</li> <li>Configuration: Pydantic-settings with environment variable management</li> <li>Authentication: API key-based auth with rate limiting (optional)</li> <li>Semantic Routing: Local transformer model for query classification</li> </ul>"},{"location":"architecture/pulsepal-full-stack-architecture/#system-architecture","title":"System Architecture","text":""},{"location":"architecture/pulsepal-full-stack-architecture/#component-hierarchy","title":"Component Hierarchy","text":"<pre><code>PulsePal System\n\u251c\u2500\u2500 User Interfaces\n\u2502   \u251c\u2500\u2500 CLI Interface (run_pulsepal.py)\n\u2502   \u2514\u2500\u2500 Web Interface (chainlit_app.py)\n\u251c\u2500\u2500 Core Agent Layer\n\u2502   \u251c\u2500\u2500 Main Agent (main_agent.py)\n\u2502   \u251c\u2500\u2500 Dependencies (dependencies.py)\n\u2502   \u2514\u2500\u2500 Tools (tools.py)\n\u251c\u2500\u2500 Service Layer\n\u2502   \u251c\u2500\u2500 RAG Service (rag_service.py)\n\u2502   \u251c\u2500\u2500 Session Manager\n\u2502   \u251c\u2500\u2500 Semantic Router (semantic_router.py)\n\u2502   \u2514\u2500\u2500 Settings Manager (settings.py)\n\u251c\u2500\u2500 Data Layer\n\u2502   \u251c\u2500\u2500 Supabase Client (supabase_client.py)\n\u2502   \u251c\u2500\u2500 Embeddings Service (embeddings.py)\n\u2502   \u2514\u2500\u2500 Conversation Logger\n\u2514\u2500\u2500 External Services\n    \u251c\u2500\u2500 Google Gemini API\n    \u251c\u2500\u2500 Google Embeddings API\n    \u2514\u2500\u2500 Supabase Vector Database\n</code></pre>"},{"location":"architecture/pulsepal-full-stack-architecture/#data-flow-architecture","title":"Data Flow Architecture","text":"<ol> <li>Query Reception</li> <li>User submits query through CLI or web interface</li> <li>Interface creates/retrieves session context</li> <li> <p>Query passed to main agent with session dependencies</p> </li> <li> <p>Intelligent Routing</p> </li> <li>Semantic router analyzes query intent (100ms)</li> <li>Determines if RAG search is needed (10% of queries)</li> <li> <p>Detects mentioned functions for potential validation</p> </li> <li> <p>Knowledge Retrieval (when needed)</p> </li> <li>RAG service performs hybrid search (vector + keyword)</li> <li>Sources include API docs, examples, tutorials</li> <li> <p>Results formatted with source attribution</p> </li> <li> <p>Response Generation</p> </li> <li>Gemini processes query with context</li> <li>Validates functions if code generation requested</li> <li> <p>Generates comprehensive response</p> </li> <li> <p>Session Persistence</p> </li> <li>Response logged to conversation history</li> <li>Session context updated</li> <li>Optional archival for important sessions</li> </ol>"},{"location":"architecture/pulsepal-full-stack-architecture/#core-components","title":"Core Components","text":""},{"location":"architecture/pulsepal-full-stack-architecture/#main-agent-main_agentpy","title":"Main Agent (main_agent.py)","text":"<p>The central intelligence hub that orchestrates all PulsePal functionality: - System Prompt: Comprehensive MRI physics and Pulseq expertise - Tool Registration: Manages RAG search, validation, and code tools - Session Management: Creates and maintains conversation context - Response Generation: Leverages Gemini for intelligent responses</p>"},{"location":"architecture/pulsepal-full-stack-architecture/#rag-service-rag_servicepy","title":"RAG Service (rag_service.py)","text":"<p>Modern retrieval system with source-aware search capabilities: - Multi-Source Search: API docs, examples, tutorials, community content - Hybrid Search Strategy: Combines vector similarity with keyword matching - Smart Result Formatting: Groups results by source with synthesis hints - Performance Optimization: Query caching and result optimization</p>"},{"location":"architecture/pulsepal-full-stack-architecture/#session-management-dependenciespy","title":"Session Management (dependencies.py)","text":"<p>Sophisticated conversation and context management: - Conversation History: Maintains up to 100 exchanges per session - Language Detection: Tracks preferred programming language (MATLAB/Python) - Code Examples: Stores and references generated code snippets - Session Lifecycle: 24-hour retention with automatic cleanup</p>"},{"location":"architecture/pulsepal-full-stack-architecture/#tools-module-toolspy","title":"Tools Module (tools.py)","text":"<p>Unified interface for agent capabilities: - search_pulseq_knowledge: Intelligent RAG search with source selection - validate_pulseq_function: Deterministic function validation - verify_function_namespace: Checks function existence in database - validate_code_block: Validates entire code segments</p>"},{"location":"architecture/pulsepal-full-stack-architecture/#database-architecture","title":"Database Architecture","text":""},{"location":"architecture/pulsepal-full-stack-architecture/#supabase-schema-design","title":"Supabase Schema Design","text":""},{"location":"architecture/pulsepal-full-stack-architecture/#primary-tables","title":"Primary Tables","text":"<ol> <li>pulseq_sequences: Complete sequence implementations</li> <li>Full code storage with language specification</li> <li>Classification system (family, contrast, trajectory)</li> <li>Dependency tracking and architecture type</li> <li>Feature arrays for smart filtering</li> <li> <p>Semantic embeddings for similarity search</p> </li> <li> <p>sequence_chunks: Code sections for granular retrieval</p> </li> <li>Universal 6-section pattern recognition</li> <li>Function and concept extraction</li> <li>Educational value assessment</li> <li> <p>Section-specific embeddings</p> </li> <li> <p>crawled_code: Supporting code and dependencies</p> </li> <li>Helper functions and utilities</li> <li>Data files and calibration sequences</li> <li>Documentation and tutorials</li> <li> <p>Cross-reference tracking</p> </li> <li> <p>api_reference: Authoritative function documentation</p> </li> <li>Complete function signatures</li> <li>Parameter specifications</li> <li>Return value documentation</li> <li>Usage examples</li> </ol>"},{"location":"architecture/pulsepal-full-stack-architecture/#vector-search-strategy","title":"Vector Search Strategy","text":"<ul> <li>Embedding Model: Google's text-embedding-004 (768 dimensions)</li> <li>Similarity Metric: Cosine similarity with pgvector</li> <li>Hybrid Approach: Combines vector search with SQL full-text search</li> <li>Reranking: Optional cross-encoder for result refinement</li> </ul>"},{"location":"architecture/pulsepal-full-stack-architecture/#integration-architecture","title":"Integration Architecture","text":""},{"location":"architecture/pulsepal-full-stack-architecture/#external-service-integration","title":"External Service Integration","text":""},{"location":"architecture/pulsepal-full-stack-architecture/#google-gemini-integration","title":"Google Gemini Integration","text":"<ul> <li>Model: gemini-2.5-flash with 0.1 temperature</li> <li>Context Window: 1M tokens for comprehensive understanding</li> <li>Safety Settings: Configured for technical content</li> <li>Rate Limiting: Automatic retry with exponential backoff</li> </ul>"},{"location":"architecture/pulsepal-full-stack-architecture/#supabase-integration","title":"Supabase Integration","text":"<ul> <li>Connection Pooling: Persistent client with connection reuse</li> <li>RPC Functions: Custom PostgreSQL functions for complex queries</li> <li>Row-Level Security: Configured for multi-tenant support</li> <li>Backup Strategy: Automated daily backups with point-in-time recovery</li> </ul>"},{"location":"architecture/pulsepal-full-stack-architecture/#google-embeddings-api","title":"Google Embeddings API","text":"<ul> <li>Batch Processing: Efficient batch embedding generation</li> <li>Caching Layer: Local cache for frequently embedded queries</li> <li>Fallback Strategy: Graceful degradation if service unavailable</li> </ul>"},{"location":"architecture/pulsepal-full-stack-architecture/#performance-architecture","title":"Performance Architecture","text":""},{"location":"architecture/pulsepal-full-stack-architecture/#optimization-strategies","title":"Optimization Strategies","text":"<ol> <li>Intelligent Query Routing</li> <li>90% queries handled with built-in knowledge (0ms retrieval)</li> <li>10% requiring RAG search (500-1000ms retrieval)</li> <li> <p>Semantic routing decision in ~100ms</p> </li> <li> <p>Caching Mechanisms</p> </li> <li>Session-level conversation cache</li> <li>RAG result caching (15-minute TTL)</li> <li> <p>Embedding cache for common queries</p> </li> <li> <p>Lazy Loading</p> </li> <li>Semantic router loaded on-demand</li> <li>Cross-encoder reranker loaded when needed</li> <li> <p>Database connections established lazily</p> </li> <li> <p>Response Streaming</p> </li> <li>Chainlit streaming for progressive display</li> <li>Chunked response generation</li> <li>Early result display while processing continues</li> </ol>"},{"location":"architecture/pulsepal-full-stack-architecture/#performance-metrics","title":"Performance Metrics","text":"<ul> <li>Average Response Time: 1-2 seconds for built-in knowledge</li> <li>RAG-Enhanced Response: 2-3 seconds with documentation</li> <li>Session Creation: &lt;100ms</li> <li>Query Classification: ~100ms with semantic router</li> </ul>"},{"location":"architecture/pulsepal-full-stack-architecture/#security-architecture","title":"Security Architecture","text":""},{"location":"architecture/pulsepal-full-stack-architecture/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<ul> <li>API Key Management: SHA-256 hashed keys with salt</li> <li>Rate Limiting: Per-user daily limits with Redis tracking</li> <li>Session Security: UUID4 session identifiers</li> <li>CORS Configuration: Restrictive origin policies</li> </ul>"},{"location":"architecture/pulsepal-full-stack-architecture/#data-protection","title":"Data Protection","text":"<ul> <li>Environment Variables: All secrets in .env files</li> <li>No Credential Storage: No passwords or keys in code</li> <li>Secure Communication: HTTPS for all external APIs</li> <li>Input Validation: Pydantic models for all inputs</li> </ul>"},{"location":"architecture/pulsepal-full-stack-architecture/#privacy-considerations","title":"Privacy Considerations","text":"<ul> <li>Conversation Logging: Optional with user consent</li> <li>Data Retention: 30-day default with configurable policies</li> <li>PII Handling: No personal data in vector embeddings</li> <li>Audit Trail: Complete query and response logging</li> </ul>"},{"location":"architecture/pulsepal-full-stack-architecture/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"architecture/pulsepal-full-stack-architecture/#development-environment","title":"Development Environment","text":"<ul> <li>Local Setup: Docker Compose for services</li> <li>Hot Reload: Automatic agent reload on code changes</li> <li>Debug Mode: Verbose logging and error traces</li> <li>Test Data: Synthetic sequences for development</li> </ul>"},{"location":"architecture/pulsepal-full-stack-architecture/#production-deployment","title":"Production Deployment","text":"<ul> <li>Server Requirements: 4GB RAM, 2 CPU cores minimum</li> <li>Process Management: Gunicorn with multiple workers</li> <li>Load Balancing: Nginx reverse proxy</li> <li>Monitoring: Prometheus metrics and Grafana dashboards</li> </ul>"},{"location":"architecture/pulsepal-full-stack-architecture/#scaling-strategy","title":"Scaling Strategy","text":"<ul> <li>Horizontal Scaling: Multiple agent instances</li> <li>Database Scaling: Supabase automatic scaling</li> <li>Cache Distribution: Redis for distributed caching</li> <li>CDN Integration: Static asset delivery</li> </ul>"},{"location":"architecture/pulsepal-full-stack-architecture/#error-handling-resilience","title":"Error Handling &amp; Resilience","text":""},{"location":"architecture/pulsepal-full-stack-architecture/#error-categories","title":"Error Categories","text":"<ol> <li>API Errors: Rate limits, authentication, timeouts</li> <li>Database Errors: Connection failures, query timeouts</li> <li>Session Errors: Corruption, expiration, overflow</li> <li>Validation Errors: Invalid functions, malformed code</li> </ol>"},{"location":"architecture/pulsepal-full-stack-architecture/#recovery-strategies","title":"Recovery Strategies","text":"<ul> <li>Automatic Retry: Exponential backoff for transient errors</li> <li>Fallback Mechanisms: Built-in knowledge when RAG fails</li> <li>Graceful Degradation: Reduced functionality vs. failure</li> <li>Error Reporting: Detailed logs with context</li> </ul>"},{"location":"architecture/pulsepal-full-stack-architecture/#testing-architecture","title":"Testing Architecture","text":""},{"location":"architecture/pulsepal-full-stack-architecture/#test-coverage-strategy","title":"Test Coverage Strategy","text":"<ul> <li>Unit Tests: 85% coverage for core modules</li> <li>Integration Tests: API and database integration</li> <li>E2E Tests: Complete user workflows</li> <li>Performance Tests: Load and stress testing</li> </ul>"},{"location":"architecture/pulsepal-full-stack-architecture/#test-organization","title":"Test Organization","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/           # Component-level tests\n\u251c\u2500\u2500 integration/    # Service interaction tests\n\u251c\u2500\u2500 e2e/           # User workflow tests\n\u2514\u2500\u2500 fixtures/      # Shared test data\n</code></pre>"},{"location":"architecture/pulsepal-full-stack-architecture/#monitoring-observability","title":"Monitoring &amp; Observability","text":""},{"location":"architecture/pulsepal-full-stack-architecture/#metrics-collection","title":"Metrics Collection","text":"<ul> <li>Response Times: P50, P95, P99 latencies</li> <li>Error Rates: By category and severity</li> <li>Usage Patterns: Query types and frequencies</li> <li>Resource Usage: CPU, memory, database connections</li> </ul>"},{"location":"architecture/pulsepal-full-stack-architecture/#logging-strategy","title":"Logging Strategy","text":"<ul> <li>Structured Logging: JSON format for analysis</li> <li>Log Levels: DEBUG, INFO, WARNING, ERROR, CRITICAL</li> <li>Conversation Archival: Searchable conversation history</li> <li>Performance Logging: Detailed timing information</li> </ul>"},{"location":"architecture/pulsepal-full-stack-architecture/#future-architecture-considerations","title":"Future Architecture Considerations","text":""},{"location":"architecture/pulsepal-full-stack-architecture/#planned-enhancements","title":"Planned Enhancements","text":"<ol> <li>Multi-Agent Architecture: Specialized agents for different domains</li> <li>Advanced Caching: Distributed cache with Redis Cluster</li> <li>Real-time Collaboration: WebSocket support for shared sessions</li> <li>Plugin System: Extensible tool architecture</li> </ol>"},{"location":"architecture/pulsepal-full-stack-architecture/#scalability-roadmap","title":"Scalability Roadmap","text":"<ul> <li>Microservices Migration: Separate RAG and agent services</li> <li>Event-Driven Architecture: Message queue integration</li> <li>Multi-Region Deployment: Geographic distribution</li> <li>Advanced Load Balancing: Smart routing based on load</li> </ul>"},{"location":"architecture/pulsepal-full-stack-architecture/#maintenance-operations","title":"Maintenance &amp; Operations","text":""},{"location":"architecture/pulsepal-full-stack-architecture/#regular-maintenance-tasks","title":"Regular Maintenance Tasks","text":"<ul> <li>Database Optimization: Weekly VACUUM and ANALYZE</li> <li>Log Rotation: Daily rotation with 30-day retention</li> <li>Cache Cleanup: Hourly expired entry removal</li> <li>Session Cleanup: Daily removal of expired sessions</li> </ul>"},{"location":"architecture/pulsepal-full-stack-architecture/#monitoring-checklist","title":"Monitoring Checklist","text":"<ul> <li>API availability and response times</li> <li>Database query performance</li> <li>Error rate thresholds</li> <li>Resource utilization trends</li> <li>User satisfaction metrics</li> </ul>"},{"location":"architecture/pulsepal-full-stack-architecture/#conclusion","title":"Conclusion","text":"<p>PulsePal's architecture represents a modern, scalable approach to AI-powered assistance that balances intelligence with performance. The system's strength lies in its intelligent routing mechanism that leverages built-in knowledge for most queries while maintaining the ability to access specific documentation when needed. This architecture ensures fast response times, high accuracy, and excellent user experience while remaining maintainable and extensible for future enhancements.</p> <p>The combination of Google Gemini's advanced reasoning, Supabase's vector capabilities, and PydanticAI's robust framework creates a powerful platform for MRI sequence development assistance that serves both educational and practical needs of the MRI research community.</p>"},{"location":"architecture/supabase-knowledge-base/","title":"PulsePal Supabase Knowledge Base Architecture","text":""},{"location":"architecture/supabase-knowledge-base/#overview","title":"Overview","text":"<p>The PulsePal project utilizes a Supabase PostgreSQL database as its knowledge base for storing and retrieving MRI sequence programming information. The database leverages vector embeddings for semantic search capabilities and maintains a comprehensive collection of Pulseq documentation, API references, code examples, and complete sequence implementations.</p> <p>Project ID: <code>mnbvsrsivuuuwbtkmumt</code> Last Updated: January 2025</p>"},{"location":"architecture/supabase-knowledge-base/#database-schema","title":"Database Schema","text":""},{"location":"architecture/supabase-knowledge-base/#core-tables","title":"Core Tables","text":"<p>The knowledge base consists of six primary tables that work together to provide comprehensive MRI sequence programming support:</p>"},{"location":"architecture/supabase-knowledge-base/#1-sources-table","title":"1. sources Table","text":"<p>Tracks all data sources that have been indexed into the knowledge base.</p> Column Type Description <code>source_id</code> text (PK) Unique identifier for the source (e.g., GitHub repo URL) <code>summary</code> text Brief description of the source content <code>total_word_count</code> integer Total word count of all content from this source <code>created_at</code> timestamptz When the source was first indexed <code>updated_at</code> timestamptz Last update timestamp <p>Statistics:  - Total sources: 27 - Storage size: 16 KB - Primary content: GitHub repositories containing Pulseq implementations</p>"},{"location":"architecture/supabase-knowledge-base/#2-crawled_pages-table","title":"2. crawled_pages Table","text":"<p>Main content storage for documentation and code examples.</p> Column Type Description <code>id</code> bigint (PK) Unique identifier <code>url</code> varchar Source URL of the content <code>chunk_number</code> integer Chunk sequence number for paginated content <code>content</code> text Actual text content <code>source_id</code> text Foreign key to sources table <code>metadata</code> jsonb Additional metadata (tags, categories, etc.) <code>created_at</code> timestamptz Indexing timestamp <code>embedding</code> vector(768) 768-dimensional vector embedding for semantic search <code>sequence_category</code> varchar Classification of sequence type (e.g., 'GRE', 'EPI', 'MPRAGE') <p>Statistics:  - Total rows: 1,427 - Storage size: 2.6 MB - Contains chunked documentation and code examples - Includes official Pulseq sequence implementations</p>"},{"location":"architecture/supabase-knowledge-base/#3-api_reference-table","title":"3. api_reference Table","text":"<p>Comprehensive API function reference for Pulseq/pypulseq with enhanced metadata.</p> Column Type Description <code>id</code> bigint (PK) Unique identifier <code>name</code> text Function/method name <code>language</code> varchar Programming language ('matlab' or 'python') <code>signature</code> text Function signature <code>description</code> text Detailed description <code>parameters</code> jsonb Parameter details (names, types, descriptions) <code>returns</code> jsonb Return value information <code>source_id</code> text Source reference <code>pulseq_version</code> varchar Pulseq version compatibility <code>embedding</code> vector(768) Vector embedding for semantic search <code>function_type</code> varchar Type classification ('main', 'helper', etc.) <code>usage_examples</code> jsonb Code examples demonstrating usage <code>related_functions</code> jsonb List of related API functions <code>has_nargin_pattern</code> boolean MATLAB nargin pattern detection <code>class_name</code> text Parent class name (if method) <code>is_class_method</code> boolean Whether function is a class method <code>calling_pattern</code> text Common calling patterns <code>instance_variable</code> text Common instance variable name <code>search_terms</code> text[] Array of search keywords <code>class_metadata</code> jsonb Additional class information <code>last_updated</code> timestamp Last update timestamp <p>Statistics:  - Total rows: 128 - Storage size: 544 KB - Covers both MATLAB and Python implementations - Includes complete function signatures and usage patterns</p>"},{"location":"architecture/supabase-knowledge-base/#4-pulseq_sequences-table-new","title":"4. pulseq_sequences Table (NEW)","text":"<p>Complete Pulseq sequences with rich metadata for intelligent retrieval.</p> Column Type Description <code>id</code> bigserial (PK) Unique identifier <code>file_name</code> text Name of the sequence file <code>full_path</code> text Full file path in repository <code>repository</code> text Source repository URL <code>full_code</code> text Complete sequence code <code>line_count</code> integer Number of lines in sequence <code>language</code> text Programming language (default: 'matlab') <code>sequence_family</code> text Primary type (GRE, EPI, TSE, PRESS, etc.) <code>contrast_mechanism</code> text Contrast generation method <code>trajectory_type</code> text K-space sampling pattern <code>dimensionality</code> text 0D, 1D, 2D, 3D classification <code>architecture_type</code> text Code organization (single-file/modular/workflow) <code>complexity_level</code> integer Complexity rating (1-5) <code>dependencies</code> jsonb References to helper files <code>external_requirements</code> text[] External dependencies <code>preparation_techniques</code> text[] Preparation methods used <code>acceleration_methods</code> text[] Acceleration techniques <code>advanced_features</code> text[] Advanced sequence features <code>educational_value</code> text Educational rating (high/medium/low) <code>typical_applications</code> text[] Clinical applications <code>hardware_requirements</code> text[] Scanner requirements <code>embedding</code> vector(768) Semantic search embedding <code>created_at</code> timestamptz Creation timestamp <p>Statistics:  - Total rows: 5 - Storage size: 8 KB - Complete sequence implementations with analysis</p>"},{"location":"architecture/supabase-knowledge-base/#5-sequence_chunks-table-new","title":"5. sequence_chunks Table (NEW)","text":"<p>Code sections from sequences following universal pattern recognition.</p> Column Type Description <code>id</code> bigserial (PK) Unique identifier <code>sequence_id</code> bigint Reference to pulseq_sequences <code>chunk_type</code> text Section type (parameter_definition, rf_gradient_creation, etc.) <code>chunk_order</code> integer Order within sequence <code>start_line</code> integer Starting line number <code>end_line</code> integer Ending line number <code>percentage_of_sequence</code> integer Percentage of total sequence <code>is_pulseq</code> boolean True for sequence code, false for reconstruction <code>code_content</code> text Actual code for this section <code>pulseq_functions</code> text[] Pulseq API functions used <code>key_concepts</code> text[] MRI concepts in section <code>key_variables</code> text[] Important variables <code>mri_concept</code> text Primary MRI concept <code>description</code> text Human-readable description <code>embedding</code> vector(768) Section-specific embedding <code>created_at</code> timestamptz Creation timestamp <p>Statistics:  - Total rows: 34 - Storage size: 40 KB - Granular code sections for targeted retrieval</p>"},{"location":"architecture/supabase-knowledge-base/#6-crawled_code-table-new","title":"6. crawled_code Table (NEW)","text":"<p>All sequence-related code files including helpers and dependencies.</p> Column Type Description <code>id</code> bigserial (PK) Unique identifier <code>content</code> text Full file content <code>source_id</code> text Repository/source identifier <code>content_type</code> text File classification (main_sequence, helper_function, etc.) <code>parent_sequences</code> bigint[] Array of sequences using this file <code>dependency_type</code> text Required or optional dependency <code>file_name</code> text Name of the file <code>file_extension</code> text File extension <code>language_detected</code> text Detected programming language <code>line_count</code> integer Number of lines <code>pulseq_functions_used</code> text[] Pulseq functions in file <code>custom_functions_defined</code> text[] Functions defined in file <code>imports_files</code> text[] Files imported/required <code>metadata</code> jsonb Content-specific metadata <code>embedding</code> vector(768) File-level embedding <code>created_at</code> timestamptz Creation timestamp <p>Statistics:  - Total rows: 15 - Storage size: 24 KB - Supporting files and dependencies</p>"},{"location":"architecture/supabase-knowledge-base/#database-views","title":"Database Views","text":""},{"location":"architecture/supabase-knowledge-base/#1-official_sequence_examples","title":"1. official_sequence_examples","text":"<p>Filtered view of crawled_pages containing official Pulseq sequence examples with embeddings.</p>"},{"location":"architecture/supabase-knowledge-base/#2-api_reference_search","title":"2. api_reference_search","text":"<p>Optimized view for searching API functions with enhanced metadata.</p>"},{"location":"architecture/supabase-knowledge-base/#3-api_reference_details","title":"3. api_reference_details","text":"<p>Detailed view combining API reference with additional context.</p>"},{"location":"architecture/supabase-knowledge-base/#4-function_calling_patterns","title":"4. function_calling_patterns","text":"<p>Analysis view showing common function usage patterns extracted from code examples.</p>"},{"location":"architecture/supabase-knowledge-base/#vector-search-infrastructure","title":"Vector Search Infrastructure","text":""},{"location":"architecture/supabase-knowledge-base/#extensions-enabled","title":"Extensions Enabled","text":"<ol> <li>pgvector (v0.8.0) - Core vector similarity search</li> <li>Supports 768-dimensional embeddings</li> <li>Enables cosine similarity, L2 distance, and inner product operations</li> <li>Used for semantic search across all content</li> <li> <p>Optimized indexes on embedding columns</p> </li> <li> <p>pg_stat_statements - Query performance monitoring</p> </li> <li>uuid-ossp - UUID generation for unique identifiers</li> <li>pgcrypto - Cryptographic functions for secure operations</li> </ol>"},{"location":"architecture/supabase-knowledge-base/#rpc-functions-for-search","title":"RPC Functions for Search","text":""},{"location":"architecture/supabase-knowledge-base/#core-search-functions","title":"Core Search Functions","text":"<ol> <li>match_crawled_pages</li> <li>Semantic search across documentation and code examples</li> <li>Parameters: <code>query_embedding</code> (vector), <code>match_threshold</code> (float), <code>match_count</code> (int)</li> <li>Returns: Similar content with similarity scores</li> <li> <p>Searches the crawled_pages table</p> </li> <li> <p>match_api_reference</p> </li> <li>Search API functions by semantic similarity</li> <li>Parameters: <code>query_embedding</code> (vector), <code>match_threshold</code> (float), <code>match_count</code> (int)</li> <li>Includes function signatures, descriptions, and examples</li> <li> <p>Optimized for finding relevant Pulseq functions</p> </li> <li> <p>match_api_reference_search</p> </li> <li>Enhanced API search with additional filtering</li> <li>Parameters: <code>query_embedding</code> (vector), <code>match_threshold</code> (float), <code>match_count</code> (int)</li> <li>Supports language-specific searches (MATLAB/Python)</li> <li> <p>Uses the api_reference_search view</p> </li> <li> <p>match_official_sequences</p> </li> <li>Search official Pulseq sequence implementations</li> <li>Parameters: <code>query_embedding</code> (vector), <code>match_threshold</code> (float), <code>match_count</code> (int)</li> <li>Filtered by sequence category</li> <li> <p>Returns complete sequence examples</p> </li> <li> <p>match_code_examples</p> </li> <li>Find relevant code snippets and examples</li> <li>Parameters: <code>query_embedding</code> (vector), <code>match_threshold</code> (float), <code>match_count</code> (int)</li> <li>Links to source repositories</li> <li>Searches crawled_pages with code content</li> </ol>"},{"location":"architecture/supabase-knowledge-base/#migration-history","title":"Migration History","text":"<p>The database has undergone 29 migrations to reach its current state:</p>"},{"location":"architecture/supabase-knowledge-base/#key-migrations","title":"Key Migrations","text":"<ul> <li>Enhanced Tables Creation (2025-08-24)</li> <li>Added <code>pulseq_sequences</code> table for complete sequences</li> <li>Created <code>sequence_chunks</code> table for granular retrieval</li> <li>Implemented <code>crawled_code</code> table for dependencies</li> <li> <p>Established relationships between tables</p> </li> <li> <p>Sequence Classification System (2025-08-08)</p> </li> <li>Added <code>sequence_category</code> column to crawled_pages</li> <li>Implemented automatic classification for MRI sequences</li> <li>Tagged official sequences (GRE, EPI, MPRAGE, etc.)</li> <li> <p>Fixed classification word boundaries and patterns</p> </li> <li> <p>API Reference Enhancements (2025-08-08)</p> </li> <li>Created specialized search views</li> <li>Added function calling pattern detection</li> <li>Improved MATLAB/Python differentiation</li> <li> <p>Enhanced metadata for class methods</p> </li> <li> <p>Vector Search Optimization (2025-08-10)</p> </li> <li>Added similarity thresholds to all RPC functions</li> <li>Optimized sorting algorithms for relevance</li> <li>Implemented consistent search interfaces</li> <li>Improved match functions with proper typing</li> </ul>"},{"location":"architecture/supabase-knowledge-base/#data-statistics","title":"Data Statistics","text":""},{"location":"architecture/supabase-knowledge-base/#current-database-metrics-january-2025","title":"Current Database Metrics (January 2025)","text":"Table Row Count Storage Size Description sources 27 16 KB GitHub repositories indexed crawled_pages 1,427 2.6 MB Documentation and code chunks api_reference 128 544 KB Pulseq/pypulseq functions pulseq_sequences 5 8 KB Complete sequence implementations sequence_chunks 34 40 KB Granular code sections crawled_code 15 24 KB Helper files and dependencies Total 1,636 ~3.2 MB Complete knowledge base"},{"location":"architecture/supabase-knowledge-base/#content-distribution","title":"Content Distribution","text":"<ul> <li>Documentation Pages: ~1,400 chunks</li> <li>API Functions: 128 documented functions</li> <li>Complete Sequences: 5 analyzed implementations</li> <li>Code Sections: 34 classified chunks</li> <li>Helper Files: 15 supporting files</li> </ul>"},{"location":"architecture/supabase-knowledge-base/#access-patterns","title":"Access Patterns","text":""},{"location":"architecture/supabase-knowledge-base/#1-hybrid-search-strategy","title":"1. Hybrid Search Strategy","text":"<p>The system implements a hybrid search combining: - Vector similarity search (semantic understanding) - Keyword matching (exact term matching) - Category filtering (sequence types, languages)</p>"},{"location":"architecture/supabase-knowledge-base/#2-intelligent-routing","title":"2. Intelligent Routing","text":"<p>Based on query analysis: - Documentation queries \u2192 <code>crawled_pages</code> - Function lookups \u2192 <code>api_reference</code> - Sequence examples \u2192 <code>official_sequence_examples</code> - Code patterns \u2192 <code>function_calling_patterns</code></p>"},{"location":"architecture/supabase-knowledge-base/#3-performance-optimization","title":"3. Performance Optimization","text":"<ul> <li>Indexed vector columns for fast similarity search</li> <li>Materialized views for complex queries</li> <li>Cached embeddings to avoid recomputation</li> </ul>"},{"location":"architecture/supabase-knowledge-base/#security-configuration","title":"Security Configuration","text":"<ul> <li>Row Level Security (RLS): Enabled on all tables</li> <li>API Key Authentication: Via Supabase service key</li> <li>SSL/TLS: Enforced for all connections</li> <li>Access Control: Read-only access for client applications</li> </ul>"},{"location":"architecture/supabase-knowledge-base/#integration-with-pulsepal","title":"Integration with PulsePal","text":""},{"location":"architecture/supabase-knowledge-base/#rag-service-integration-rag_servicepy","title":"RAG Service Integration (<code>rag_service.py</code>)","text":"<p>The RAG service interfaces with this knowledge base through:</p> <ol> <li>Supabase Python Client: Direct API access</li> <li>Google Embeddings API: Generates query embeddings</li> <li>RPC Function Calls: Executes similarity searches</li> <li>Result Processing: Formats and ranks results</li> </ol>"},{"location":"architecture/supabase-knowledge-base/#key-integration-points","title":"Key Integration Points","text":"<pre><code># Example: Searching for API functions\nresults = await supabase.rpc(\n    'match_api_reference',\n    {\n        'query_embedding': embedding,\n        'match_threshold': 0.7,\n        'match_count': 10\n    }\n).execute()\n</code></pre>"},{"location":"architecture/supabase-knowledge-base/#maintenance-and-updates","title":"Maintenance and Updates","text":""},{"location":"architecture/supabase-knowledge-base/#regular-tasks","title":"Regular Tasks","text":"<ol> <li>Source Updates: Periodic re-crawling of GitHub repositories</li> <li>Embedding Updates: Re-generate embeddings with model improvements</li> <li>Classification Refinement: Update sequence categories as needed</li> <li>Performance Monitoring: Track query patterns and optimize indexes</li> </ol>"},{"location":"architecture/supabase-knowledge-base/#data-quality-measures","title":"Data Quality Measures","text":"<ul> <li>Deduplication of similar content</li> <li>Version tracking for API changes</li> <li>Source attribution maintained</li> <li>Regular validation of embeddings</li> </ul>"},{"location":"architecture/supabase-knowledge-base/#enhanced-architecture-features-new","title":"Enhanced Architecture Features (NEW)","text":""},{"location":"architecture/supabase-knowledge-base/#three-tier-table-structure","title":"Three-Tier Table Structure","text":"<p>The enhanced database architecture implements a three-tier structure for optimal retrieval:</p> <ol> <li>Complete Sequences (<code>pulseq_sequences</code>)</li> <li>Full implementations with rich metadata</li> <li>Classification across multiple dimensions</li> <li> <p>Feature arrays for smart filtering</p> </li> <li> <p>Granular Sections (<code>sequence_chunks</code>)</p> </li> <li>Universal 6-section pattern recognition</li> <li>Function and concept extraction</li> <li> <p>Section-specific embeddings</p> </li> <li> <p>Supporting Files (<code>crawled_code</code>)</p> </li> <li>Helper functions and utilities</li> <li>Dependency tracking</li> <li>Cross-reference maintenance</li> </ol>"},{"location":"architecture/supabase-knowledge-base/#advanced-search-capabilities","title":"Advanced Search Capabilities","text":"<ul> <li>Multi-dimensional Classification: Sequences classified by family, contrast, trajectory, and dimensionality</li> <li>Feature-based Filtering: Arrays for preparation techniques, acceleration methods, and advanced features</li> <li>Dependency Resolution: Automatic tracking of file dependencies and relationships</li> <li>Educational Value Assessment: Sequences rated for teaching effectiveness</li> </ul>"},{"location":"architecture/supabase-knowledge-base/#future-enhancements","title":"Future Enhancements","text":""},{"location":"architecture/supabase-knowledge-base/#planned-improvements","title":"Planned Improvements","text":"<ol> <li>Expanded Sequence Collection: Target 100+ complete sequences</li> <li>Multi-language Support: Expand beyond MATLAB/Python to Julia, C++</li> <li>Version-aware Search: Filter by Pulseq version compatibility</li> <li>User Feedback Loop: Learn from search relevance feedback</li> <li>Advanced Categorization: More granular sequence classifications</li> <li>Performance Metrics: Track and optimize slow queries</li> <li>Reconstruction Integration: Better support for reconstruction code</li> </ol>"},{"location":"architecture/supabase-knowledge-base/#scalability-considerations","title":"Scalability Considerations","text":"<ul> <li>Current design supports up to 100K documents</li> <li>Vector index optimized for sub-second searches</li> <li>Horizontal scaling possible with Supabase infrastructure</li> <li>Prepared for migration to dedicated vector database if needed</li> </ul>"},{"location":"architecture/supabase-knowledge-base/#developer-notes","title":"Developer Notes","text":""},{"location":"architecture/supabase-knowledge-base/#connection-configuration","title":"Connection Configuration","text":"<pre><code># Required environment variables\nSUPABASE_URL = \"your-project-url\"\nSUPABASE_KEY = \"your-service-key\"\nGOOGLE_API_KEY_EMBEDDING = \"embedding-api-key\"\n</code></pre>"},{"location":"architecture/supabase-knowledge-base/#common-queries","title":"Common Queries","text":"<pre><code>-- Find all GRE sequences in crawled_pages\nSELECT * FROM crawled_pages \nWHERE sequence_category = 'GRE';\n\n-- Get complete sequences by type\nSELECT * FROM pulseq_sequences \nWHERE sequence_family = 'EPI';\n\n-- Get function by name\nSELECT * FROM api_reference \nWHERE name ILIKE '%addBlock%' \nAND language = 'matlab';\n\n-- Find sequence chunks by type\nSELECT * FROM sequence_chunks \nWHERE chunk_type = 'rf_gradient_creation';\n\n-- Get helper functions for a sequence\nSELECT cc.* FROM crawled_code cc\nWHERE cc.content_type = 'helper_function'\nAND cc.parent_sequences @&gt; ARRAY[1::bigint];\n\n-- Search with embeddings (via RPC)\nSELECT * FROM match_crawled_pages(\n    query_embedding := '[...]'::vector,\n    match_threshold := 0.7,\n    match_count := 5\n);\n</code></pre>"},{"location":"architecture/supabase-knowledge-base/#testing-queries","title":"Testing Queries","text":"<p>Always test vector search queries with representative examples to ensure: - Appropriate similarity thresholds - Reasonable result counts - Performance within acceptable limits</p>"},{"location":"architecture/supabase-knowledge-base/#key-improvements-in-enhanced-architecture","title":"Key Improvements in Enhanced Architecture","text":""},{"location":"architecture/supabase-knowledge-base/#whats-new","title":"What's New","text":"<ol> <li>Three Additional Tables: Added comprehensive sequence storage with <code>pulseq_sequences</code>, <code>sequence_chunks</code>, and <code>crawled_code</code></li> <li>Granular Retrieval: Code sections can be retrieved at the chunk level for precise assistance</li> <li>Dependency Tracking: Automatic relationship management between sequences and helper files</li> <li>Rich Metadata: Multi-dimensional classification system for intelligent filtering</li> <li>Educational Focus: Sequences rated and organized for teaching effectiveness</li> </ol>"},{"location":"architecture/supabase-knowledge-base/#performance-impact","title":"Performance Impact","text":"<ul> <li>Faster Searches: Granular chunks reduce result size and improve relevance</li> <li>Better Context: Complete sequences provide full implementation context</li> <li>Smart Routing: Multiple tables allow optimized queries for different use cases</li> <li>Reduced Hallucination: Complete function signatures and examples in api_reference</li> </ul>"},{"location":"architecture/supabase-knowledge-base/#conclusion","title":"Conclusion","text":"<p>The Supabase knowledge base provides a robust, scalable foundation for PulsePal's intelligent MRI sequence programming assistance. The enhanced architecture with six specialized tables enables:</p> <ul> <li>Comprehensive coverage of Pulseq documentation and implementations</li> <li>Granular retrieval at multiple levels (full sequences, chunks, functions)</li> <li>Intelligent classification and filtering capabilities</li> <li>Semantic search with 768-dimensional embeddings</li> <li>Dependency tracking and relationship management</li> </ul> <p>The combination of structured API references, complete sequence implementations, granular code chunks, and semantic search capabilities enables sophisticated query understanding and highly relevant information retrieval for MRI sequence development.</p> <p>For questions or updates to this documentation, please refer to the PulsePal development team or submit a pull request with proposed changes.</p>"},{"location":"matlab_api/","title":"MATLAB API Reference","text":"<p>Complete reference for PulsePal MATLAB functions.</p>"},{"location":"matlab_api/#a","title":"A","text":"<ul> <li>addBlock - Adds a new block of events to a Pulseq sequence.  It offers three ways to add a block: 1) using a...</li> <li>addGradients - This function superposes multiple gradient waveforms. It takes a cell array of gradient waveforms...</li> <li>addRamps - This function adds ramp segments to a k-space trajectory to ensure smooth transitions between zer...</li> <li>align - This function aligns the objects within a Pulseq block based on a specified alignment type ('left...</li> <li>applySoftDelay - This function adjusts the durations of blocks within a Pulseq sequence based on user-specified so...</li> <li>applyToBlock - This helper function processes a sequence of Pulseq events (potentially within a block) and conve...</li> <li>applyToSeq - This helper function applies a transformation defined by an object <code>obj</code> to a Pulseq sequence `se...</li> </ul>"},{"location":"matlab_api/#c","title":"C","text":"<ul> <li>calcAdcSeg - This function calculates the optimal splitting of an ADC (Analog-to-Digital Converter) signal int...</li> <li>calcDuration - Calculates the duration of a Pulseq event, a sequence of events, or a block structure.  It iterat...</li> <li>calcMomentsBtensor - Calculates the magnetic field (B) and its first three moments (m1, m2, m3) from a Pulseq sequence...</li> <li>calcPNS - Calculates peripheral nerve stimulation (PNS) levels using the safe model implementation by Szcze...</li> <li>calcRamp - Calculates a k-space trajectory connecting two given points (k0 and kend) while adhering to gradi...</li> <li>calcRfBandwidth - Calculates the bandwidth of an RF pulse using a Fast Fourier Transform (FFT).  It assumes a low-a...</li> <li>calcRfCenter - Calculates the effective center time point of an RF pulse. For shaped pulses, it determines the t...</li> <li>calcRfPower - Calculates the relative power of an RF pulse.  It returns the relative energy of the pulse in uni...</li> <li>calculateKspacePP - Calculates the k-space trajectory of a Pulseq sequence using a piecewise-polynomial gradient wave...</li> <li>checkTiming - This function checks the timing and other parameters of all blocks and objects within a Pulseq se...</li> <li>compressShape - Compresses a gradient or pulse waveform using a run-length encoding scheme applied to its derivat...</li> <li>compressShape_mat - Compresses a gradient or pulse waveform using a run-length encoding scheme applied to its derivat...</li> <li>conjugate - This function computes the conjugate of a quaternion or a collection of quaternions.  A quaternio...</li> <li>convert - Converts numerical data between different units used in magnetic resonance imaging (MRI) gradient...</li> </ul>"},{"location":"matlab_api/#d","title":"D","text":"<ul> <li>decompressShape - Decompresses a gradient or pulse shape that has been compressed using a run-length encoding schem...</li> <li>duration - Calculates the total duration of a Pulseq sequence and optionally returns the number of blocks an...</li> </ul>"},{"location":"matlab_api/#e","title":"E","text":"<ul> <li>EventLibrary - Internal library class for storing and managing MRI sequence events (RF pulses, gradients, ADC ev...</li> <li>evalLabels - This function evaluates the values of labels used within a Pulseq sequence. It can calculate the ...</li> </ul>"},{"location":"matlab_api/#f","title":"F","text":"<ul> <li>findBlockByTime - This helper function finds the index of the block in a Pulseq sequence that contains a given time...</li> <li>findFlank - This function finds the x-coordinate of the left flank of a given function f. It determines the f...</li> <li>flipGradAxis - This helper function inverts all gradients along a specified axis or channel within a Pulseq sequ...</li> <li>fromRotMat - This function converts a 3x3 rotation matrix into a normalized quaternion.  It handles potential ...</li> </ul>"},{"location":"matlab_api/#g","title":"G","text":"<ul> <li>getBlock - Retrieves a specific block from a Pulseq sequence object.  The function decompresses all events a...</li> <li>getDefinition - Retrieves the value associated with a specified key from a custom definitions structure within a ...</li> <li>getSupportedLabels - This function returns a cell array of strings representing supported labels for Pulseq sequence p...</li> <li>getSupportedRfUse - This function returns a cell array containing strings representing the supported RF pulse uses in...</li> </ul>"},{"location":"matlab_api/#i","title":"I","text":"<ul> <li>install - Installs a Pulseq sequence onto a Siemens MRI system.  The function detects the scanner environme...</li> <li>isOctave - This function checks if the code is running within the Octave environment. It uses a persistent v...</li> </ul>"},{"location":"matlab_api/#m","title":"M","text":"<ul> <li>makeAdc - Creates an ADC readout event for Pulseq sequence design.  It defines parameters for the analog-to...</li> <li>makeAdiabaticPulse - Generates adiabatic inversion pulses of type 'hypsec' (hyperbolic secant) or 'wurst' (wideband, u...</li> <li>makeArbitraryGrad - Creates a gradient event with an arbitrary waveform.  The function ensures the waveform adheres t...</li> <li>makeArbitraryRf - Creates an arbitrary RF pulse with a specified shape and parameters.  The function takes a comple...</li> <li>makeBlockPulse - Generates a block RF pulse with optional slice-selective capabilities.  The function creates a Pu...</li> <li>makeDelay - Creates a delay event for use in a Pulseq sequence.  This function generates a structure represen...</li> <li>makeDigitalOutputPulse - Creates a digital output pulse event, also known as a trigger, for a specified channel.  This fun...</li> <li>makeExtendedTrapezoid - Creates an extended trapezoid gradient waveform.  This function allows the definition of a gradie...</li> <li>makeExtendedTrapezoidArea - Generates the shortest possible extended trapezoid gradient waveform with a specified area, start...</li> <li>makeGaussPulse - Generates a Gaussian RF pulse, optionally with slice-selective gradients.  The function creates a...</li> <li>makeLabel - Creates a label event for use in Pulseq sequences.  This function generates a structure defining ...</li> <li>makeSLRpulse - Generates a selective excitation RF pulse using the Shinnar-Le Roux (SLR) algorithm. This functio...</li> <li>makeSincPulse - Generates a slice-selective sinc pulse and optionally its corresponding slice selection and refoc...</li> <li>makeSoftDelay - Creates a soft delay event for use with Pulseq sequences. This event modifies the duration of an ...</li> <li>makeTrapezoid - Generates a trapezoidal gradient waveform for a specified channel in a Pulseq sequence.  The func...</li> <li>makeTrigger - Creates a trigger event for synchronization with an external signal.  This function generates a s...</li> </ul> <ul> <li>modGradAxis - This function modifies the amplitude of gradient events along a specified axis ('x', 'y', or 'z')...</li> <li>multiply - This function calculates the product of two quaternions.  A quaternion is represented as a 1x4 ve...</li> </ul>"},{"location":"matlab_api/#n","title":"N","text":"<ul> <li>normalize - This function normalizes a quaternion or an array of quaternions.  It scales each quaternion to h...</li> </ul>"},{"location":"matlab_api/#o","title":"O","text":"<ul> <li>opts - Sets gradient limits and other system properties of the MR system.  It allows users to define or ...</li> </ul>"},{"location":"matlab_api/#p","title":"P","text":"<ul> <li>paperPlot - This helper function generates a plot of a Pulseq sequence in a style suitable for scientific pub...</li> </ul> <ul> <li>plot - This function plots a Pulseq sequence object in a new figure.  It offers various options to contr...</li> <li>pts2waveform - This function interpolates a set of points (times, amplitudes) to generate a waveform with a spec...</li> </ul>"},{"location":"matlab_api/#r","title":"R","text":"<ul> <li>read - Loads a Pulseq sequence from a specified file into a sequence object.  The function reads definit...</li> <li>readBinary - Loads a Pulseq sequence from a binary file.  This function reads a binary file containing a Pulse...</li> <li>readasc - Reads Siemens ASC ASCII-formatted text files and returns a MATLAB structure containing the data. ...</li> <li>registerGradEvent - </li> <li>registerLabelEvent - </li> <li>registerRfEvent - </li> <li>restoreAdditionalShapeSamples - This function post-processes a gradient waveform, specifically addressing issues that can arise w...</li> <li>rotate - Rotates a 3D vector by a given unit quaternion.  The function efficiently implements quaternion r...</li> <li>rotate3D - Rotates gradient objects within a Pulseq block using a provided rotation matrix or quaternion.  N...</li> </ul>"},{"location":"matlab_api/#s","title":"S","text":"<ul> <li>SeqPlot - This function generates a plot visualizing different aspects of a Pulseq sequence.  It displays t...</li> <li>Sequence - This function is a constructor for the Sequence object in the Pulseq toolbox. It initializes a se...</li> <li>scaleGrad - Scales a gradient waveform by a given scalar value.  It handles both trapezoidal and arbitrary wa...</li> <li>setBlock - This function adds or replaces a block of events within a Pulseq sequence. It accepts events in u...</li> <li>setDefinition - This function modifies or creates a custom definition within a Pulseq sequence object.  It allows...</li> <li>simRf - Simulates the effect of an RF pulse on nuclear magnetization using a quaternion-based rotation fo...</li> <li>sound - Plays the sequence waveforms through the system speaker.  It processes the waveforms from the Pul...</li> <li>splitGradient - This function decomposes a trapezoidal gradient into its constituent parts: slew-up, flat-top, an...</li> <li>splitGradientAt - Splits a trapezoidal or arbitrary gradient into two parts at a specified time point.  The functio...</li> </ul>"},{"location":"matlab_api/#t","title":"T","text":"<ul> <li>TransformFOV - This function transforms the field of view (FOV) of a Pulseq sequence by applying rotation, trans...</li> <li>testReport - Analyzes a Pulseq sequence object and generates a text report summarizing key sequence parameters...</li> <li>toRotMat - This function converts a normalized quaternion into its corresponding 3x3 rotation matrix.  The q...</li> <li>traj2grad - Converts a k-space trajectory into gradient waveforms using finite differences.  The input trajec...</li> <li>transform - Creates a transformed copy of a Pulseq sequence by applying a rotation, translation, or a 4x4 hom...</li> </ul>"},{"location":"matlab_api/#v","title":"V","text":"<ul> <li>version - Returns the version information for the Pulseq Matlab package.  The specific version information ...</li> </ul>"},{"location":"matlab_api/#w","title":"W","text":"<ul> <li>waveforms_and_times - This function extracts and organizes waveform data from a Pulseq sequence object. It decompresses...</li> <li>write - Writes a Pulseq sequence object to a file in the Pulseq open file format.  This function serializ...</li> <li>writeBinary - Writes a Pulseq sequence object to a file in binary format, using the Pulseq open file format spe...</li> <li>write_v141 - Writes a Pulseq sequence object to a file in version 1.4.1 format.  This function takes a Pulseq ...</li> </ul>"},{"location":"matlab_api/EventLibrary/","title":"EventLibrary","text":"<p>Internal library class for storing and managing MRI sequence events (RF pulses, gradients, ADC events). Used by the Sequence class to efficiently store and retrieve events with deduplication.</p>"},{"location":"matlab_api/EventLibrary/#syntax","title":"Syntax","text":"<pre><code>function obj = EventLibrary()\n</code></pre>"},{"location":"matlab_api/EventLibrary/#calling-pattern","title":"Calling Pattern","text":"<pre><code>eventlib = mr.EventLibrary(...)\n</code></pre>"},{"location":"matlab_api/EventLibrary/#parameters","title":"Parameters","text":"<p>No parameters</p>"},{"location":"matlab_api/EventLibrary/#returns","title":"Returns","text":"Output Type Description <code>obj</code> unknown"},{"location":"matlab_api/SeqPlot/","title":"SeqPlot","text":"<p>This function generates a plot visualizing different aspects of a Pulseq sequence.  It displays the ADC/labels, RF magnitude, RF/ADC phase, and gradient waveforms (Gx, Gy, Gz) over time.  The plot can be customized using various optional parameters to control the time range, block range, time units, labels to display, whether to stack plots, show blocks, and display guides.</p>"},{"location":"matlab_api/SeqPlot/#syntax","title":"Syntax","text":"<pre><code>function obj = SeqPlot(seq, varargin)\n</code></pre>"},{"location":"matlab_api/SeqPlot/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seqplot = mr.aux.SeqPlot(...)\n</code></pre>"},{"location":"matlab_api/SeqPlot/#parameters","title":"Parameters","text":""},{"location":"matlab_api/SeqPlot/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>showBlocks</code> logical <code>false</code> Specifies whether to show block boundaries on the plot.  Accepts logical true/false or numeric 1/0. Valid values: true/false or 1/0 <code>true</code> <code>timeRange</code> double <code>[0 inf]</code> Defines the time range to display on the plot.  Must be a 2-element vector [start_time end_time]. Valid values: 2-element numeric vector (Units: seconds) <code>[0 0.1]</code> <code>blockRange</code> double <code>[1 inf]</code> Defines the range of blocks from the sequence to include in the plot. Must be a 2-element vector [start_block end_block]. Valid values: 2-element numeric vector <code>[1 10]</code> <code>timeDisp</code> char <code>validTimeUnits{1}</code> Specifies the units for the time axis of the plot. Valid values: 's', 'ms', 'us' <code>'ms'</code> <code>label</code> char <code>[]</code> Specifies which labels to display on the plot.  Accepts a string or array of strings. Valid values: mr.getSupportedLabels() <code>'excitation'</code> <code>hide</code> logical <code>false</code> Specifies whether to hide the generated figure. Accepts logical true/false or numeric 1/0. Valid values: true/false or 1/0 <code>false</code> <code>stacked</code> logical <code>false</code> Specifies whether to stack the plots vertically. Only works in MATLAB, not Octave. Valid values: true/false or 1/0 <code>true</code> <code>showGuides</code> logical <code>true</code> Specifies whether to show guides on the plot. Valid values: true/false or 1/0 <code>true</code>"},{"location":"matlab_api/SeqPlot/#returns","title":"Returns","text":"Output Type Description <code>obj</code> struct A structure containing handles to the generated figure and axes."},{"location":"matlab_api/SeqPlot/#examples","title":"Examples","text":"<pre><code>seqplot = seq.mr.aux.SeqPlot('timeRange', [0, 0.05], 'timeDisp', 'ms', 'label', 'excitation')\n</code></pre>"},{"location":"matlab_api/SeqPlot/#see-also","title":"See Also","text":"<p>mr.getSupportedLabels</p>"},{"location":"matlab_api/Sequence/","title":"Sequence","text":"<p>This function is a constructor for the Sequence object in the Pulseq toolbox. It initializes a sequence object with default parameters and libraries for storing different types of events (RF pulses, gradients, ADC events, etc.).  It also sets up default raster times and provides methods for reading and writing sequence files in different formats (v1.4.1 and binary).  Additional methods are included for calculating pulse-related parameters such as PNS (peak-to-null ratio) and gradient moments.</p>"},{"location":"matlab_api/Sequence/#syntax","title":"Syntax","text":"<pre><code>function obj = Sequence(varargin)\n</code></pre>"},{"location":"matlab_api/Sequence/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq = mr.Sequence(...)\n</code></pre>"},{"location":"matlab_api/Sequence/#parameters","title":"Parameters","text":""},{"location":"matlab_api/Sequence/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>trajectory_delay</code> double <code>0</code> This parameter likely controls a delay in the sequence trajectory.  It represents the time offset applied before the beginning of the trajectory. (Units: seconds) <code>0.001</code>"},{"location":"matlab_api/Sequence/#returns","title":"Returns","text":"Output Type Description <code>obj</code> struct A Sequence object containing all the initialized parameters, libraries, and methods for manipulating and storing the MRI sequence information."},{"location":"matlab_api/Sequence/#examples","title":"Examples","text":"<pre><code>seq = mr.Sequence(); % Creates a sequence object with default settings\nseq = mr.Sequence(mr.opts()); % Creates a sequence object using custom system options from mr.opts()\nseq = mr.Sequence('trajectory_delay',0.002); % Creates a sequence object with a 2ms trajectory delay\n</code></pre>"},{"location":"matlab_api/Sequence/#see-also","title":"See Also","text":"<p>mr.opts, Sequence.read, Sequence.write, Sequence.write_v141, Sequence.readBinary, Sequence.writeBinary, Sequence.calcPNS, Sequence.calcMomentsBtensor, Sequence.testReport</p>"},{"location":"matlab_api/TransformFOV/","title":"TransformFOV","text":"<p>This function transforms the field of view (FOV) of a Pulseq sequence by applying rotation, translation, and scaling operations.  It takes as input a set of Pulseq events (e.g., RF pulses, gradients, ADC events) and modifies their spatial coordinates according to the specified transformations. The function also handles an optional prior phase cycle and system parameters.</p>"},{"location":"matlab_api/TransformFOV/#syntax","title":"Syntax","text":"<pre><code>function obj = TransformFOV(varargin)\n</code></pre>"},{"location":"matlab_api/TransformFOV/#calling-pattern","title":"Calling Pattern","text":"<pre><code>tra = mr.TransformFOV(...)\n</code></pre>"},{"location":"matlab_api/TransformFOV/#parameters","title":"Parameters","text":""},{"location":"matlab_api/TransformFOV/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>rotation</code> double <code>[]</code> A 3x3 rotation matrix defining the rotation of the FOV.  An empty matrix indicates no rotation. (Units: radians) <code>[1 0 0; 0 1 0; 0 0 1]</code> <code>translation</code> double <code>[]</code> A 1x3 vector representing the translation of the FOV. An empty matrix indicates no translation. (Units: meters) <code>[0.01 0 0]</code> <code>scale</code> double <code>[]</code> A 1x3 vector defining scaling factors along each axis. An empty matrix indicates no scaling. <code>[1 1 1]</code> <code>prior_phase_cycle</code> double <code>0</code> An integer representing a prior phase cycle to be applied before the transformation. Typically used for k-space trajectory calculations. <code>0</code> <code>high_accuracy</code> logical <code>false</code> A logical flag indicating whether to use a high-accuracy transformation algorithm (currently commented out). <code>true</code> <code>system</code> struct <code>[]</code> A structure containing system parameters (e.g., gradient limits, slew rates). If empty, default system parameters are used. <code>mr.opts()</code>"},{"location":"matlab_api/TransformFOV/#returns","title":"Returns","text":"Output Type Description <code>obj</code> struct A structure containing the transformation parameters and possibly the transformed sequence data."},{"location":"matlab_api/TransformFOV/#examples","title":"Examples","text":"<pre><code>tra = mr.TransformFOV('rotation', [0 1; -1 0], 'translation', [0.01, 0, 0]);\ntra = mr.TransformFOV('scale', [1.1 0.9 1], 'system', mr.opts('maxGrad', 40));\n</code></pre>"},{"location":"matlab_api/TransformFOV/#see-also","title":"See Also","text":"<p>mr.opts</p>"},{"location":"matlab_api/addBlock/","title":"addBlock","text":"<p>Adds a new block of events to a Pulseq sequence.  It offers three ways to add a block: 1) using a pre-defined block structure; 2) specifying individual events; 3) specifying a duration and then populating the block with events, up to that duration.</p>"},{"location":"matlab_api/addBlock/#syntax","title":"Syntax","text":"<pre><code>function addBlock(varargin)\n</code></pre>"},{"location":"matlab_api/addBlock/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.addBlock(...)\n</code></pre>"},{"location":"matlab_api/addBlock/#parameters","title":"Parameters","text":""},{"location":"matlab_api/addBlock/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>blockStruct</code> struct A pre-defined block structure <code>struct('type', 'adc', 'duration', 0.001)</code> <code>duration</code> double Optional duration for the block. If provided as first argument, all subsequent events will be added to a block with this duration (Units: seconds) <code>0.01</code> <code>events</code> varargs One or more events (RF, gradient, ADC) to add to the block <code>makeTrapezoid('x', 100, 0.001), makeAdc(0.005)</code> <code>trajectory_delay</code> double <code>0</code> Delay before starting the trajectory. Only applicable if the input block events include a gradient event (Units: seconds) <code>0.001</code>"},{"location":"matlab_api/addBlock/#returns","title":"Returns","text":"Output Type Description <code>none</code> none This function modifies the Pulseq sequence object in place. It does not return any value."},{"location":"matlab_api/addBlock/#examples","title":"Examples","text":"<pre><code>seq.addBlock(struct('type', 'adc', 'duration', 0.001));\nseq.addBlock(makeTrapezoid('x', 100, 0.001));\nseq.addBlock(0.01, makeTrapezoid('x', 100, 0.001), makeAdc(0.005))\nseq.addBlock(makeTrapezoid('x', 100, 0.001), trajectory_delay = 0.002)\n</code></pre>"},{"location":"matlab_api/addBlock/#see-also","title":"See Also","text":"<p>setBlock, makeAdc, makeTrapezoid, makeSincPulse</p>"},{"location":"matlab_api/addGradients/","title":"addGradients","text":"<p>This function superposes multiple gradient waveforms. It takes a cell array of gradient waveforms as input and returns a single gradient waveform representing their sum.  The function handles different gradient types (trapezoids and arbitrary waveforms), checks for consistency in channel and timing, and applies system limits (maxGrad and maxSlew). If all input gradients are trapezoids with identical timing, the function efficiently sums their amplitudes.</p>"},{"location":"matlab_api/addGradients/#syntax","title":"Syntax","text":"<pre><code>function grad = addGradients(grads, varargin)\n</code></pre>"},{"location":"matlab_api/addGradients/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.addGradients(...)\n</code></pre>"},{"location":"matlab_api/addGradients/#parameters","title":"Parameters","text":""},{"location":"matlab_api/addGradients/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>grads</code> cell A cell array containing multiple gradient waveforms. Each element of the cell array should be a structure representing a single gradient waveform (e.g., as created by <code>makeTrapezoid</code>).  These structures must have at least 'channel', 'delay', and 'type' fields. <code>{g1, g2, g3}</code>"},{"location":"matlab_api/addGradients/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> A structure containing system parameters, typically obtained from <code>mr.opts()</code>.  If not provided, <code>mr.opts()</code> is used to get default system parameters.  Relevant fields include <code>maxSlew</code> and <code>maxGrad</code>. <code>mr.opts()</code> <code>maxGrad</code> double <code>0</code> Maximum gradient amplitude. If set to a value greater than 0, it overrides the <code>maxGrad</code> value from the <code>system</code> parameter. (Units: Hz/m) <code>400</code> <code>maxSlew</code> double <code>0</code> Maximum gradient slew rate. If set to a value greater than 0, it overrides the <code>maxSlew</code> value from the <code>system</code> parameter. (Units: Hz/m/s) <code>20000</code>"},{"location":"matlab_api/addGradients/#returns","title":"Returns","text":"Output Type Description <code>grad</code> struct A structure representing the resulting superimposed gradient waveform."},{"location":"matlab_api/addGradients/#examples","title":"Examples","text":"<pre><code>[grad] = mr.addGradients({g1, g2}, mr.opts(), 'maxGrad', 500, 'maxSlew', 30000)\n</code></pre>"},{"location":"matlab_api/addGradients/#see-also","title":"See Also","text":"<p>Sequence.addBlock, mr.opts, makeTrapezoid</p>"},{"location":"matlab_api/addRamps/","title":"addRamps","text":"<p>This function adds ramp segments to a k-space trajectory to ensure smooth transitions between zero and the desired trajectory. It prevents violations of gradient and slew rate limits.  It can handle single or multiple k-space trajectories (provided as a cell array or matrix). It can also add corresponding zero-filled segments to an accompanying RF pulse.</p>"},{"location":"matlab_api/addRamps/#syntax","title":"Syntax","text":"<pre><code>function varargout=addRamps(k,varargin)\n</code></pre>"},{"location":"matlab_api/addRamps/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.addRamps(...)\n</code></pre>"},{"location":"matlab_api/addRamps/#parameters","title":"Parameters","text":""},{"location":"matlab_api/addRamps/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>k</code> double cell The k-space trajectory.  Can be a numeric array (single trajectory) or a cell array of numeric arrays (multiple trajectories). Each column represents a time point. <code>[1;2;3]</code>"},{"location":"matlab_api/addRamps/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> A structure containing system limits (e.g., maxGrad, maxSlew). If empty, defaults to mr.opts(). <code>mr.opts()</code> <code>rf</code> double <code>[]</code> An RF pulse shape. If provided, segments of zeros are added to match the duration of the added ramps. <code>[0.5 0.5 0.5]</code> <code>maxGrad</code> double <code>0</code> Maximum gradient amplitude. Overrides the value in the 'system' structure if greater than 0. (Units: Hz/m) <code>30e6</code> <code>maxSlew</code> double <code>0</code> Maximum gradient slew rate. Overrides the value in the 'system' structure if greater than 0. (Units: Hz/m/s) <code>100e6</code> <code>gradOversampling</code> logical <code>false</code> Logical flag indicating whether gradient oversampling is used during ramp calculation. <code>true</code>"},{"location":"matlab_api/addRamps/#returns","title":"Returns","text":"Output Type Description <code>varargout</code> double cell"},{"location":"matlab_api/addRamps/#examples","title":"Examples","text":"<pre><code>k_space = [1;2;3];\n[k_space_with_ramps] = mr.addRamps(k_space, 'maxGrad', 30e6, 'maxSlew', 100e6);\nk_space = {[1;2;3],[4;5;6]};\n[k_space_with_ramps1, k_space_with_ramps2] = mr.addRamps(k_space, 'maxGrad', 30e6, 'maxSlew', 100e6);\nk_space = [1;2;3]; rf_pulse = [0.5 0.5 0.5];\n[k_space_with_ramps, rf_with_zeros] = mr.addRamps(k_space, 'rf', rf_pulse, 'maxGrad', 30e6, 'maxSlew', 100e6);\n</code></pre>"},{"location":"matlab_api/addRamps/#see-also","title":"See Also","text":"<p>mr.opts, mr.calcRamp, Sequence.makeArbitraryGrad</p>"},{"location":"matlab_api/align/","title":"align","text":"<p>This function aligns the objects within a Pulseq block based on a specified alignment type ('left', 'center', or 'right').  It considers pre-existing delays within the objects, calculates the total block duration, and then adjusts object delays to achieve the desired alignment.  Optionally, a predefined block duration can be provided as input; the function will then check if the total object duration exceeds this limit and raise an error if it does.</p>"},{"location":"matlab_api/align/#syntax","title":"Syntax","text":"<pre><code>function [varargout] = align(varargin)\n</code></pre>"},{"location":"matlab_api/align/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.align(...)\n</code></pre>"},{"location":"matlab_api/align/#parameters","title":"Parameters","text":""},{"location":"matlab_api/align/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>align_spec</code> char Specifies the alignment of objects within the block.  Possible values are 'left', 'center', and 'right'. Valid values: 'left', 'center', 'right' <code>'left'</code> <code>obj</code> struct Pulseq object to be aligned. Multiple objects can be specified. Valid values: Pulseq object <code>myPulseqObject</code> <code>required_duration</code> double Optional. Specifies the desired duration of the block. If provided, the function will check if the total duration of the objects exceeds this value. Valid values: positive number (Units: seconds) <code>0.01</code>"},{"location":"matlab_api/align/#returns","title":"Returns","text":"Output Type Description <code>objects</code> cell Cell array containing the aligned Pulseq objects. <code>required_duration</code> double Optional return value.  Returns the required duration of the block (if this was specified as an input)."},{"location":"matlab_api/align/#examples","title":"Examples","text":"<pre><code>mr.align('left', obj1, obj2);\nmr.align('center', obj1, obj2, obj3);\nmr.align('right', obj1, 0.02, obj2);\nalignedObjects = mr.align('left', obj1, obj2);\n</code></pre>"},{"location":"matlab_api/align/#see-also","title":"See Also","text":"<p>Sequence.addBlock</p>"},{"location":"matlab_api/applySoftDelay/","title":"applySoftDelay","text":"<p>This function adjusts the durations of blocks within a Pulseq sequence based on user-specified soft delays.  It takes key-value pairs as input, where the keys are string identifiers (hints) for soft delays (e.g., 'TE', 'TR') and the values are the desired durations in seconds.  The function iterates through the sequence's blocks, identifying those with matching soft delay hints. It then updates the block durations accordingly, ensuring consistency between the numeric and string IDs associated with each soft delay.  Soft delays not specified in the input are left unchanged.</p>"},{"location":"matlab_api/applySoftDelay/#syntax","title":"Syntax","text":"<pre><code>function applySoftDelay(varargin)\n</code></pre>"},{"location":"matlab_api/applySoftDelay/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.applySoftDelay(...)\n</code></pre>"},{"location":"matlab_api/applySoftDelay/#parameters","title":"Parameters","text":""},{"location":"matlab_api/applySoftDelay/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>blockRange</code> double <code>[1 inf]</code> Specifies the range of blocks to modify. Defaults to applying soft delays to all blocks. Valid values: A two-element vector defining the start and end indices of the blocks to process.  Must contain positive integers. <code>[5 10]</code> <code>channelWeights</code> double <code>[1 1 1]</code> A vector of weights applied to the soft delays on different channels.  Not directly used in the provided excerpt but likely intended for applying different delays to different channels. Valid values: A three-element vector representing weights for x, y, and z channels. <code>[0.8 1 1.2]</code> <code>onlyProduceSoundData</code> logical <code>false</code> A flag indicating whether to only produce sound data. Not directly used in the provided excerpt, but likely related to optional data generation. Valid values: true or false <code>true</code>"},{"location":"matlab_api/applySoftDelay/#examples","title":"Examples","text":"<pre><code>seq.applySoftDelay('TE', 40e-3);\nseq.applySoftDelay('TE', 50e-3, 'TR', 2);\n</code></pre>"},{"location":"matlab_api/applyToBlock/","title":"applyToBlock","text":"<p>This helper function processes a sequence of Pulseq events (potentially within a block) and converts it into a standardized cell array.  It separates the events into different categories: RF pulses, ADC events, gradient events (x, y, z), and other miscellaneous events. It also handles the case where the input is a single structure representing a block of events or a cell array containing such structures.  The function updates the object's label settings based on 'NOPOS', 'NOROT', and 'NOSCL' labels present in the input events.</p>"},{"location":"matlab_api/applyToBlock/#syntax","title":"Syntax","text":"<pre><code>function out=applyToBlock(varargin)\n</code></pre>"},{"location":"matlab_api/applyToBlock/#calling-pattern","title":"Calling Pattern","text":"<pre><code>tra.applyToBlock(...)\n</code></pre>"},{"location":"matlab_api/applyToBlock/#parameters","title":"Parameters","text":""},{"location":"matlab_api/applyToBlock/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>rf</code> struct RF pulse event structure to transform <code>rf_event</code> <code>grad</code> struct Gradient event structure to transform <code>grad_event</code> <code>adc</code> struct ADC event structure to transform <code>adc_event</code>"},{"location":"matlab_api/applyToBlock/#returns","title":"Returns","text":"Output Type Description <code>out</code> cell A cell array containing the processed Pulseq events. The structure of this cell array is not explicitly defined but likely follows a format consistent with Pulseq's internal representation of sequence events. The exact structure depends on the content of the input 'varargin'."},{"location":"matlab_api/applyToBlock/#examples","title":"Examples","text":"<pre><code>out = tra.applyToBlock(rf_event, grad_event, adc_event);\n</code></pre>"},{"location":"matlab_api/applyToSeq/","title":"applyToSeq","text":"<p>This helper function applies a transformation defined by an object <code>obj</code> to a Pulseq sequence <code>seq</code>. It iterates through blocks of the sequence within a specified range and applies the transformation defined in <code>obj.applyToBlock</code> to each block.  It offers the option to modify the input sequence (<code>sameSeq = false</code>) or to perform the transformation in-place (<code>sameSeq = true</code>).</p>"},{"location":"matlab_api/applyToSeq/#syntax","title":"Syntax","text":"<pre><code>function seq2 = applyToSeq(varargin)\n</code></pre>"},{"location":"matlab_api/applyToSeq/#calling-pattern","title":"Calling Pattern","text":"<pre><code>tra.applyToSeq(...)\n</code></pre>"},{"location":"matlab_api/applyToSeq/#parameters","title":"Parameters","text":""},{"location":"matlab_api/applyToSeq/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>seq</code> Sequence The Pulseq sequence object to apply the transformation to <code>mySequence</code>"},{"location":"matlab_api/applyToSeq/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>sameSeq</code> logical <code>false</code> Specifies whether to modify the input sequence in-place. If true, the transformation is applied directly to the input sequence <code>seq</code>. If false (default), a new sequence <code>seq2</code> is created and the transformation is applied to this new sequence. Valid values: true, false <code>true</code> <code>blockRange</code> numeric array <code>[1 inf]</code> A two-element array specifying the range of blocks to process. The first element is the starting block index, and the second element is the ending block index.  If the second element is Inf, all blocks from the starting index to the end of the sequence are processed. Valid values: [startIndex, endIndex] where startIndex and endIndex are positive integers, and endIndex can be Inf <code>[5, 10]</code>"},{"location":"matlab_api/applyToSeq/#returns","title":"Returns","text":"Output Type Description <code>seq2</code> struct A Pulseq sequence. If <code>sameSeq</code> is true, this is the same as the input <code>seq</code>, but modified in place. If <code>sameSeq</code> is false, this is a new Pulseq sequence containing the transformed blocks."},{"location":"matlab_api/applyToSeq/#examples","title":"Examples","text":"<pre><code>tra.applyToSeq(mySequence);\ntra.applyToSeq(mySequence, 'sameSeq', true, 'blockRange', [1, 10]);\n</code></pre>"},{"location":"matlab_api/applyToSeq/#see-also","title":"See Also","text":"<p>applyToBlock, getBlock</p>"},{"location":"matlab_api/calcAdcSeg/","title":"calcAdcSeg","text":"<p>This function calculates the optimal splitting of an ADC (Analog-to-Digital Converter) signal into segments for compatibility with specific MRI scanner hardware, particularly Siemens scanners.  Scanners may have limitations on the maximum number of samples in a single ADC object. This function determines the number of segments and samples per segment, ensuring that each segment's length adheres to the scanner's constraints while minimizing the total number of segments.  The function considers the gradient raster time and dwell time to align segments with the gradient waveform.  It offers two modes: 'shorten' (reducing the total number of samples if necessary) and 'lengthen' (increasing the number of samples to satisfy constraints).</p>"},{"location":"matlab_api/calcAdcSeg/#syntax","title":"Syntax","text":"<pre><code>function [adcSegments,adcSamplesPerSegment] = calcAdcSeg(numSamples,dwell,system,mode)\n</code></pre>"},{"location":"matlab_api/calcAdcSeg/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.calcAdcSeg(...)\n</code></pre>"},{"location":"matlab_api/calcAdcSeg/#parameters","title":"Parameters","text":""},{"location":"matlab_api/calcAdcSeg/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>numSamples</code> double The total number of ADC samples. <code>16384</code> <code>dwell</code> double The dwell time (sampling interval) in seconds. <code>4e-6</code> seconds <code>system</code> struct A structure containing system parameters.  It must include fields like 'adcSamplesLimit' (maximum number of samples per ADC segment), 'adcSamplesDivisor' (divisor for the number of samples per segment), 'gradRasterTime' (gradient raster time), and 'adcRasterTime' (ADC raster time). <code>mr.opts()</code> <code>mode</code> char Specifies how to handle the number of samples if the initial configuration does not satisfy constraints.  'shorten' reduces the number of samples to meet constraints; 'lengthen' increases the number of samples. <code>'shorten'</code>"},{"location":"matlab_api/calcAdcSeg/#returns","title":"Returns","text":"Output Type Description <code>adcSegments</code> double The optimal number of ADC segments. <code>adcSamplesPerSegment</code> double The number of samples per ADC segment."},{"location":"matlab_api/calcAdcSeg/#examples","title":"Examples","text":"<pre><code>[adcSegments, adcSamplesPerSegment] = mr.calcAdcSeg(16384, 4e-6, mr.opts(), 'shorten')\n</code></pre>"},{"location":"matlab_api/calcAdcSeg/#see-also","title":"See Also","text":"<p>mr.opts</p>"},{"location":"matlab_api/calcDuration/","title":"calcDuration","text":"<p>Calculates the duration of a Pulseq event, a sequence of events, or a block structure.  It iterates through the events (delays, RF pulses, gradients, ADCs, traps, outputs, and triggers), determining the maximum duration among them.  The function handles both individual events and block structures, converting the latter into a cell array of events before processing.</p>"},{"location":"matlab_api/calcDuration/#syntax","title":"Syntax","text":"<pre><code>function duration=calcDuration(varargin)\n</code></pre>"},{"location":"matlab_api/calcDuration/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.calcDuration(...)\n</code></pre>"},{"location":"matlab_api/calcDuration/#parameters","title":"Parameters","text":""},{"location":"matlab_api/calcDuration/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>delay</code> struct <code>N/A</code> A Pulseq delay event structure. Contains at least a 'delay' field specifying the delay duration in seconds. (Units: seconds) <code>{type: 'delay', delay: 0.001}</code> <code>rf</code> struct <code>N/A</code> A Pulseq RF pulse event structure.  Contains 'delay', 'shape_dur' (pulse duration), and 'ringdownTime' fields specifying durations in seconds. (Units: seconds) <code>{type: 'rf', delay: 0.0001, shape_dur: 0.0005, ringdownTime: 0.0001}</code> <code>grad</code> struct <code>N/A</code> A Pulseq gradient event structure.  Contains 'delay' and 'shape_dur' fields specifying durations in seconds. (Units: seconds) <code>{type: 'grad', delay: 0.0002, shape_dur: 0.001}</code> <code>adc</code> struct <code>N/A</code> A Pulseq ADC event structure. Contains 'delay', 'numSamples', 'dwell', and 'deadTime' fields.  'delay' and 'deadTime' are in seconds, 'dwell' is the sampling time in seconds. (Units: seconds) <code>{type: 'adc', delay: 0.0001, numSamples: 128, dwell: 0.000001, deadTime: 0.00005}</code> <code>trap</code> struct <code>N/A</code> A Pulseq trapezoidal gradient event structure. Contains 'delay', 'riseTime', 'flatTime', and 'fallTime' fields specifying durations in seconds. (Units: seconds) <code>{type: 'trap', delay: 0.0001, riseTime: 0.0002, flatTime: 0.001, fallTime: 0.0002}</code>"},{"location":"matlab_api/calcDuration/#returns","title":"Returns","text":"Output Type Description <code>duration</code> double The maximum duration (in seconds) among all provided events or within the block structure."},{"location":"matlab_api/calcDuration/#examples","title":"Examples","text":"<pre><code>duration = mr.calcDuration({type: 'delay', delay: 0.002}, {type: 'rf', delay: 0.001, shape_dur: 0.0005, ringdownTime: 0.0001});\nduration = mr.calcDuration(block); % where 'block' is a Pulseq block structure\n</code></pre>"},{"location":"matlab_api/calcMomentsBtensor/","title":"calcMomentsBtensor","text":"<p>Calculates the magnetic field (B) and its first three moments (m1, m2, m3) from a Pulseq sequence object.  The function processes gradient waveforms to compute these values, which are useful for characterizing the magnetic field variations in MRI experiments. It handles multiple repetitions (readouts) and allows for skipping initial dummy scans.</p>"},{"location":"matlab_api/calcMomentsBtensor/#syntax","title":"Syntax","text":"<pre><code>function [B, m1, m2, m3] = calcMomentsBtensor(varargin)\n</code></pre>"},{"location":"matlab_api/calcMomentsBtensor/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.calcMomentsBtensor(...)\n</code></pre>"},{"location":"matlab_api/calcMomentsBtensor/#parameters","title":"Parameters","text":""},{"location":"matlab_api/calcMomentsBtensor/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>calcB</code> boolean <code>true</code> Flag to calculate the magnetic field B tensor. If false, B will not be computed and returned. Valid values: true, false <code>true</code> <code>calcm1</code> boolean <code>false</code> Flag to calculate the first moment (m1) of the magnetic field. If false, m1 will not be computed and returned. Valid values: true, false <code>true</code> <code>calcm2</code> boolean <code>false</code> Flag to calculate the second moment (m2) of the magnetic field. If false, m2 will not be computed and returned. Valid values: true, false <code>true</code> <code>calcm3</code> boolean <code>false</code> Flag to calculate the third moment (m3) of the magnetic field. If false, m3 will not be computed and returned. Valid values: true, false <code>true</code> <code>Ndummy</code> integer <code>0</code> The number of dummy scans (initial scans to skip) in the sequence. Valid values: 0, 1, 2, ... <code>2</code>"},{"location":"matlab_api/calcMomentsBtensor/#returns","title":"Returns","text":"Output Type Description <code>B</code> 3D array A 3D array representing the magnetic field tensor. Dimensions are [repetition, 3, 3].  Returned only if calcB is true. <code>m1</code> 2D array A 2D array representing the first moment of the magnetic field. Dimensions are [repetition, 3]. Returned only if calcm1 is true. <code>m2</code> 2D array A 2D array representing the second moment of the magnetic field. Dimensions are [repetition, 3]. Returned only if calcm2 is true. <code>m3</code> 2D array A 2D array representing the third moment of the magnetic field. Dimensions are [repetition, 3]. Returned only if calcm3 is true."},{"location":"matlab_api/calcMomentsBtensor/#examples","title":"Examples","text":"<pre><code>[B, m1, m2, m3] = seq.calcMomentsBtensor('calcm1', true, 'Ndummy', 2);\n</code></pre>"},{"location":"matlab_api/calcPNS/","title":"calcPNS","text":"<p>Calculates peripheral nerve stimulation (PNS) levels using the safe model implementation by Szczepankiewicz and Witzel.  The function takes hardware specifications and gradient waveforms as input and returns normalized PNS levels for each axis.  It optionally plots the gradient waveforms and can calculate cardiac nerve stimulation (CNS) levels if the hardware data supports it.</p>"},{"location":"matlab_api/calcPNS/#syntax","title":"Syntax","text":"<pre><code>function [ok, pns_norm, pns_comp, t_axis]=calcPNS(hardware,doPlots,calcCNS)\n</code></pre>"},{"location":"matlab_api/calcPNS/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.calcPNS(...)\n</code></pre>"},{"location":"matlab_api/calcPNS/#parameters","title":"Parameters","text":""},{"location":"matlab_api/calcPNS/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>hardware</code> string struct Hardware specifications.  Can be either a structure generated by <code>safe_example_hw()</code> from the <code>safe_pns_prediction</code> package or a path to a Siemens .asc file (e.g., MP_GPA_K2309_2250V_951A_AS82.asc) containing hardware parameters. <code>path/to/MP_GPA_K2309_2250V_951A_AS82.asc or safe_example_hw()</code>"},{"location":"matlab_api/calcPNS/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>doPlots</code> logical <code>true</code> Boolean flag to control whether to plot the gradient waveforms. Defaults to true. Valid values: true, false <code>false</code> <code>calcCNS</code> logical array <code>false</code> Boolean flag or array to control whether to calculate cardiac nerve stimulation (CNS) instead of or in addition to PNS. If the hardware data supports CNS and this parameter is not provided, it defaults to calculating both PNS and CNS. Defaults to false if CNS data is not available. Valid values: true, false, [false, true]"},{"location":"matlab_api/calcPNS/#returns","title":"Returns","text":"Output Type Description <code>ok</code> logical Logical indicating success or failure of the calculation <code>pns_norm</code> double Normalized PNS levels (normalized to 1, not 100%). Not explicitly defined in the excerpt but implied by the code <code>pns_comp</code> double PNS levels for each axis <code>t_axis</code> double Time axis for the PNS levels"},{"location":"matlab_api/calcPNS/#examples","title":"Examples","text":"<pre><code>[ok, pns_norm, pns_comp, t_axis] = seq.calcPNS(myPulseqObj, 'path/to/hardware.asc', false);\n</code></pre>"},{"location":"matlab_api/calcPNS/#see-also","title":"See Also","text":"<p>mr.Siemens.readasc</p>"},{"location":"matlab_api/calcRamp/","title":"calcRamp","text":"<p>Calculates a k-space trajectory connecting two given points (k0 and kend) while adhering to gradient and slew rate limits.  The function iteratively tries to find a solution with an increasing number of intermediate points until it finds a trajectory satisfying the constraints, or until a maximum number of points is reached. The resulting trajectory is not guaranteed to be the absolute shortest, but it's a reasonably short connection.</p>"},{"location":"matlab_api/calcRamp/#syntax","title":"Syntax","text":"<pre><code>function [kout, success] = calcRamp(k0,kend,varargin)\n</code></pre>"},{"location":"matlab_api/calcRamp/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.calcRamp(...)\n</code></pre>"},{"location":"matlab_api/calcRamp/#parameters","title":"Parameters","text":""},{"location":"matlab_api/calcRamp/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>k0</code> double Two preceding points in k-space.  Size is [3,2], representing the x, y, and z components of the two points. <code>[ [0;0;0], [1;1;1] ]</code> 1/m <code>kend</code> double Two following points in k-space. Size is [3,2], representing the x, y, and z components of the two points. <code>[ [2;2;2], [3;3;3] ]</code> 1/m"},{"location":"matlab_api/calcRamp/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> A structure containing system parameters. If empty, default system parameters are used.  Should contain fields like maxGrad and maxSlew. <code>mr.opts()</code> <code>MaxPoints</code> double <code>500</code> Maximum number of k-space points allowed in the connecting trajectory. Limits the computation time. Valid values: &gt;0 <code>1000</code> <code>maxGrad</code> double <code>0</code> Maximum gradient strength. Can be a scalar (total vector gradient) or a 3x1 vector (per-coordinate limits). If 0, the value from the 'system' parameter is used. (Units: Hz/m) <code>40e6</code> <code>maxSlew</code> double <code>0</code> Maximum slew rate. Can be a scalar (total vector slew rate) or a 3x1 vector (per-coordinate limits). If 0, the value from the 'system' parameter is used. (Units: Hz/(m*s)) <code>200e6</code> <code>gradOversampling</code> logical <code>false</code> If true, the gradient raster time is halved. Affects the gradient discretization. <code>true</code>"},{"location":"matlab_api/calcRamp/#returns","title":"Returns","text":"Output Type Description <code>kout</code> double Connecting k-space points (excluding k0 and kend). Size is [3, Nt], where Nt is the number of steps between k0 and kend. Units are 1/m. <code>success</code> logical A flag indicating whether a solution was found (1) or not (0)."},{"location":"matlab_api/calcRamp/#examples","title":"Examples","text":"<pre><code>[kout, success] = mr.calcRamp([ [0;0;0], [1;1;1] ], [ [2;2;2], [3;3;3] ], 'maxGrad', 40e6, 'maxSlew', 200e6)\n</code></pre>"},{"location":"matlab_api/calcRfBandwidth/","title":"calcRfBandwidth","text":"<p>Calculates the bandwidth of an RF pulse using a Fast Fourier Transform (FFT).  It assumes a low-angle approximation. The function returns the bandwidth, center frequency, and optionally the spectrum and frequency axis of the RF pulse.  It handles frequency offsets and resamples the pulse to a specified resolution before performing the FFT.</p>"},{"location":"matlab_api/calcRfBandwidth/#syntax","title":"Syntax","text":"<pre><code>function [bw,fc,spectrum,f,rfs,t]=calcRfBandwidth(rf, cutoff, df, dt)\n</code></pre>"},{"location":"matlab_api/calcRfBandwidth/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.calcRfBandwidth(...)\n</code></pre>"},{"location":"matlab_api/calcRfBandwidth/#parameters","title":"Parameters","text":""},{"location":"matlab_api/calcRfBandwidth/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>rf</code> struct Structure containing the RF pulse information.  This struct must include fields 't' (time vector), 'signal' (complex amplitude of the RF pulse), 'freqOffset' (frequency offset in Hz), 'freqPPM' (frequency offset in ppm), and 'phaseOffset' (phase offset in radians).  It also needs 'center', which represents a central point of the RF pulse used in resampling. <code>{t=[0:1e-6:1e-3]; signal=exp(-(t-0.5e-3).^2/2e-6); freqOffset=0; freqPPM=0; phaseOffset=0; center=0.5e-3;}</code>"},{"location":"matlab_api/calcRfBandwidth/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>cutoff</code> double <code>0.5</code> Fraction of the maximum amplitude used to define the bandwidth.  The bandwidth is determined by the points where the spectrum falls to this fraction of its maximum value. Valid values: [0, 1] <code>0.1</code> <code>df</code> double <code>10</code> Frequency resolution of the FFT (spectral resolution). (Units: Hz) <code>1</code> <code>dt</code> double <code>1e-6</code> Time resolution of the resampled RF pulse. (Units: seconds) <code>5e-7</code>"},{"location":"matlab_api/calcRfBandwidth/#returns","title":"Returns","text":"Output Type Description <code>bw</code> double Bandwidth of the RF pulse in Hz. <code>fc</code> double Center frequency of the RF pulse in Hz. <code>spectrum</code> double Complex spectrum of the RF pulse. <code>f</code> double Frequency axis corresponding to the spectrum. <code>rfs</code> double Resampled RF pulse signal. <code>t</code> double Time axis corresponding to the resampled RF pulse."},{"location":"matlab_api/calcRfBandwidth/#examples","title":"Examples","text":"<pre><code>  [bw, fc, spectrum, f, rfs, t] = mr.calcRfBandwidth(rf_pulse_struct, 0.2, 5, 1e-6);\n</code></pre>"},{"location":"matlab_api/calcRfBandwidth/#see-also","title":"See Also","text":"<p>mr.aux.findFlank</p>"},{"location":"matlab_api/calcRfCenter/","title":"calcRfCenter","text":"<p>Calculates the effective center time point of an RF pulse. For shaped pulses, it determines the time point corresponding to the peak RF amplitude.  For block pulses, it calculates the center of the pulse.  Zeropadding is included in the calculation, but the RF pulse's delay field is ignored.</p>"},{"location":"matlab_api/calcRfCenter/#syntax","title":"Syntax","text":"<pre><code>function [tc ic]=calcRfCenter(rf)\n</code></pre>"},{"location":"matlab_api/calcRfCenter/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.calcRfCenter(...)\n</code></pre>"},{"location":"matlab_api/calcRfCenter/#parameters","title":"Parameters","text":""},{"location":"matlab_api/calcRfCenter/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>rf</code> struct A structure representing the RF pulse.  It must contain at least the 'signal' field (containing the RF amplitude values) and the 't' field (containing the corresponding time points). It may also contain a 'center' field. <code>{signal: [0, 0.5, 1, 0.5, 0], t: [0, 1e-6, 2e-6, 3e-6, 4e-6]}</code>"},{"location":"matlab_api/calcRfCenter/#returns","title":"Returns","text":"Output Type Description <code>tc</code> double The time point (in seconds) of the calculated RF pulse center. <code>ic</code> double The index of the calculated RF pulse center within the rf.signal array."},{"location":"matlab_api/calcRfCenter/#examples","title":"Examples","text":"<pre><code>[tc, ic] = mr.calcRfCenter(rfPulse);\n</code></pre>"},{"location":"matlab_api/calcRfPower/","title":"calcRfPower","text":"<p>Calculates the relative power of an RF pulse.  It returns the relative energy of the pulse in units of Hz^2s (which simplifies to Hz), where the units represent RF amplitude squared multiplied by time.  The <code>mean_pwr</code> output is closely related to relative SAR.  The function also returns the peak power (in Hz^2) and the RMS B1 amplitude (in Hz).  The power and amplitude values are relative; to convert the RF amplitude to Tesla (T), divide by the gyromagnetic ratio (\u03b3).  Similarly, to convert the power to mT^2s, divide by \u03b3^2. Note that absolute SAR calculation requires additional coil and subject-dependent scaling factors.</p>"},{"location":"matlab_api/calcRfPower/#syntax","title":"Syntax","text":"<pre><code>function [mean_pwr, peak_pwr, rf_rms, total_energy]=calcRfPower(varargin)\n</code></pre>"},{"location":"matlab_api/calcRfPower/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.calcRfPower(...)\n</code></pre>"},{"location":"matlab_api/calcRfPower/#parameters","title":"Parameters","text":""},{"location":"matlab_api/calcRfPower/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>blockRange</code> double <code>[1 inf]</code> Specifies the range of blocks in the sequence for which to calculate the power.  Defaults to the entire sequence. Valid values: A two-element numeric vector [start_block, end_block] <code>[10, 20]</code> <code>windowDuration</code> double <code>NaN</code> Specifies the time window for calculating total_energy, mean_pwr, and rf_rms. If provided, the function returns the maximum values over all time windows. The window duration is rounded up to a certain number of complete blocks. Valid values: A positive numeric scalar (Units: seconds) <code>0.005</code>"},{"location":"matlab_api/calcRfPower/#returns","title":"Returns","text":"Output Type Description <code>mean_pwr</code> double Mean power of the RF pulse (relative, in Hz). <code>peak_pwr</code> double Peak power of the RF pulse (relative, in Hz^2). <code>rf_rms</code> double RMS B1 amplitude of the RF pulse (relative, in Hz). <code>total_energy</code> double Total energy of the RF pulse (relative, in Hz)."},{"location":"matlab_api/calcRfPower/#examples","title":"Examples","text":"<pre><code>seq.calcRfPower()\nseq.calcRfPower('blockRange', [10, 20])\nseq.calcRfPower('windowDuration', 0.01)\n</code></pre>"},{"location":"matlab_api/calcRfPower/#see-also","title":"See Also","text":"<p>mr.calcRfPower</p>"},{"location":"matlab_api/calculateKspacePP/","title":"calculateKspacePP","text":"<p>Calculates the k-space trajectory of a Pulseq sequence using a piecewise-polynomial gradient wave representation. This method is efficient for sequences with simple gradient shapes and long delays.  It considers optional parameters for compensating ADC and gradient timing mismatches and simulating background gradients.</p>"},{"location":"matlab_api/calculateKspacePP/#syntax","title":"Syntax","text":"<pre><code>function [ktraj_adc, t_adc, ktraj, t_ktraj, t_excitation, t_refocusing, slicepos, t_slicepos, gw_pp, pm_adc] = calculateKspacePP(varargin)\n</code></pre>"},{"location":"matlab_api/calculateKspacePP/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.calculateKspacePP(...)\n</code></pre>"},{"location":"matlab_api/calculateKspacePP/#parameters","title":"Parameters","text":""},{"location":"matlab_api/calculateKspacePP/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>trajectory_delay</code> double <code>0</code> A compensation factor to align the ADC and gradient timings in k-space reconstruction.  Positive values delay the gradient relative to the ADC. Valid values: Any numeric value (Units: seconds) <code>0.000001</code> <code>gradient_offset</code> double <code>0</code> Simulates background gradients or helps verify spin-echo conditions by adding a constant offset to the gradient waveforms. Valid values: Any numeric value (Units: Hz/m) <code>10</code> <code>blockRange</code> double <code>[1 inf]</code> Specifies a range of blocks within the sequence to consider for k-space trajectory calculation. Valid values: A two-element numeric array [start_block end_block], where end_block can be Inf to include all blocks from start_block to the end of the sequence.  start_block must be &gt;=1 <code>[5,10]</code> <code>externalWaveformsAndTimes</code> struct <code>struct([])</code> Allows supplying external gradient waveforms and timing information instead of using those from the Pulseq sequence object.  The struct should contain fields 'gw_data', 'tfp_excitation', 'tfp_refocusing', and 't_adc'.  It may optionally include 'pm_adc'. Valid values: A struct with fields: gw_data (gradient waveforms), tfp_excitation (excitation pulse timings), tfp_refocusing (refocusing pulse timings), t_adc (ADC timings), optionally pm_adc (phase modulation for ADC). <code>{gw_data: myGradientData, tfp_excitation: myExcitationTimes, tfp_refocusing: myRefocusingTimes, t_adc: myADCtimes}</code>"},{"location":"matlab_api/calculateKspacePP/#returns","title":"Returns","text":"Output Type Description <code>ktraj_adc</code> double k-space trajectory corresponding to ADC sampling times. <code>t_adc</code> double Time points corresponding to ADC samples. <code>ktraj</code> double Complete k-space trajectory. <code>t_ktraj</code> double Time points corresponding to the complete k-space trajectory. <code>t_excitation</code> double Time points of excitation pulses. <code>t_refocusing</code> double Time points of refocusing pulses. <code>slicepos</code> double Slice position information. <code>t_slicepos</code> double Time points corresponding to slice positions. <code>gw_pp</code> double Piecewise polynomial representation of gradient waveforms (optional output). <code>pm_adc</code> double Phase modulation for ADC (optional output)."},{"location":"matlab_api/calculateKspacePP/#examples","title":"Examples","text":"<pre><code>[ktraj_adc, t_adc] = seq.calculateKspacePP('trajectory_delay', 1e-6);\n</code></pre>"},{"location":"matlab_api/calculateKspacePP/#see-also","title":"See Also","text":"<p>waveforms_and_times</p>"},{"location":"matlab_api/checkTiming/","title":"checkTiming","text":"<p>This function checks the timing and other parameters of all blocks and objects within a Pulseq sequence.  It verifies consistency between stored block durations and calculated durations, ensures alignment with the blockDurationRaster, and checks for dead times in RF and ADC events. The function modifies the sequence object by adding a 'TotalDuration' field and returns a boolean indicating whether all checks passed, along with a detailed error report if any checks failed.</p>"},{"location":"matlab_api/checkTiming/#syntax","title":"Syntax","text":"<pre><code>function [is_ok, errorReport]=checkTiming()\n</code></pre>"},{"location":"matlab_api/checkTiming/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.checkTiming(...)\n</code></pre>"},{"location":"matlab_api/checkTiming/#parameters","title":"Parameters","text":""},{"location":"matlab_api/checkTiming/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>trajectory_delay</code> double <code>0</code> Optional parameter that seems to be unused in the provided code excerpt.  It might be related to trajectory delays but its usage is not apparent here. Valid values: &gt;= 0 (Units: seconds) <code>0.001</code>"},{"location":"matlab_api/checkTiming/#returns","title":"Returns","text":"Output Type Description <code>is_ok</code> logical A boolean value indicating whether all timing checks passed (true) or not (false). <code>errorReport</code> cell A cell array of strings containing detailed error messages if any timing checks failed.  If all checks pass, this will be an empty cell array."},{"location":"matlab_api/checkTiming/#examples","title":"Examples","text":"<pre><code>[is_ok, errorReport] = seq.checkTiming();\n</code></pre>"},{"location":"matlab_api/checkTiming/#see-also","title":"See Also","text":"<p>mr.checkTiming, Sequence.getBlock</p>"},{"location":"matlab_api/compressShape/","title":"compressShape","text":"<p>Compresses a gradient or pulse waveform using a run-length encoding scheme applied to its derivative.  This efficiently represents waveforms with constant or linearly changing segments using significantly fewer samples. The function returns a structure containing the compressed waveform and the original number of samples.</p>"},{"location":"matlab_api/compressShape/#syntax","title":"Syntax","text":"<pre><code>function s=compressShape(w, forceCompression)\n</code></pre>"},{"location":"matlab_api/compressShape/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.compressShape(...)\n</code></pre>"},{"location":"matlab_api/compressShape/#parameters","title":"Parameters","text":""},{"location":"matlab_api/compressShape/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>w</code> double The input waveform (gradient or pulse shape) to be compressed.  This is a vector of waveform amplitude values. <code>[1, 1, 1, 2, 2, 3, 3, 3, 3]</code>"},{"location":"matlab_api/compressShape/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>forceCompression</code> logical <code>false</code> A flag indicating whether to force compression even if the input waveform is short. If false, waveforms with 4 or fewer samples are returned uncompressed. Valid values: true, false <code>true</code>"},{"location":"matlab_api/compressShape/#returns","title":"Returns","text":"Output Type Description <code>s</code> struct A structure containing the compressed waveform data.  The structure has two fields: - <code>num_samples</code>: The number of samples in the original, uncompressed waveform. - <code>data</code>: A vector containing the compressed waveform data in a format suitable for Pulseq."},{"location":"matlab_api/compressShape/#examples","title":"Examples","text":"<pre><code>s = mr.compressShape([1 1 1 2 2 3 3 3 3]);\n% Compress a sample waveform\ns = mr.compressShape([1 2 3 4], true);\n</code></pre>"},{"location":"matlab_api/compressShape/#see-also","title":"See Also","text":"<p>decompressShape</p>"},{"location":"matlab_api/compressShape_mat/","title":"compressShape_mat","text":"<p>Compresses a gradient or pulse waveform using a run-length encoding scheme applied to its derivative.  This efficiently represents constant and linear segments of the waveform, reducing storage requirements. The function returns a structure containing the compressed waveform data and the number of samples in the original uncompressed waveform.</p>"},{"location":"matlab_api/compressShape_mat/#syntax","title":"Syntax","text":"<pre><code>function s=compressShape_mat(w, forceCompression)\n</code></pre>"},{"location":"matlab_api/compressShape_mat/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.compressShape_mat(...)\n</code></pre>"},{"location":"matlab_api/compressShape_mat/#parameters","title":"Parameters","text":""},{"location":"matlab_api/compressShape_mat/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>w</code> double The uncompressed waveform data (gradient or pulse shape).  This is a vector of amplitude values. <code>[1, 1, 1, 2, 2, 3, 3, 3, 2, 2, 1, 1]</code>"},{"location":"matlab_api/compressShape_mat/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>forceCompression</code> logical <code>false</code> A logical flag indicating whether to force compression even if it doesn't significantly reduce the waveform size.  If false, the function will only compress the waveform if a size reduction is achieved. Valid values: true or false <code>true</code>"},{"location":"matlab_api/compressShape_mat/#returns","title":"Returns","text":"Output Type Description <code>s</code> struct A structure containing the compressed waveform data.  It has two fields: - <code>num_samples</code>: The number of samples in the original uncompressed waveform <code>w</code>. - <code>data</code>: The compressed waveform data."},{"location":"matlab_api/compressShape_mat/#examples","title":"Examples","text":"<pre><code>s = mr.compressShape_mat([1, 1, 1, 2, 2, 3, 3, 3, 2, 2, 1, 1]);\ns = mr.compressShape_mat(myWaveform, true);\n</code></pre>"},{"location":"matlab_api/compressShape_mat/#see-also","title":"See Also","text":"<p>decompressShape</p>"},{"location":"matlab_api/conjugate/","title":"conjugate","text":"<p>This function computes the conjugate of a quaternion or a collection of quaternions.  A quaternion is represented as a 1x4 vector [real, i, j, k], where the first element is the real part and the remaining three elements represent the imaginary components. The function handles single quaternions (1x4 vectors) and collections of quaternions (Nx4 matrices).</p>"},{"location":"matlab_api/conjugate/#syntax","title":"Syntax","text":"<pre><code>function q = conjugate(q)\n</code></pre>"},{"location":"matlab_api/conjugate/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.aux.quat.conjugate(...)\n</code></pre>"},{"location":"matlab_api/conjugate/#parameters","title":"Parameters","text":""},{"location":"matlab_api/conjugate/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>q</code> double A single quaternion (1x4 vector) or a collection of quaternions (Nx4 matrix). <code>[1, 2, 3, 4]</code>"},{"location":"matlab_api/conjugate/#returns","title":"Returns","text":"Output Type Description <code>q</code> double The conjugate of the input quaternion or quaternions.  For a single quaternion, this is a 1x4 vector. For a collection of quaternions, this is an Nx4 matrix."},{"location":"matlab_api/conjugate/#examples","title":"Examples","text":"<pre><code>q_conj = mr.aux.quat.conjugate([1, 2, 3, 4]);\nq_conj_matrix = mr.aux.quat.conjugate([[1, 2, 3, 4]; [5, 6, 7, 8]]);\n</code></pre>"},{"location":"matlab_api/convert/","title":"convert","text":"<p>Converts numerical data between different units used in magnetic resonance imaging (MRI) gradient and RF pulse design.  It handles units for magnetic field strength (B1), gradient strength, and gradient slew rate.  The function utilizes a pre-defined set of valid units and converts the input data to a standard unit before converting it to the desired output unit. The gyromagnetic ratio (gamma) is used for conversions involving magnetic field strength.</p>"},{"location":"matlab_api/convert/#syntax","title":"Syntax","text":"<pre><code>function out=convert(in,varargin)\n</code></pre>"},{"location":"matlab_api/convert/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.convert(...)\n</code></pre>"},{"location":"matlab_api/convert/#parameters","title":"Parameters","text":""},{"location":"matlab_api/convert/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>in</code> double The numerical data to be converted. The units of this data are specified by the 'fromUnit' parameter. <code>1000</code> varies <code>fromUnit</code> char A string specifying the units of the input data 'in'. <code>'mT/m'</code>"},{"location":"matlab_api/convert/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>toUnit</code> char <code>[]</code> A string specifying the desired units for the output data. If omitted, a default unit is chosen based on 'fromUnit'. Valid values: 'Hz', 'T', 'mT', 'uT', 'Hz/m', 'mT/m', 'rad/ms/mm', 'Hz/m/s', 'mT/m/ms', 'T/m/s', 'rad/ms/mm/ms' <code>'Hz/m'</code> <code>gamma</code> double <code>42.576e6</code> The gyromagnetic ratio, used for conversions involving magnetic field strength. Defaults to 42.576 MHz/T (for protons). (Units: Hz/T) <code>42.577e6</code>"},{"location":"matlab_api/convert/#returns","title":"Returns","text":"Output Type Description <code>out</code> double The converted numerical data in the specified 'toUnit' units."},{"location":"matlab_api/convert/#examples","title":"Examples","text":"<pre><code>out = mr.convert(1000,'mT/m','Hz/m');\nout = mr.convert(500,'rad/ms/mm','mT/m');\nout = mr.convert(200,'Hz',[], 42.58e6);\n</code></pre>"},{"location":"matlab_api/decompressShape/","title":"decompressShape","text":"<p>Decompresses a gradient or pulse shape that has been compressed using a run-length encoding scheme on its derivative.  The input shape is a structure containing the compressed waveform and the number of samples in the uncompressed waveform. The function reconstructs the original waveform by iteratively expanding the run-length encoded segments.</p>"},{"location":"matlab_api/decompressShape/#syntax","title":"Syntax","text":"<pre><code>function w = decompressShape(shape, forceDecompression)\n</code></pre>"},{"location":"matlab_api/decompressShape/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.decompressShape(...)\n</code></pre>"},{"location":"matlab_api/decompressShape/#parameters","title":"Parameters","text":""},{"location":"matlab_api/decompressShape/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>shape</code> struct Structure containing the compressed waveform data.  Must have fields 'num_samples' (number of samples in the uncompressed waveform) and 'data' (the compressed waveform data). <code>{ 'num_samples': 1000, 'data': [1, 0, 2, 0, 0, 3, ... ] }</code>"},{"location":"matlab_api/decompressShape/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>forceDecompression</code> logical <code>false</code> If true, forces decompression even if the input shape appears to be already uncompressed (i.e., the number of samples matches the length of the compressed data). Valid values: true, false <code>true</code>"},{"location":"matlab_api/decompressShape/#returns","title":"Returns","text":"Output Type Description <code>w</code> double A vector containing the decompressed waveform."},{"location":"matlab_api/decompressShape/#examples","title":"Examples","text":"<pre><code>w = mr.decompressShape(shape);\nw = mr.decompressShape(shape, true);\n</code></pre>"},{"location":"matlab_api/decompressShape/#see-also","title":"See Also","text":"<p>compressShape</p>"},{"location":"matlab_api/duration/","title":"duration","text":"<p>Calculates the total duration of a Pulseq sequence and optionally returns the number of blocks and a count of events within each block.</p>"},{"location":"matlab_api/duration/#syntax","title":"Syntax","text":"<pre><code>function [duration, numBlocks, eventCount]=duration()\n</code></pre>"},{"location":"matlab_api/duration/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.duration(...)\n</code></pre>"},{"location":"matlab_api/duration/#parameters","title":"Parameters","text":"<p>No parameters</p>"},{"location":"matlab_api/duration/#returns","title":"Returns","text":"Output Type Description <code>duration</code> double The total duration of the sequence in seconds. <code>numBlocks</code> double The number of blocks in the sequence. <code>eventCount</code> double A vector representing the count of events (where an event is considered to be greater than 0 in the blockEvents) in each block. Only returned if requested (nargout &gt; 2)."},{"location":"matlab_api/duration/#examples","title":"Examples","text":"<pre><code>[totalDuration, numberOfBlocks] = seq.duration();\n</code></pre>"},{"location":"matlab_api/duration/#see-also","title":"See Also","text":"<p>checkTiming</p>"},{"location":"matlab_api/evalLabels/","title":"evalLabels","text":"<p>This function evaluates the values of labels used within a Pulseq sequence. It can calculate the final label values at the end of the sequence or track their evolution across specified blocks.  It supports initializing label values and selectively evaluating labels based on the presence of ADCs or label manipulations.</p>"},{"location":"matlab_api/evalLabels/#syntax","title":"Syntax","text":"<pre><code>function labels = evalLabels(varargin)\n</code></pre>"},{"location":"matlab_api/evalLabels/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.evalLabels(...)\n</code></pre>"},{"location":"matlab_api/evalLabels/#parameters","title":"Parameters","text":""},{"location":"matlab_api/evalLabels/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>blockRange</code> double <code>[1 inf]</code> Specifies the range of blocks to evaluate labels for.  The default evaluates all blocks. Valid values: A two-element numeric vector [first last], where 'first' and 'last' are the indices of the starting and ending blocks respectively. 'inf' can be used for the last element to denote the last block. <code>[5 10]</code> <code>init</code> struct <code>struct([])</code> Provides initial values for labels. Useful for evaluating labels block-by-block, where results from the previous block are used as inputs for the next. <code>struct('label1',10, 'label2',0)</code> <code>evolution</code> char <code>'none'</code> Specifies the level of detail for the label evolution output. Valid values: 'none', 'adc', 'label', 'blocks' <code>'blocks'</code>"},{"location":"matlab_api/evalLabels/#returns","title":"Returns","text":"Output Type Description <code>labels</code> struct A structure containing the evaluated label values. Field names correspond to the label names used in the sequence."},{"location":"matlab_api/evalLabels/#examples","title":"Examples","text":"<pre><code>labels = seq.evalLabels();\nlabels = seq.evalLabels('blockRange', [10 20], 'evolution', 'adc');\nlabels = seq.evalLabels('init', struct('phase', pi/2));\n</code></pre>"},{"location":"matlab_api/evalLabels/#see-also","title":"See Also","text":"<p>getBlock</p>"},{"location":"matlab_api/findBlockByTime/","title":"findBlockByTime","text":"<p>This helper function finds the index of the block in a Pulseq sequence that contains a given time point.  It takes a sequence object and a time value as input and returns the index of the block that encompasses that time. The function iterates through the cumulative sum of block durations until it finds the block containing the specified time.  It handles cases where the time is beyond the sequence duration by returning an empty array.</p>"},{"location":"matlab_api/findBlockByTime/#syntax","title":"Syntax","text":"<pre><code>function iB=findBlockByTime(t)\n</code></pre>"},{"location":"matlab_api/findBlockByTime/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.findBlockByTime(...)\n</code></pre>"},{"location":"matlab_api/findBlockByTime/#parameters","title":"Parameters","text":""},{"location":"matlab_api/findBlockByTime/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>t</code> double The time point (in seconds) to search for within the sequence blocks. <code>0.015</code> seconds"},{"location":"matlab_api/findBlockByTime/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>trajectory_delay</code> double <code>0</code> This parameter appears in the original code but is not used in the provided excerpt.  It's likely intended to account for delays in trajectory calculation but is unused in this version of the function. (Units: seconds) <code>0.001</code>"},{"location":"matlab_api/findBlockByTime/#returns","title":"Returns","text":"Output Type Description <code>iB</code> double The index of the block in the sequence object (obj.blockDurations) that contains the specified time point 't'. Returns an empty array if 't' is beyond the sequence duration."},{"location":"matlab_api/findBlockByTime/#examples","title":"Examples","text":"<pre><code>iB = seq.findBlockByTime(0.010);\n</code></pre>"},{"location":"matlab_api/findBlockByTime/#see-also","title":"See Also","text":"<p>Sequence</p>"},{"location":"matlab_api/findFlank/","title":"findFlank","text":"<p>This function finds the x-coordinate of the left flank of a given function f. It determines the first x value where the absolute value of f exceeds a specified fraction (c) of the maximum absolute value of f.  Linear interpolation is used if the identified point is not the first element in the x vector.</p>"},{"location":"matlab_api/findFlank/#syntax","title":"Syntax","text":"<pre><code>function xf=findFlank(x,f,c)\n</code></pre>"},{"location":"matlab_api/findFlank/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.aux.findFlank(...)\n</code></pre>"},{"location":"matlab_api/findFlank/#parameters","title":"Parameters","text":""},{"location":"matlab_api/findFlank/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>x</code> double A vector of x-coordinates corresponding to the function values in f. <code>[0:0.01:1]</code> <code>f</code> double A vector of function values corresponding to the x-coordinates in x. <code>sin(2*pi*x)</code> <code>c</code> double A scaling factor (0 &lt; c &lt; 1) that determines the threshold for identifying the flank. The threshold is c * max(abs(f)). <code>0.1</code>"},{"location":"matlab_api/findFlank/#returns","title":"Returns","text":"Output Type Description <code>xf</code> double The x-coordinate of the left flank of the function f. This is the first x value where abs(f) &gt; c * max(abs(f)). Linear interpolation is used to refine the result if necessary."},{"location":"matlab_api/findFlank/#examples","title":"Examples","text":"<pre><code>xf = mr.aux.findFlank([0:0.01:1], sin(2*pi*[0:0.01:1]), 0.5);\n</code></pre>"},{"location":"matlab_api/flipGradAxis/","title":"flipGradAxis","text":"<p>This helper function inverts all gradients along a specified axis or channel within a Pulseq sequence object.  It modifies existing gradient objects that have already been added to the sequence.</p>"},{"location":"matlab_api/flipGradAxis/#syntax","title":"Syntax","text":"<pre><code>function flipGradAxis(axis)\n</code></pre>"},{"location":"matlab_api/flipGradAxis/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.flipGradAxis(...)\n</code></pre>"},{"location":"matlab_api/flipGradAxis/#parameters","title":"Parameters","text":""},{"location":"matlab_api/flipGradAxis/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>axis</code> char The axis along which to invert the gradients ('x', 'y', or 'z'). <code>'x'</code>"},{"location":"matlab_api/flipGradAxis/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>trajectory_delay</code> double <code>0</code> This parameter is not used in the provided code snippet. It's likely an optional parameter intended for other functionality within the larger <code>Sequence</code> class. Valid values: &gt;= 0 (Units: seconds) <code>0.001</code>"},{"location":"matlab_api/flipGradAxis/#returns","title":"Returns","text":"Output Type Description <code>None</code> None This function modifies the sequence object in place and does not return any values."},{"location":"matlab_api/flipGradAxis/#examples","title":"Examples","text":"<pre><code>seq.flipGradAxis('x');\n</code></pre>"},{"location":"matlab_api/flipGradAxis/#see-also","title":"See Also","text":"<p>modGradAxis</p>"},{"location":"matlab_api/fromRotMat/","title":"fromRotMat","text":"<p>This function converts a 3x3 rotation matrix into a normalized quaternion.  It handles potential rounding errors and cases where the rotation matrix might be close to a zero or identity matrix.</p>"},{"location":"matlab_api/fromRotMat/#syntax","title":"Syntax","text":"<pre><code>function q = fromRotMat(R)\n</code></pre>"},{"location":"matlab_api/fromRotMat/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.aux.quat.fromRotMat(...)\n</code></pre>"},{"location":"matlab_api/fromRotMat/#parameters","title":"Parameters","text":""},{"location":"matlab_api/fromRotMat/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>R</code> double A 3x3 rotation matrix. <code>[1 0 0; 0 1 0; 0 0 1]</code>"},{"location":"matlab_api/fromRotMat/#returns","title":"Returns","text":"Output Type Description <code>q</code> double A 4-element normalized quaternion representing the rotation. The order is [qs, qx, qy, qz]."},{"location":"matlab_api/fromRotMat/#examples","title":"Examples","text":"<pre><code>q = mr.aux.quat.fromRotMat([1 0 0; 0 1 0; 0 0 1]);\n</code></pre>"},{"location":"matlab_api/fromRotMat/#see-also","title":"See Also","text":"<p>mr.aux.quat.normalize</p>"},{"location":"matlab_api/getBlock/","title":"getBlock","text":"<p>Retrieves a specific block from a Pulseq sequence object.  The function decompresses all events and shapes within the requested block and returns it as a structure. It also handles the extraction and unpacking of optional extensions like triggers and labels associated with the block.</p>"},{"location":"matlab_api/getBlock/#syntax","title":"Syntax","text":"<pre><code>function block = getBlock(index, addIDs)\n</code></pre>"},{"location":"matlab_api/getBlock/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.getBlock(...)\n</code></pre>"},{"location":"matlab_api/getBlock/#parameters","title":"Parameters","text":""},{"location":"matlab_api/getBlock/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>index</code> double The index (integer) of the block to retrieve (1-based indexing) <code>1</code>"},{"location":"matlab_api/getBlock/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>addIDs</code> logical <code>false</code> A boolean flag indicating whether to include IDs for triggers and labels in the returned block structure <code>true</code>"},{"location":"matlab_api/getBlock/#returns","title":"Returns","text":"Output Type Description <code>block</code> struct A structure containing the block's data.  This includes fields such as 'blockDuration', 'rf', 'gx', 'gy', 'gz', 'adc', and potentially 'trig' (for triggers) and other fields related to labels and other extensions if present in the raw block data."},{"location":"matlab_api/getBlock/#examples","title":"Examples","text":"<pre><code>block = seq.getBlock(2, true);\nblock = seq.getBlock(5);\n</code></pre>"},{"location":"matlab_api/getBlock/#see-also","title":"See Also","text":"<p>setBlock, addBlock</p>"},{"location":"matlab_api/getDefinition/","title":"getDefinition","text":"<p>Retrieves the value associated with a specified key from a custom definitions structure within a Pulseq sequence object.  This function allows access to user-defined parameters stored in the sequence object.</p>"},{"location":"matlab_api/getDefinition/#syntax","title":"Syntax","text":"<pre><code>function value=getDefinition(key)\n</code></pre>"},{"location":"matlab_api/getDefinition/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.getDefinition(...)\n</code></pre>"},{"location":"matlab_api/getDefinition/#parameters","title":"Parameters","text":""},{"location":"matlab_api/getDefinition/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>key</code> char The key string identifying the desired definition. <code>'FOV'</code>"},{"location":"matlab_api/getDefinition/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>trajectory_delay</code> double <code>0</code> This parameter is not used in the provided code snippet. Valid values: any non-negative number (Units: seconds) <code>0.001</code>"},{"location":"matlab_api/getDefinition/#returns","title":"Returns","text":"Output Type Description <code>value</code> any The value associated with the specified key. Returns an empty array if the key is not found."},{"location":"matlab_api/getDefinition/#examples","title":"Examples","text":"<pre><code>value = seq.getDefinition('FOV');\nmyValue = seq.getDefinition('myCustomParam');\n</code></pre>"},{"location":"matlab_api/getDefinition/#see-also","title":"See Also","text":"<p>setDefinition</p>"},{"location":"matlab_api/getSupportedLabels/","title":"getSupportedLabels","text":"<p>This function returns a cell array of strings representing supported labels for Pulseq sequence parameters.  These labels are used to map sequence parameters to specific fields in the scanner's data handling system (MDH), particularly for Siemens scanners.  The labels cover various aspects of pulse sequence design, including repetition, averaging, phase cycling, parallel imaging, motion correction, and execution control.</p>"},{"location":"matlab_api/getSupportedLabels/#syntax","title":"Syntax","text":"<pre><code>function supported_labels = getSupportedLabels()\n</code></pre>"},{"location":"matlab_api/getSupportedLabels/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.getSupportedLabels(...)\n</code></pre>"},{"location":"matlab_api/getSupportedLabels/#parameters","title":"Parameters","text":"<p>No parameters</p>"},{"location":"matlab_api/getSupportedLabels/#returns","title":"Returns","text":"Output Type Description <code>supported_labels</code> cell A cell array of strings containing the supported labels.  Each string represents a specific label used in Pulseq sequence design and mapping to scanner parameters."},{"location":"matlab_api/getSupportedLabels/#examples","title":"Examples","text":"<pre><code>supportedLabels = mr.getSupportedLabels();\n</code></pre>"},{"location":"matlab_api/getSupportedRfUse/","title":"getSupportedRfUse","text":"<p>This function returns a cell array containing strings representing the supported RF pulse uses in Pulseq, and optionally a corresponding array of single-character abbreviations.</p>"},{"location":"matlab_api/getSupportedRfUse/#syntax","title":"Syntax","text":"<pre><code>function [supported_rf_use, short_rf_use] = getSupportedRfUse()\n</code></pre>"},{"location":"matlab_api/getSupportedRfUse/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.getSupportedRfUse(...)\n</code></pre>"},{"location":"matlab_api/getSupportedRfUse/#parameters","title":"Parameters","text":"<p>No parameters</p>"},{"location":"matlab_api/getSupportedRfUse/#returns","title":"Returns","text":"Output Type Description <code>supported_rf_use</code> cell A cell array of strings representing the supported RF pulse uses.  The strings are: 'excitation', 'refocusing', 'inversion', 'saturation', 'preparation', 'other', 'undefined'. <code>short_rf_use</code> char An array of single characters representing abbreviated forms of the supported RF pulse uses. This is only returned if a second output argument is requested.  It contains the first letter of each string in <code>supported_rf_use</code>."},{"location":"matlab_api/getSupportedRfUse/#examples","title":"Examples","text":"<pre><code>[supportedUses] = mr.getSupportedRfUse();\n[supportedUses, shortUses] = mr.getSupportedRfUse();\n</code></pre>"},{"location":"matlab_api/install/","title":"install","text":"<p>Installs a Pulseq sequence directly on an MRI scanner system. This function facilitates deployment of sequences to scanner platforms, particularly Siemens systems, by copying the sequence files to the appropriate scanner directories and optionally to the RANGE controller.</p>"},{"location":"matlab_api/install/#syntax","title":"Syntax","text":"<pre><code>function ok=install(param1,param2)\n</code></pre>"},{"location":"matlab_api/install/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.install(...)\n</code></pre>"},{"location":"matlab_api/install/#parameters","title":"Parameters","text":""},{"location":"matlab_api/install/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>param1</code> char Scanner type or sequence path/name. If omitted, auto-detects scanner environment. Options: 'siemens' (Numaris4), 'siemensNX' (NumarisX), or a custom sequence path/name <code>'siemens'</code> or <code>'my_seq/custom_name'</code> <code>param2</code> char Sequence path or name when param1 specifies scanner type. Creates subdirectories automatically if provided <code>'sequences/my_epi'</code>"},{"location":"matlab_api/install/#returns","title":"Returns","text":"Output Type Description <code>ok</code> logical Returns true if installation was successful, false otherwise"},{"location":"matlab_api/install/#usage-modes","title":"Usage Modes","text":"<p>The function supports several usage patterns:</p> <ol> <li>Auto-detect scanner: <code>seq.install()</code> - Automatically detects the scanner environment and installs with default name</li> <li>Custom name with auto-detect: <code>seq.install('sequence_path_or_name')</code> - Auto-detects scanner and installs with specified name</li> <li>Siemens Numaris4: <code>seq.install('siemens')</code> - Installs as external.seq on Numaris4 system</li> <li>Siemens NumarisX: <code>seq.install('siemensNX')</code> - Installs as external.seq on NumarisX system</li> <li>Siemens with custom name: <code>seq.install('siemens', 'my_seq/custom_name')</code> - Installs with custom path/name on Numaris4</li> <li>NumarisX with custom name: <code>seq.install('siemensNX', 'my_seq/custom_name')</code> - Installs with custom path/name on NumarisX</li> </ol>"},{"location":"matlab_api/install/#examples","title":"Examples","text":"<pre><code>% Auto-detect scanner and install with default name\nseq.install();\n\n% Install with custom name (auto-detect scanner)\nseq.install('protocols/my_epi_sequence');\n\n% Install on Siemens Numaris4 system as external.seq\nseq.install('siemens');\n\n% Install on Siemens NumarisX with custom name\nseq.install('siemensNX', 'research/diffusion_seq');\n\n% Install with subdirectory creation\nseq.install('siemens', 'project_2024/sequences/gre_v2');\n</code></pre>"},{"location":"matlab_api/install/#notes","title":"Notes","text":"<ul> <li>The function uses network ping to verify scanner connectivity before installation</li> <li>Subdirectories specified in the path are created automatically</li> <li>The function is typically commented out during sequence development and uncommented for deployment</li> <li>Installation requires appropriate network access and permissions to the scanner system</li> <li>On Windows systems, uses Windows-specific ping parameters; on Unix/Mac, uses Unix-style ping</li> </ul>"},{"location":"matlab_api/install/#see-also","title":"See Also","text":"<p>write, read, checkTiming</p>"},{"location":"matlab_api/isOctave/","title":"isOctave","text":"<p>This function checks if the code is running within the Octave environment. It uses a persistent variable to store the result of the check, avoiding repeated calls to the <code>exist</code> function.</p>"},{"location":"matlab_api/isOctave/#syntax","title":"Syntax","text":"<pre><code>function OUT = isOctave ()\n</code></pre>"},{"location":"matlab_api/isOctave/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.aux.isOctave(...)\n</code></pre>"},{"location":"matlab_api/isOctave/#parameters","title":"Parameters","text":"<p>No parameters</p>"},{"location":"matlab_api/isOctave/#returns","title":"Returns","text":"Output Type Description <code>OUT</code> double A logical value (1 or 0) indicating whether the code is running in Octave (1 for Octave, 0 for MATLAB)."},{"location":"matlab_api/isOctave/#examples","title":"Examples","text":"<pre><code>mr.aux.isOctave()\n</code></pre>"},{"location":"matlab_api/makeAdc/","title":"makeAdc","text":"<p>Creates an ADC readout event for Pulseq sequence design.  It defines parameters for the analog-to-digital conversion process, including the number of samples, dwell time, duration, delay, and frequency and phase offsets.  It can account for system-specific dead times.</p>"},{"location":"matlab_api/makeAdc/#syntax","title":"Syntax","text":"<pre><code>function adc=makeAdc(num,varargin)\n</code></pre>"},{"location":"matlab_api/makeAdc/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeAdc(...)\n</code></pre>"},{"location":"matlab_api/makeAdc/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeAdc/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>num</code> double The number of samples to be acquired by the ADC. <code>1024</code>"},{"location":"matlab_api/makeAdc/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> A structure containing system parameters.  If not provided, default system parameters are used.  Should contain the field <code>adcDeadTime</code> (in seconds). <code>mr.opts()</code> <code>dwell</code> double <code>0</code> The dwell time (sampling interval) in seconds.  Must be specified if <code>duration</code> is not. Valid values: dwell &gt; 0 (Units: seconds) <code>0.000004</code> <code>duration</code> double <code>0</code> The total duration of the ADC readout in seconds. Must be specified if <code>dwell</code> is not. Valid values: duration &gt; 0 (Units: seconds) <code>0.004</code> <code>delay</code> double <code>0</code> The delay before the ADC readout begins in seconds. (Units: seconds) <code>0.001</code> <code>freqOffset</code> double <code>0</code> Frequency offset of the ADC readout in Hz. (Units: Hz) <code>100</code> <code>phaseOffset</code> double <code>0</code> Phase offset of the ADC readout in radians. (Units: radians) <code>pi/2</code> <code>freqPPM</code> double <code>0</code> Frequency offset in parts per million (ppm). (Units: ppm) <code>10</code> <code>phasePPM</code> double <code>0</code> Phase offset in parts per million (ppm). (Units: ppm) <code>5</code> <code>phaseModulation</code> double <code>[]</code> A vector of phase modulation values for each sample in radians. Must be the same length as <code>num</code>. (Units: radians) <code>[0, pi/4, pi/2, 3*pi/4, pi]</code>"},{"location":"matlab_api/makeAdc/#returns","title":"Returns","text":"Output Type Description <code>adc</code> struct A structure containing the ADC readout parameters.  Fields include: <code>type</code>, <code>numSamples</code>, <code>dwell</code>, <code>delay</code>, <code>freqOffset</code>, <code>phaseOffset</code>, <code>freqPPM</code>, <code>phasePPM</code>, <code>deadTime</code>, <code>duration</code>, and <code>phaseModulation</code>."},{"location":"matlab_api/makeAdc/#examples","title":"Examples","text":"<pre><code>adc = mr.makeAdc(1024, 'dwell', 0.000004);\nadc = mr.makeAdc(2048, 'duration', 0.008);\nadc = mr.makeAdc(1024, mr.opts(), 'delay', 0.001, 'phaseModulation', linspace(0, 2*pi, 1024));\n</code></pre>"},{"location":"matlab_api/makeAdc/#see-also","title":"See Also","text":"<p>Sequence.addBlock</p>"},{"location":"matlab_api/makeAdiabaticPulse/","title":"makeAdiabaticPulse","text":"<p>Generates adiabatic inversion pulses of type 'hypsec' (hyperbolic secant) or 'wurst' (wideband, uniform rate, smooth truncation).  It acts as a wrapper for a Python function (requiring the 'sigpy' library), creating RF and gradient waveforms. Note that this function is likely to only work on Linux systems.</p>"},{"location":"matlab_api/makeAdiabaticPulse/#syntax","title":"Syntax","text":"<pre><code>function [rf, gz, gzr, delay] = makeAdiabaticPulse(type,varargin)\n</code></pre>"},{"location":"matlab_api/makeAdiabaticPulse/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeAdiabaticPulse(...)\n</code></pre>"},{"location":"matlab_api/makeAdiabaticPulse/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeAdiabaticPulse/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>type</code> string Specifies the type of adiabatic pulse to generate.  Must be either 'hypsec' or 'wurst'. <code>'hypsec'</code>"},{"location":"matlab_api/makeAdiabaticPulse/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> System parameters (e.g., from mr.opts()).  Provides system limits for gradient waveforms (if maxGrad and maxSlew are not specified). <code>mr.opts()</code> <code>duration</code> double <code>10e-3</code> Total duration of the pulse. (Units: seconds) <code>0.01</code> <code>freqOffset</code> double <code>0</code> Frequency offset of the pulse. (Units: Hz) <code>100</code> <code>phaseOffset</code> double <code>0</code> Phase offset of the pulse. (Units: radians) <code>pi/2</code> <code>freqPPM</code> double <code>0</code> Frequency offset in parts per million. (Units: ppm) <code>0.1</code> <code>phasePPM</code> double <code>0</code> Phase offset in parts per million. (Units: ppm) <code>0.1</code> <code>beta</code> double <code>800</code> AM waveform parameter (relevant for 'hypsec' pulse). <code>1000</code> <code>mu</code> double <code>4.9</code> Constant determining the amplitude of the frequency sweep (relevant for 'hypsec' pulse). <code>5.0</code> <code>n_fac</code> double <code>40</code> Power to exponentiate within the AM term (relevant for 'wurst' pulse). <code>30</code> <code>bandwidth</code> double <code>40000</code> Pulse bandwidth (relevant for 'wurst' pulse). (Units: Hz) <code>20000</code> <code>adiabaticity</code> double <code>4</code> Adiabaticity factor. <code>5</code> <code>maxGrad</code> double <code>0</code> Maximum gradient amplitude. (Units: Hz/m) <code>1000</code> <code>maxSlew</code> double <code>0</code> Maximum gradient slew rate. (Units: Hz/m/s) <code>100000</code> <code>sliceThickness</code> double <code>0</code> Slice thickness. (Units: meters) <code>0.005</code> <code>delay</code> double <code>0</code> Delay after the pulse. (Units: seconds) <code>0.001</code> <code>dwell</code> double <code>0</code> Dwell time. (Units: seconds) <code>1e-6</code> <code>use</code> string <code>'u'</code> Specifies how the pulse will be used.  See mr.getSupportedRfUse() for options. <code>'excitation'</code> <code>pythonCmd</code> string <code>''</code> Command to execute the Python function (for advanced use cases). <code>''</code>"},{"location":"matlab_api/makeAdiabaticPulse/#returns","title":"Returns","text":"Output Type Description <code>rf</code> struct Pulseq RF waveform structure. <code>gz</code> struct Pulseq slice-select gradient waveform structure. <code>gzr</code> struct Pulseq refocusing gradient waveform structure (if applicable). <code>delay</code> double Delay time (seconds)."},{"location":"matlab_api/makeAdiabaticPulse/#examples","title":"Examples","text":"<pre><code>[rf, gz, gzr, delay] = mr.makeAdiabaticPulse('hypsec', 'duration', 0.01, 'beta', 1000, 'mu', 5);\n[rf, gz, gzr, delay] = mr.makeAdiabaticPulse('wurst', 'duration', 0.005, 'bandwidth', 20000, 'n_fac', 30);\n</code></pre>"},{"location":"matlab_api/makeAdiabaticPulse/#see-also","title":"See Also","text":"<p>mr.opts, mr.makeExtendedTrapezoid, mr.getSupportedRfUse</p>"},{"location":"matlab_api/makeArbitraryGrad/","title":"makeArbitraryGrad","text":"<p>Creates a gradient event with an arbitrary waveform.  The function ensures the waveform adheres to the specified gradient hardware constraints (maximum slew rate and amplitude). It allows for oversampling and extrapolation to handle waveform edges.</p>"},{"location":"matlab_api/makeArbitraryGrad/#syntax","title":"Syntax","text":"<pre><code>function grad=makeArbitraryGrad(channel,varargin)\n</code></pre>"},{"location":"matlab_api/makeArbitraryGrad/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeArbitraryGrad(...)\n</code></pre>"},{"location":"matlab_api/makeArbitraryGrad/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeArbitraryGrad/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>channel</code> char The gradient channel ('x', 'y', or 'z') for the waveform. <code>'x'</code> <code>waveform</code> double A vector representing the desired gradient waveform amplitude at each time point. <code>[0.1, 0.2, 0.3, 0.2, 0.1]</code> Hz/m"},{"location":"matlab_api/makeArbitraryGrad/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> A structure containing system parameters (e.g., maxSlew, maxGrad, gradRasterTime). If empty, defaults to mr.opts(). <code>mr.opts()</code> <code>oversampling</code> logical <code>false</code> Specifies whether oversampling is used. If true, the waveform is sampled at twice the resolution. <code>true</code> <code>maxGrad</code> double <code>0</code> The maximum allowed gradient amplitude. If 0, the system's maxGrad is used. (Units: Hz/m) <code>1000</code> <code>maxSlew</code> double <code>0</code> The maximum allowed gradient slew rate. If 0, the system's maxSlew is used. (Units: Hz/m/s) <code>100000</code> <code>delay</code> double <code>0</code> Delay before the gradient waveform starts. (Units: seconds) <code>0.001</code> <code>first</code> double <code>NaN</code> The gradient amplitude at the very beginning (before the first sample in 'waveform'). If NaN, it's extrapolated. (Units: Hz/m) <code>0</code> <code>last</code> double <code>NaN</code> The gradient amplitude at the very end (after the last sample in 'waveform'). If NaN, it's extrapolated. (Units: Hz/m) <code>0</code>"},{"location":"matlab_api/makeArbitraryGrad/#returns","title":"Returns","text":"Output Type Description <code>grad</code> struct A structure containing the gradient event details: type, channel, waveform, delay, area, and tt (time points)."},{"location":"matlab_api/makeArbitraryGrad/#examples","title":"Examples","text":"<pre><code>g = mr.makeArbitraryGrad('x', [0 1 0], 'maxGrad', 2000, 'maxSlew', 200000);\ng = mr.makeArbitraryGrad('y', [0:0.1:1 1:-0.1:0], mr.opts(), true);\n</code></pre>"},{"location":"matlab_api/makeArbitraryGrad/#see-also","title":"See Also","text":"<p>Sequence.addBlock, mr.opts</p>"},{"location":"matlab_api/makeArbitraryRf/","title":"makeArbitraryRf","text":"<p>Creates an arbitrary RF pulse with a specified shape and parameters.  The function takes a complex signal representing the desired pulse shape and calculates the corresponding RF pulse parameters, including frequency and phase offsets, and optionally generates a slice-selective gradient.</p>"},{"location":"matlab_api/makeArbitraryRf/#syntax","title":"Syntax","text":"<pre><code>function [rf, gz, gzr, delay] = makeArbitraryRf(signal,flip,varargin)\n</code></pre>"},{"location":"matlab_api/makeArbitraryRf/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeArbitraryRf(...)\n</code></pre>"},{"location":"matlab_api/makeArbitraryRf/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeArbitraryRf/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>signal</code> double A complex-valued vector representing the desired RF pulse shape.  The amplitude of each element corresponds to the RF amplitude at a specific time point. The length of the vector determines the number of time points. <code>[1+1i, 0.5+0.5i, 0, -0.5-0.5i, -1-1i]</code> <code>flip</code> double The desired flip angle of the RF pulse in radians. <code>pi/2</code> radians"},{"location":"matlab_api/makeArbitraryRf/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> A structure containing system parameters (e.g., from mr.opts()). If empty, default system parameters are used. <code>mr.opts()</code> <code>freqOffset</code> double <code>0</code> Frequency offset of the RF pulse in Hz. (Units: Hz) <code>100</code> <code>phaseOffset</code> double <code>0</code> Phase offset of the RF pulse in radians. (Units: radians) <code>pi/4</code> <code>freqPPM</code> double <code>0</code> Frequency offset specified in parts per million (ppm) relative to the Larmor frequency.  Can be combined with 'freqOffset'. (Units: ppm) <code>10</code> <code>phasePPM</code> double <code>0</code> Phase offset specified in ppm relative to the Larmor frequency. Can be combined with 'phaseOffset'. (Units: ppm) <code>5</code> <code>timeBwProduct</code> double <code>0</code> Time-bandwidth product of the pulse. (Relationship to pulse duration and bandwidth depends on pulse shape) (Units: seconds) <code>4</code> <code>bandwidth</code> double <code>0</code> Bandwidth of the RF pulse in Hz. Required for slice-selective gradient calculation. (Units: Hz) <code>10000</code> <code>center</code> double <code>NaN</code> Time point at which pulse is centered. If NaN, pulse is centered at its midpoint. (Units: seconds) <code>0.002</code> <code>maxGrad</code> double <code>0</code> Maximum gradient amplitude in Hz/m.  Used for gradient calculation. (Units: Hz/m) <code>1000</code> <code>maxSlew</code> double <code>0</code> Maximum gradient slew rate in Hz/m/s. Used for gradient calculation. (Units: Hz/m/s) <code>100000</code> <code>sliceThickness</code> double <code>0</code> Thickness of the slice to be excited in meters. Used for gradient calculation. (Units: meters) <code>0.005</code> <code>delay</code> double <code>0</code> Delay before the start of the RF pulse in seconds. (Units: seconds) <code>0.001</code> <code>dwell</code> double <code>0</code> Time resolution (dwell time) of the RF pulse.  If 0, the system's default rfRasterTime is used. (Units: seconds) <code>4e-6</code> <code>use</code> char <code>'u'</code> Specifies the purpose of the pulse ('excitation', 'refocusing', etc.). Valid values: mr.getSupportedRfUse() <code>'excitation'</code>"},{"location":"matlab_api/makeArbitraryRf/#returns","title":"Returns","text":"Output Type Description <code>rf</code> struct A structure containing the RF pulse parameters (signal, timing, frequency/phase offsets, deadtime, ringdownTime, delay, and use). <code>gz</code> struct A structure containing the slice-selective gradient waveform (if bandwidth and sliceThickness are specified). <code>gzr</code> struct Reserved for future use. <code>delay</code> double Delay before the start of the RF pulse in seconds."},{"location":"matlab_api/makeArbitraryRf/#examples","title":"Examples","text":"<pre><code>rf = mr.makeArbitraryRf([1+1i, 0, -1-1i], pi/2, 'bandwidth', 10000, 'sliceThickness', 0.005);\nrf = mr.makeArbitraryRf(sinc_pulse, pi/2, 'freqOffset', 100, 'phaseOffset', pi/4);\n</code></pre>"},{"location":"matlab_api/makeArbitraryRf/#see-also","title":"See Also","text":"<p>Sequence.makeSincPulse, Sequence.addBlock, mr.opts</p>"},{"location":"matlab_api/makeBlockPulse/","title":"makeBlockPulse","text":"<p>Generates a block RF pulse with optional slice-selective capabilities.  The function creates a Pulseq RF pulse object defining the characteristics of the pulse, including amplitude, duration, frequency and phase offsets. It can calculate the duration based on either the provided bandwidth or time-bandwidth product.  It also handles optional parameters for slice selection (gradients) and returns both the RF pulse and a delay object to account for ringdown time.</p>"},{"location":"matlab_api/makeBlockPulse/#syntax","title":"Syntax","text":"<pre><code>function [rf, delay] = makeBlockPulse(flip,varargin)\n</code></pre>"},{"location":"matlab_api/makeBlockPulse/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeBlockPulse(...)\n</code></pre>"},{"location":"matlab_api/makeBlockPulse/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeBlockPulse/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>flip</code> double The flip angle of the RF pulse. <code>pi/2</code> radians"},{"location":"matlab_api/makeBlockPulse/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> System parameters structure (e.g., mr.opts()).  Provides parameters like rfRasterTime, rfDeadTime, rfRingdownTime needed for pulse generation. If empty, default system parameters are used. <code>mr.opts()</code> <code>duration</code> double <code>0</code> Duration of the RF pulse. If 0, it will be calculated from bandwidth or timeBwProduct. (Units: seconds) <code>0.004</code> <code>freqOffset</code> double <code>0</code> Frequency offset of the RF pulse (Hz). (Units: Hz) <code>100</code> <code>phaseOffset</code> double <code>0</code> Phase offset of the RF pulse (radians). (Units: radians) <code>pi/4</code> <code>freqPPM</code> double <code>0</code> Frequency offset in parts per million (ppm) relative to the Larmor frequency. Can be used in addition to freqOffset. (Units: ppm) <code>10</code> <code>phasePPM</code> double <code>0</code> Phase offset in parts per million (ppm) relative to the Larmor frequency. Can be used in addition to phaseOffset. (Units: ppm) <code>5</code> <code>timeBwProduct</code> double <code>0</code> Time-bandwidth product of the RF pulse.  If greater than zero, duration is calculated as timeBwProduct/bandwidth. <code>1</code> <code>bandwidth</code> double <code>0</code> Bandwidth of the RF pulse (Hz). If greater than zero, duration is calculated as 1/(4*bandwidth). (Units: Hz) <code>2500</code> <code>maxGrad</code> double <code>0</code> Maximum gradient amplitude for slice selection (Hz/m). (Units: Hz/m) <code>50e6</code> <code>maxSlew</code> double <code>0</code> Maximum gradient slew rate for slice selection (Hz/m/s). (Units: Hz/m/s) <code>200e6</code> <code>sliceThickness</code> double <code>0</code> Slice thickness for slice selection (meters). (Units: meters) <code>0.005</code> <code>delay</code> double <code>0</code> Additional delay after the RF pulse (seconds). (Units: seconds) <code>0.001</code> <code>use</code> char <code>'u'</code> Specifies the pulse type; affects k-space trajectory calculation.  Must be one of mr.getSupportedRfUse(). Valid values: mr.getSupportedRfUse() <code>'excitation'</code>"},{"location":"matlab_api/makeBlockPulse/#returns","title":"Returns","text":"Output Type Description <code>rf</code> struct Pulseq RF pulse object containing the generated RF pulse parameters. <code>delay</code> struct Pulseq delay object accounting for RF ringdown time."},{"location":"matlab_api/makeBlockPulse/#examples","title":"Examples","text":"<pre><code>rf = mr.makeBlockPulse(pi/2, 'duration', 0.001);\n[rf, delay] = mr.makeBlockPulse(pi/4, 'bandwidth', 1000, 'freqOffset', 100, 'system', mr.opts());\n</code></pre>"},{"location":"matlab_api/makeBlockPulse/#see-also","title":"See Also","text":"<p>Sequence.addBlock, mr.opts, mr.getSupportedRfUse</p>"},{"location":"matlab_api/makeDelay/","title":"makeDelay","text":"<p>Creates a delay event for use in a Pulseq sequence.  This function generates a structure representing a delay block with a specified duration.</p>"},{"location":"matlab_api/makeDelay/#syntax","title":"Syntax","text":"<pre><code>function del = makeDelay(delay)\n</code></pre>"},{"location":"matlab_api/makeDelay/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeDelay(...)\n</code></pre>"},{"location":"matlab_api/makeDelay/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeDelay/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>delay</code> double The duration of the delay in seconds. <code>0.005</code> seconds"},{"location":"matlab_api/makeDelay/#returns","title":"Returns","text":"Output Type Description <code>del</code> struct A structure representing the delay event.  This structure contains the field 'type' with value 'delay' and the field 'delay' containing the specified delay duration."},{"location":"matlab_api/makeDelay/#examples","title":"Examples","text":"<pre><code>delayEvent = mr.makeDelay(0.01); % Creates a 10ms delay\n</code></pre>"},{"location":"matlab_api/makeDelay/#see-also","title":"See Also","text":"<p>Sequence.addBlock</p>"},{"location":"matlab_api/makeDigitalOutputPulse/","title":"makeDigitalOutputPulse","text":"<p>Creates a digital output pulse event, also known as a trigger, for a specified channel.  This function generates a structure defining the trigger parameters to be used within a Pulseq sequence.</p>"},{"location":"matlab_api/makeDigitalOutputPulse/#syntax","title":"Syntax","text":"<pre><code>function trig = makeDigitalOutputPulse(channel, varargin)\n</code></pre>"},{"location":"matlab_api/makeDigitalOutputPulse/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeDigitalOutputPulse(...)\n</code></pre>"},{"location":"matlab_api/makeDigitalOutputPulse/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeDigitalOutputPulse/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>channel</code> char Specifies the output channel for the trigger.  Valid values are 'osc0', 'osc1', and 'ext1'. <code>'osc0'</code>"},{"location":"matlab_api/makeDigitalOutputPulse/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>delay</code> double <code>0</code> Specifies the delay before the trigger starts, in seconds. (Units: seconds) <code>0.001</code> <code>duration</code> double <code>0</code> Specifies the duration of the trigger pulse, in seconds. If smaller than the system's gradRasterTime, it is set to gradRasterTime. (Units: seconds) <code>0.002</code> <code>system</code> struct <code>[]</code> A structure containing system parameters.  If empty, defaults to mr.opts().  Should contain at least gradRasterTime. <code>mr.opts()</code>"},{"location":"matlab_api/makeDigitalOutputPulse/#returns","title":"Returns","text":"Output Type Description <code>trig</code> struct A structure containing the trigger parameters: type ('output'), channel, delay, and duration."},{"location":"matlab_api/makeDigitalOutputPulse/#examples","title":"Examples","text":"<pre><code>trig = mr.makeDigitalOutputPulse('osc0', 'delay', 0.001, 'duration', 0.002);\ntrig = mr.makeDigitalOutputPulse('ext1', 'delay', 0.01);\nmySys = mr.opts('gradRasterTime', 0.0001); trig = mr.makeDigitalOutputPulse('osc1', 'system', mySys);\n</code></pre>"},{"location":"matlab_api/makeDigitalOutputPulse/#see-also","title":"See Also","text":"<p>Sequence.addBlock</p>"},{"location":"matlab_api/makeExtendedTrapezoid/","title":"makeExtendedTrapezoid","text":"<p>Creates an extended trapezoid gradient waveform.  This function allows the definition of a gradient by specifying amplitude values at specific time points. It handles system limits (maxGrad, maxSlew) and ensures that the resulting waveform adheres to the gradient raster of the specified system.  The function can either return an arbitrary gradient object (if <code>convert2arbitrary</code> is true), representing the waveform on a regularly sampled grid, or it can return a gradient with potentially irregular sampling (if <code>convert2arbitrary</code> is false).</p>"},{"location":"matlab_api/makeExtendedTrapezoid/#syntax","title":"Syntax","text":"<pre><code>function grad = makeExtendedTrapezoid(channel, varargin)\n</code></pre>"},{"location":"matlab_api/makeExtendedTrapezoid/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeExtendedTrapezoid(...)\n</code></pre>"},{"location":"matlab_api/makeExtendedTrapezoid/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeExtendedTrapezoid/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>channel</code> char The gradient channel ('x', 'y', or 'z') for the waveform. <code>'x'</code>"},{"location":"matlab_api/makeExtendedTrapezoid/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>times</code> double <code>0</code> A vector of time points specifying the instants at which the gradient amplitudes are defined. Valid values: Must be in ascending order, and all values must be distinct. The last time point must be on a gradient raster. (Units: seconds) <code>[0, 0.001, 0.002, 0.003]</code> <code>amplitudes</code> double <code>0</code> A vector of gradient amplitudes corresponding to the time points in 'times'. Valid values: Must have the same length as 'times'. (Units: Hz/m) <code>[0, 1000, 1000, 0]</code> <code>system</code> struct <code>[]</code> A structure containing system parameters (e.g., from mr.opts()). If empty, default system parameters are used. <code>mr.opts()</code> <code>maxGrad</code> double <code>0</code> Maximum gradient amplitude. If 0, the system's maxGrad is used. (Units: Hz/m) <code>2000</code> <code>maxSlew</code> double <code>0</code> Maximum gradient slew rate. If 0, the system's maxSlew is used. (Units: Hz/m/s) <code>1000000</code> <code>skip_check</code> logical <code>false</code> If true, skips checks for consistency between the first amplitude and the preceding block. Use with caution! <code>true</code> <code>convert2arbitrary</code> logical <code>false</code> If true, converts the gradient to an arbitrary gradient object, resampling it onto a regular grid based on the system's gradient raster time. If false, the gradient is defined with the specified possibly irregular sampling of <code>times</code>. <code>true</code>"},{"location":"matlab_api/makeExtendedTrapezoid/#returns","title":"Returns","text":"Output Type Description <code>grad</code> struct An arbitrary gradient object representing the extended trapezoid waveform.  The structure of this object depends on whether <code>convert2arbitrary</code> is true or false."},{"location":"matlab_api/makeExtendedTrapezoid/#examples","title":"Examples","text":"<pre><code>grad = mr.makeExtendedTrapezoid('x', [0 0.002 0.004], 'times', [0 0.001 0.003], 'amplitudes', [0 2000 0], 'system', mr.opts(), 'maxSlew', 2000000);\n</code></pre>"},{"location":"matlab_api/makeExtendedTrapezoid/#see-also","title":"See Also","text":"<p>Sequence.addBlock, mr.opts, makeTrapezoid, mr.pts2waveform, mr.makeArbitraryGrad</p>"},{"location":"matlab_api/makeExtendedTrapezoidArea/","title":"makeExtendedTrapezoidArea","text":"<p>Generates the shortest possible extended trapezoid gradient waveform with a specified area, starting and ending with optionally non-zero gradient values.  The function uses optimization techniques (fminsearch) to find the optimal gradient amplitude and plateau duration to achieve the desired area while respecting system limits (maximum gradient amplitude and slew rate).</p>"},{"location":"matlab_api/makeExtendedTrapezoidArea/#syntax","title":"Syntax","text":"<pre><code>function [grad, times, amplitudes] = makeExtendedTrapezoidArea(channel, Gs, Ge, A, sys)\n</code></pre>"},{"location":"matlab_api/makeExtendedTrapezoidArea/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeExtendedTrapezoidArea(...)\n</code></pre>"},{"location":"matlab_api/makeExtendedTrapezoidArea/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeExtendedTrapezoidArea/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>channel</code> char The gradient channel ('x', 'y', or 'z') for which to create the waveform. <code>'x'</code> <code>Gs</code> double The starting gradient amplitude. <code>100</code> Hz/m <code>Ge</code> double The ending gradient amplitude. <code>100</code> Hz/m <code>A</code> double The desired area of the extended trapezoid. <code>0.1</code> 1/m <code>sys</code> struct A structure containing system parameters.  Must include fields like 'maxSlew' (maximum slew rate in Hz/m/s), 'gradRasterTime' (gradient raster time in seconds), and 'maxGrad' (maximum gradient amplitude in Hz/m). <code>mr.opts()</code>"},{"location":"matlab_api/makeExtendedTrapezoidArea/#returns","title":"Returns","text":"Output Type Description <code>grad</code> struct A Pulseq gradient waveform structure containing the generated extended trapezoid. <code>times</code> double A vector of time points (in seconds) defining the waveform. <code>amplitudes</code> double A vector of gradient amplitudes (in Hz/m) corresponding to the time points."},{"location":"matlab_api/makeExtendedTrapezoidArea/#examples","title":"Examples","text":"<pre><code>[grad, times, amplitudes] = mr.makeExtendedTrapezoidArea('x', 100, 100, 0.1, mr.opts())\n</code></pre>"},{"location":"matlab_api/makeExtendedTrapezoidArea/#see-also","title":"See Also","text":"<p>mr.makeExtendedTrapezoid</p>"},{"location":"matlab_api/makeGaussPulse/","title":"makeGaussPulse","text":"<p>Generates a Gaussian RF pulse, optionally with slice-selective gradients.  The function creates a Gaussian RF pulse with specified flip angle and duration. It allows for adjustments in frequency and phase offsets (in Hz and radians, or as a percentage of the Larmor frequency in ppm), and includes options for apodization and precise control over bandwidth and time-bandwidth product.  Additionally, it can generate slice-selective gradients (gz) and corresponding refocusing gradients (gzr), given slice thickness and gradient limits (maxGrad, maxSlew).</p>"},{"location":"matlab_api/makeGaussPulse/#syntax","title":"Syntax","text":"<pre><code>function [rf, gz, gzr, delay] = makeGaussPulse(flip,varargin)\n</code></pre>"},{"location":"matlab_api/makeGaussPulse/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeGaussPulse(...)\n</code></pre>"},{"location":"matlab_api/makeGaussPulse/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeGaussPulse/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>flip</code> double Desired flip angle of the RF pulse. <code>pi/2</code> radians"},{"location":"matlab_api/makeGaussPulse/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> Pulseq system structure containing hardware parameters (e.g., from mr.opts()). If empty, uses default system parameters. <code>mr.opts()</code> <code>duration</code> double <code>0</code> Duration of the RF pulse. (Units: seconds) <code>0.004</code> <code>freqOffset</code> double <code>0</code> Frequency offset of the RF pulse in Hz. (Units: Hz) <code>100</code> <code>phaseOffset</code> double <code>0</code> Phase offset of the RF pulse in radians. (Units: radians) <code>pi/4</code> <code>freqPPM</code> double <code>0</code> Frequency offset specified in parts per million (ppm) relative to the Larmor frequency.  Useful for fat saturation. (Units: ppm) <code>-3.3</code> <code>phasePPM</code> double <code>0</code> Phase offset specified in parts per million (ppm) relative to the Larmor frequency. (Units: ppm) <code>0</code> <code>timeBwProduct</code> double <code>3</code> Time-bandwidth product of the Gaussian pulse. <code>4</code> <code>bandwidth</code> double <code>0</code> Bandwidth of the RF pulse in Hz (overrides timeBwProduct if specified). (Units: Hz) <code>1000</code> <code>apodization</code> double <code>0</code> Apodization parameter (0 for no apodization, 1 for full Hamming window). <code>0.5</code> <code>centerpos</code> double <code>0.5</code> Position of the pulse center (0 to 1, where 0 is the beginning and 1 is the end). <code>0.7</code> <code>maxGrad</code> double <code>0</code> Maximum gradient amplitude for slice selection. (Units: Hz/m) <code>300</code> <code>maxSlew</code> double <code>0</code> Maximum gradient slew rate for slice selection. (Units: Hz/m/s) <code>100000</code> <code>sliceThickness</code> double <code>0</code> Thickness of the slice for slice selection. (Units: meters) <code>0.005</code> <code>delay</code> double <code>0</code> Delay before the pulse. (Units: seconds) <code>0.001</code> <code>dwell</code> double <code>0</code> RF pulse dwell time. If 0, it uses the system's default rfRasterTime. (Units: seconds) <code>0.000002</code> <code>use</code> char <code>'u'</code> Specifies the intended use of the RF pulse, for k-space calculation. Valid values: mr.getSupportedRfUse() <code>'excitation'</code>"},{"location":"matlab_api/makeGaussPulse/#returns","title":"Returns","text":"Output Type Description <code>rf</code> struct Pulseq RF pulse definition. <code>gz</code> struct Pulseq slice selection gradient definition. <code>gzr</code> struct Pulseq slice refocusing gradient definition. <code>delay</code> double calculated delay"},{"location":"matlab_api/makeGaussPulse/#examples","title":"Examples","text":"<pre><code>[rf, gz] = mr.makeGaussPulse(pi/2, 'duration', 0.004, 'sliceThickness', 0.005, 'maxGrad', 300, 'maxSlew', 100000);\n</code></pre>"},{"location":"matlab_api/makeGaussPulse/#see-also","title":"See Also","text":"<p><code>gauss</code>, mr.opts, Sequence.addBlock</p>"},{"location":"matlab_api/makeLabel/","title":"makeLabel","text":"<p>Creates a label event for use in Pulseq sequences.  This function generates a structure defining a label that can be added to a Pulseq sequence using <code>Sequence.addBlock</code>.  Labels allow for controlling the execution flow and parameter values within the sequence based on various counters, flags, and control signals.</p>"},{"location":"matlab_api/makeLabel/#syntax","title":"Syntax","text":"<pre><code>function out = makeLabel(type, label, value)\n</code></pre>"},{"location":"matlab_api/makeLabel/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeLabel(...)\n</code></pre>"},{"location":"matlab_api/makeLabel/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeLabel/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>type</code> char Specifies the type of label operation: 'SET' to set a label's value or 'INC' to increment it. <code>'SET'</code> <code>label</code> char Specifies the name of the label.  This should be one of the supported labels (counters, flags, or control signals) returned by <code>mr.getSupportedLabels()</code>. <code>'REP'</code> <code>value</code> double logical Specifies the value for the label.  For counters, this is a numeric value (increments can be negative). For flags, this is a logical value (true/false). <code>10 or true</code>"},{"location":"matlab_api/makeLabel/#returns","title":"Returns","text":"Output Type Description <code>out</code> struct A structure containing the label information.  It has fields 'type' ('labelset' or 'labelinc'), 'label' (the label name), and 'value' (the label value)."},{"location":"matlab_api/makeLabel/#examples","title":"Examples","text":"<pre><code>label1 = mr.makeLabel('SET', 'REP', 10);\nlabel2 = mr.makeLabel('INC', 'SLC', -1);\nlabel3 = mr.makeLabel('SET', 'NAV', true);\n</code></pre>"},{"location":"matlab_api/makeLabel/#see-also","title":"See Also","text":"<p>Sequence.addBlock, mr.getSupportedLabels</p>"},{"location":"matlab_api/makeSLRpulse/","title":"makeSLRpulse","text":"<p>Generates a selective excitation RF pulse using the Shinnar-Le Roux (SLR) algorithm. This function acts as a wrapper for a Python function that utilizes the sigpy library. It designs RF pulses for various applications, including excitation, refocusing, and inversion.</p>"},{"location":"matlab_api/makeSLRpulse/#syntax","title":"Syntax","text":"<pre><code>function [rf, gz, gzr, delay] = makeSLRpulse(flip,varargin)\n</code></pre>"},{"location":"matlab_api/makeSLRpulse/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeSLRpulse(...)\n</code></pre>"},{"location":"matlab_api/makeSLRpulse/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeSLRpulse/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>flip</code> double The desired flip angle of the RF pulse. <code>pi/2</code> radians"},{"location":"matlab_api/makeSLRpulse/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> A structure containing system parameters (e.g., from mr.opts()).  If empty, default parameters will be used. <code>mr.opts()</code> <code>duration</code> double <code>1e-3</code> The duration of the RF pulse. (Units: seconds) <code>0.004</code> <code>freqOffset</code> double <code>0</code> Frequency offset of the RF pulse. (Units: Hz) <code>100</code> <code>phaseOffset</code> double <code>0</code> Phase offset of the RF pulse. (Units: radians) <code>pi/4</code> <code>freqPPM</code> double <code>0</code> Frequency offset in parts per million (ppm). (Units: ppm) <code>10</code> <code>phasePPM</code> double <code>0</code> Phase offset in parts per million (ppm). (Units: ppm) <code>5</code> <code>timeBwProduct</code> double <code>4</code> Time-bandwidth product of the pulse. <code>6</code> <code>passbandRipple</code> double <code>0.01</code> Passband ripple of the filter. <code>0.005</code> <code>stopbandRipple</code> double <code>0.01</code> Stopband ripple of the filter. <code>0.005</code> <code>filterType</code> char <code>'mt'</code> Type of filter used for pulse design ('mt', 'ms', 'pm', 'min', 'max', 'ls'). <code>'ls'</code> <code>apodization</code> double <code>0</code> Apodization parameter (currently not used). <code>0.1</code> <code>centerpos</code> double <code>0.5</code> Center position (currently not used). <code>0.6</code> <code>maxGrad</code> double <code>0</code> Maximum gradient amplitude. (Units: Hz/m) <code>2000</code> <code>maxSlew</code> double <code>0</code> Maximum gradient slew rate. (Units: Hz/m/s) <code>100000</code> <code>sliceThickness</code> double <code>0</code> Slice thickness. (Units: meters) <code>0.005</code> <code>delay</code> double <code>0</code> Additional delay before the pulse. (Units: seconds) <code>0.001</code> <code>dwell</code> double <code>0</code> Dwell time (currently not used). (Units: seconds) <code>0.000001</code> <code>use</code> char <code>'excitation'</code> Pulse type ('excitation', 'refocusing', etc.). <code>'refocusing'</code> <code>pythonCmd</code> char <code>''</code> Python command (currently not used). <code>''</code>"},{"location":"matlab_api/makeSLRpulse/#returns","title":"Returns","text":"Output Type Description <code>rf</code> struct The designed RF pulse (Pulseq sequence). <code>gz</code> struct The slice-selective gradient (Pulseq sequence). <code>gzr</code> struct The refocusing gradient (Pulseq sequence, might be empty). <code>delay</code> double The total delay associated with the pulse"},{"location":"matlab_api/makeSLRpulse/#examples","title":"Examples","text":"<pre><code>[rf, gz, gzr, delay] = mr.makeSLRpulse(pi/2, 'duration', 4e-3, 'system', mr.opts(), 'sliceThickness', 0.005)\n</code></pre>"},{"location":"matlab_api/makeSLRpulse/#see-also","title":"See Also","text":"<p>mr.opts</p>"},{"location":"matlab_api/makeSincPulse/","title":"makeSincPulse","text":"<p>Generates a slice-selective sinc pulse and optionally its corresponding slice selection and refocusing gradients.  It allows for specifying various parameters to control the pulse's characteristics, including flip angle, duration, frequency and phase offsets, and gradient limits.</p>"},{"location":"matlab_api/makeSincPulse/#syntax","title":"Syntax","text":"<pre><code>function [rf, gz, gzr, delay] = makeSincPulse(flip,varargin)\n</code></pre>"},{"location":"matlab_api/makeSincPulse/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeSincPulse(...)\n</code></pre>"},{"location":"matlab_api/makeSincPulse/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeSincPulse/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>flip</code> double Desired flip angle of the RF pulse. <code>pi/2</code> radians"},{"location":"matlab_api/makeSincPulse/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> System limits struct (e.g., from mr.opts()). If empty, uses default system parameters. <code>mr.opts()</code> <code>duration</code> double <code>0</code> Duration of the sinc pulse. (Units: seconds) <code>0.004</code> <code>freqOffset</code> double <code>0</code> Frequency offset of the RF pulse. (Units: Hz) <code>100</code> <code>phaseOffset</code> double <code>0</code> Phase offset of the RF pulse. (Units: radians) <code>pi/4</code> <code>freqPPM</code> double <code>0</code> Frequency offset specified in parts per million (PPM) relative to the Larmor frequency. (Units: ppm) <code>-3.3</code> <code>phasePPM</code> double <code>0</code> Phase offset specified in parts per million (PPM). (Units: ppm) <code>0</code> <code>timeBwProduct</code> double <code>4</code> Time-bandwidth product of the sinc pulse. <code>6</code> <code>apodization</code> double <code>0</code> Apodization factor (0 for rectangular window, 1 for Hamming window). <code>0.5</code> <code>centerpos</code> double <code>0.5</code> Relative position of the pulse center within its duration (0-1). <code>0.7</code> <code>maxGrad</code> double <code>0</code> Maximum gradient amplitude. (Units: Hz/m) <code>100e6</code> <code>maxSlew</code> double <code>0</code> Maximum gradient slew rate. (Units: Hz/m/s) <code>100e6</code> <code>sliceThickness</code> double <code>0</code> Slice thickness for slice-selective excitation. (Units: meters) <code>0.005</code> <code>delay</code> double <code>0</code> Additional delay after the pulse. (Units: seconds) <code>0.001</code> <code>dwell</code> double <code>0</code> RF pulse dwell time (if 0, uses system.rfRasterTime). (Units: seconds) <code>1e-6</code> <code>use</code> char <code>'u'</code> Specifies the pulse use ('u' for excitation, 'r' for refocusing). Valid values: ['u', 'r'] <code>'excitation'</code>"},{"location":"matlab_api/makeSincPulse/#returns","title":"Returns","text":"Output Type Description <code>rf</code> struct Structure containing the RF pulse waveform. <code>gz</code> struct Structure containing the slice-selection gradient waveform (optional). <code>gzr</code> struct Structure containing the slice-refocusing gradient waveform (optional). <code>delay</code> double Delay added after the pulse (seconds)."},{"location":"matlab_api/makeSincPulse/#examples","title":"Examples","text":"<pre><code>[rf, gz] = mr.makeSincPulse(pi/2, 'duration', 0.005, 'sliceThickness', 0.003, 'maxGrad', 40e6, 'maxSlew', 100e6);\n</code></pre>"},{"location":"matlab_api/makeSincPulse/#see-also","title":"See Also","text":"<p>mr.opts, <code>sinc</code></p>"},{"location":"matlab_api/makeSoftDelay/","title":"makeSoftDelay","text":"<p>Creates a soft delay event for use with Pulseq sequences. This event modifies the duration of an empty (pure delay) block within a sequence, allowing for adjustments to timings like TE or TR.  The duration is calculated using the formula: dur = input / factor + offset.  This function is typically used in conjunction with <code>Sequence.addBlock()</code> and <code>Sequence.applySoftDelay()</code>.</p>"},{"location":"matlab_api/makeSoftDelay/#syntax","title":"Syntax","text":"<pre><code>function sd = makeSoftDelay(varargin)\n</code></pre>"},{"location":"matlab_api/makeSoftDelay/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeSoftDelay(...)\n</code></pre>"},{"location":"matlab_api/makeSoftDelay/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeSoftDelay/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>numID</code> double A numeric ID that uniquely identifies this soft delay event.  It's used to link this event to specific blocks within the sequence. <code>1</code> <code>hint</code> char A string hint associated with the soft delay event. This hint should be unique for each numID to distinguish between different types of delays. <code>TE_adjust</code>"},{"location":"matlab_api/makeSoftDelay/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>offset</code> double <code>0</code> A constant offset added to the calculated delay duration.  This can be used to fine-tune the delay. Valid values: Any numeric value (positive or negative) (Units: seconds) <code>0.001</code> <code>factor</code> double <code>1</code> A scaling factor applied to the input value before adding the offset.  This allows for scaling of the delay. Valid values: Any numeric value (positive or negative) <code>2</code>"},{"location":"matlab_api/makeSoftDelay/#returns","title":"Returns","text":"Output Type Description <code>sd</code> struct A structure containing the parameters of the created soft delay event. This structure is then used with <code>Sequence.applySoftDelay()</code> to apply the delay to the sequence."},{"location":"matlab_api/makeSoftDelay/#examples","title":"Examples","text":"<pre><code>sd = mr.makeSoftDelay(1, 'TE_adjust', 'offset', 0.002, 'factor', 0.5);\nsd = mr.makeSoftDelay(2, 'TR_adjust');\n</code></pre>"},{"location":"matlab_api/makeSoftDelay/#see-also","title":"See Also","text":"<p>Sequence.addBlock, Sequence.applySoftDelay</p>"},{"location":"matlab_api/makeTrapezoid/","title":"makeTrapezoid","text":"<p>Generates a trapezoidal gradient waveform for a specified channel in a Pulseq sequence.  The function offers flexibility in defining the waveform, allowing specification through various parameter combinations: total duration and area, flat-top duration and area, or amplitude.  It automatically calculates the necessary ramp times based on system limits (maxSlew, maxGrad) if not explicitly provided.  The function handles different scenarios and input combinations, ensuring a valid trapezoidal waveform is produced.</p>"},{"location":"matlab_api/makeTrapezoid/#syntax","title":"Syntax","text":"<pre><code>function grad=makeTrapezoid(channel, varargin)\n</code></pre>"},{"location":"matlab_api/makeTrapezoid/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeTrapezoid(...)\n</code></pre>"},{"location":"matlab_api/makeTrapezoid/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeTrapezoid/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>channel</code> char Specifies the gradient channel ('x', 'y', or 'z') for the trapezoid. <code>'x'</code>"},{"location":"matlab_api/makeTrapezoid/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> A structure containing system limits (e.g., maxSlew, maxGrad, gradRasterTime). If empty, defaults to mr.opts(). <code>mr.opts()</code> <code>duration</code> double <code>0</code> Total duration of the trapezoid, including ramps.  Must be &gt; 0 when used. (Units: seconds) <code>0.005</code> <code>area</code> double <code>[]</code> Total area of the trapezoid, including ramps. (Units: 1/m) <code>0.01</code> <code>flatTime</code> double <code>[]</code> Duration of the flat-top portion of the trapezoid. (Units: seconds) <code>0.003</code> <code>flatArea</code> double <code>[]</code> Area of the flat-top portion of the trapezoid (excluding ramps). (Units: 1/m) <code>0.008</code> <code>amplitude</code> double <code>[]</code> Amplitude of the flat-top portion of the trapezoid. (Units: Hz/m) <code>1000</code> <code>maxGrad</code> double <code>0</code> Maximum gradient amplitude allowed. If not specified, defaults to system.maxGrad. (Units: Hz/m) <code>2000</code> <code>maxSlew</code> double <code>0</code> Maximum gradient slew rate allowed. If not specified, defaults to system.maxSlew. (Units: Hz/m/s) <code>200000</code> <code>riseTime</code> double <code>0</code> Time it takes for the gradient to rise to its amplitude. If not specified, it will be calculated based on maxSlew and amplitude. (Units: seconds) <code>0.001</code> <code>fallTime</code> double <code>0</code> Time it takes for the gradient to fall from its amplitude to zero. If not specified, it will be equal to riseTime. (Units: seconds) <code>0.001</code> <code>delay</code> double <code>0</code> Delay before the trapezoid starts. (Units: seconds) <code>0.002</code>"},{"location":"matlab_api/makeTrapezoid/#returns","title":"Returns","text":"Output Type Description <code>grad</code> struct A Pulseq gradient waveform structure representing the trapezoid."},{"location":"matlab_api/makeTrapezoid/#examples","title":"Examples","text":"<pre><code>grad = mr.makeTrapezoid('x', 'duration', 0.005, 'area', 0.01);\ngrad = mr.makeTrapezoid('y', 'flatTime', 0.003, 'flatArea', 0.008, 'maxGrad', 2000);\ngrad = mr.makeTrapezoid('z', 'amplitude', 1000, 'maxSlew', 150000);\n</code></pre>"},{"location":"matlab_api/makeTrapezoid/#see-also","title":"See Also","text":"<p>Sequence.addBlock, mr.opts</p>"},{"location":"matlab_api/makeTrigger/","title":"makeTrigger","text":"<p>Creates a trigger event for synchronization with an external signal.  This function generates a structure defining a trigger event for use within a Pulseq sequence.  It specifies the trigger channel, delay before the trigger, and duration after the trigger.  The duration is constrained to be at least as long as the system's gradient raster time.</p>"},{"location":"matlab_api/makeTrigger/#syntax","title":"Syntax","text":"<pre><code>function trig = makeTrigger(channel, varargin)\n</code></pre>"},{"location":"matlab_api/makeTrigger/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeTrigger(...)\n</code></pre>"},{"location":"matlab_api/makeTrigger/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeTrigger/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>channel</code> char The channel to use for the trigger.  Valid values are 'physio1' and 'physio2' (Siemens-specific). <code>'physio1'</code>"},{"location":"matlab_api/makeTrigger/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>delay</code> double <code>0</code> The delay (in seconds) before the trigger event starts. (Units: seconds) <code>0.001</code> <code>duration</code> double <code>0</code> The duration (in seconds) of the trigger event.  If shorter than the system's gradient raster time, it is automatically adjusted to match the raster time. (Units: seconds) <code>0.005</code> <code>system</code> struct <code>[]</code> A structure containing system parameters (e.g., from mr.opts()). If not provided, mr.opts() is used. <code>mr.opts()</code>"},{"location":"matlab_api/makeTrigger/#returns","title":"Returns","text":"Output Type Description <code>trig</code> struct A structure defining the trigger event. Contains fields: type ('trigger'), channel (the selected channel), delay (delay before trigger), and duration (duration of trigger)."},{"location":"matlab_api/makeTrigger/#examples","title":"Examples","text":"<pre><code>trig = mr.makeTrigger('physio1', 'delay', 0.01, 'duration', 0.02);\ntrig = mr.makeTrigger('physio2');\nmySys = mr.opts('MaxGrad', 40); trig = mr.makeTrigger('physio1','system',mySys);\n</code></pre>"},{"location":"matlab_api/makeTrigger/#see-also","title":"See Also","text":"<p>Sequence.addBlock, mr.opts</p>"},{"location":"matlab_api/modGradAxis/","title":"modGradAxis","text":"<p>This function modifies the amplitude of gradient events along a specified axis ('x', 'y', or 'z') within a Pulseq sequence.  It scales all gradient events on the selected axis by a given modifier.  It handles both single- and multi-point gradient events.  The function operates on the gradient events that have already been added to the sequence object's gradient library.</p>"},{"location":"matlab_api/modGradAxis/#syntax","title":"Syntax","text":"<pre><code>function modGradAxis(axis,modifier)\n</code></pre>"},{"location":"matlab_api/modGradAxis/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.modGradAxis(...)\n</code></pre>"},{"location":"matlab_api/modGradAxis/#parameters","title":"Parameters","text":""},{"location":"matlab_api/modGradAxis/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>axis</code> char The axis ('x', 'y', or 'z') along which to modify the gradient amplitudes. <code>'x'</code> <code>modifier</code> double The scaling factor applied to the gradient amplitudes on the specified axis.  A value of -1 inverts the gradients. <code>-1</code>"},{"location":"matlab_api/modGradAxis/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>trajectory_delay</code> double <code>0</code> This parameter seems unused in the provided code excerpt.  Its purpose is unclear. (Units: seconds) <code>0.001</code>"},{"location":"matlab_api/modGradAxis/#returns","title":"Returns","text":"Output Type Description <code>none</code> none This function modifies the sequence object in place and does not return any values."},{"location":"matlab_api/modGradAxis/#examples","title":"Examples","text":"<pre><code>seq.modGradAxis('x', 2); % Doubles the amplitude of all x-gradients\nseq.modGradAxis('y', -1); % Inverts the amplitude of all y-gradients\n</code></pre>"},{"location":"matlab_api/modGradAxis/#see-also","title":"See Also","text":"<p>flipGradAxis</p>"},{"location":"matlab_api/multiply/","title":"multiply","text":"<p>This function calculates the product of two quaternions.  A quaternion is represented as a 1x4 vector, where the first element is the scalar part and the remaining three elements represent the vector part. The function can handle single quaternions (1x4 vectors) or collections of quaternions (Nx4 matrices).</p>"},{"location":"matlab_api/multiply/#syntax","title":"Syntax","text":"<pre><code>function qout = multiply(q1,q2)\n</code></pre>"},{"location":"matlab_api/multiply/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.aux.quat.multiply(...)\n</code></pre>"},{"location":"matlab_api/multiply/#parameters","title":"Parameters","text":""},{"location":"matlab_api/multiply/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>q1</code> double The first quaternion or a collection of quaternions.  Each quaternion is represented as a 1x4 vector or row in an Nx4 matrix. <code>[1, 0, 0, 0]</code> <code>q2</code> double The second quaternion or a collection of quaternions.  Must have the same number of rows as q1 if q1 is an Nx4 matrix. Each quaternion is represented as a 1x4 vector or row in an Nx4 matrix. <code>[0, 1, 0, 0]</code>"},{"location":"matlab_api/multiply/#returns","title":"Returns","text":"Output Type Description <code>qout</code> double The resulting quaternion or collection of quaternions representing the product of q1 and q2. The output will have the same dimensions as the input quaternions."},{"location":"matlab_api/multiply/#examples","title":"Examples","text":"<pre><code>qout = mr.aux.quat.multiply([1, 0, 0, 0], [0, 1, 0, 0]);\nqout = mr.aux.quat.multiply([1, 0, 0, 0; 0, 1, 0, 0], [0, 1, 0, 0; 0, 0, 1, 0]);\n</code></pre>"},{"location":"matlab_api/normalize/","title":"normalize","text":"<p>This function normalizes a quaternion or an array of quaternions.  It scales each quaternion to have a unit norm (magnitude of 1).  Quaternions with a norm of zero are left unchanged.</p>"},{"location":"matlab_api/normalize/#syntax","title":"Syntax","text":"<pre><code>function q = normalize(q)\n</code></pre>"},{"location":"matlab_api/normalize/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.aux.quat.normalize(...)\n</code></pre>"},{"location":"matlab_api/normalize/#parameters","title":"Parameters","text":""},{"location":"matlab_api/normalize/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>q</code> double A quaternion or an array of quaternions. Each quaternion is represented as a row vector of four elements [w, x, y, z]. <code>[0.707, 0, 0, 0.707]</code>"},{"location":"matlab_api/normalize/#returns","title":"Returns","text":"Output Type Description <code>q</code> double The normalized quaternion or array of quaternions.  Each quaternion will have a magnitude of approximately 1 (or remain unchanged if the original magnitude was zero)."},{"location":"matlab_api/normalize/#examples","title":"Examples","text":"<pre><code>q_normalized = mr.aux.quat.normalize([1, 2, 3, 4]);\nq_array_normalized = mr.aux.quat.normalize([0.707, 0, 0, 0.707; 0, 0.707, 0, 0.707]);\n</code></pre>"},{"location":"matlab_api/opts/","title":"opts","text":"<p>Sets gradient limits and other system properties of the MR system.  It allows users to define or retrieve system parameters such as maximum gradient strength, slew rate, RF pulse parameters, and timing parameters. The function uses an input parser for flexible parameter specification and incorporates default values for system characteristics.</p>"},{"location":"matlab_api/opts/#syntax","title":"Syntax","text":"<pre><code>function out=opts(varargin)\n</code></pre>"},{"location":"matlab_api/opts/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.opts(...)\n</code></pre>"},{"location":"matlab_api/opts/#parameters","title":"Parameters","text":""},{"location":"matlab_api/opts/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>gradUnit</code> string <code>validGradUnits{1}</code> Specifies the units for maximum gradient amplitude.  Must be one of the validGradUnits. Valid values: ['Hz/m', 'mT/m', 'rad/ms/mm'] <code>'mT/m'</code> <code>slewUnit</code> string <code>validSlewUnits{1}</code> Specifies the units for maximum slew rate. Must be one of the validSlewUnits. Valid values: ['Hz/m/s', 'mT/m/ms', 'T/m/s', 'rad/ms/mm/ms'] <code>'T/m/s'</code> <code>b1Unit</code> string <code>validB1Units{1}</code> Specifies the units for maximum B1 amplitude. Must be one of the validB1Units. Valid values: ['Hz', 'T', 'mT', 'uT'] <code>'uT'</code> <code>maxGrad</code> double <code>[]</code> Specifies the maximum gradient amplitude. (Units: Hz/m) <code>40</code> <code>maxSlew</code> double <code>[]</code> Specifies the maximum gradient slew rate. (Units: Hz/m/s) <code>170</code> <code>maxB1</code> double <code>[]</code> Specifies the maximum RF amplitude. (Units: Hz) <code>20</code> <code>riseTime</code> double <code>[]</code> Specifies the rise time of the gradient waveforms. (Units: seconds) <code>0.001</code> <code>rfDeadTime</code> double <code>defaultOpts.rfDeadTime</code> Specifies the dead time after an RF pulse. (Units: seconds) <code>0</code> <code>rfRingdownTime</code> double <code>defaultOpts.rfRingdownTime</code> Specifies the ringdown time after an RF pulse. (Units: seconds) <code>0</code> <code>adcDeadTime</code> double <code>defaultOpts.adcDeadTime</code> Specifies the dead time after ADC sampling. (Units: seconds) <code>0</code> <code>adcRasterTime</code> double <code>defaultOpts.adcRasterTime</code> Specifies the raster time for ADC sampling. (Units: seconds) <code>100e-9</code> <code>rfRasterTime</code> double <code>defaultOpts.rfRasterTime</code> Specifies the raster time for RF pulses. (Units: seconds) <code>1e-6</code> <code>gradRasterTime</code> double <code>defaultOpts.gradRasterTime</code> Specifies the raster time for gradient waveforms. (Units: seconds) <code>10e-6</code> <code>blockDurationRaster</code> double <code>defaultOpts.blockDurationRaster</code> Specifies the raster time for a block of events. (Units: seconds) <code>10e-6</code> <code>adcSamplesLimit</code> double <code>defaultOpts.adcSamplesLimit</code> Specifies the maximum number of ADC samples. <code>0</code> <code>rfSamplesLimit</code> double <code>defaultOpts.rfSamplesLimit</code> Specifies the maximum number of RF samples. <code>0</code> <code>adcSamplesDivisor</code> double <code>defaultOpts.adcSamplesDivisor</code> Specifies the divisor for ADC samples. The actual number of samples should be an integer multiple of this divisor. <code>4</code> <code>gamma</code> double <code>defaultOpts.gamma</code> Specifies the gyromagnetic ratio. (Units: Hz/T) <code>42576000</code> <code>B0</code> double <code>defaultOpts.B0</code> Specifies the main magnetic field strength. (Units: T) <code>1.5</code> <code>setAsDefault</code> logical <code>false</code> If true, sets the specified parameters as the new default options. <code>true</code>"},{"location":"matlab_api/opts/#returns","title":"Returns","text":"Output Type Description <code>out</code> struct A structure containing the system parameters."},{"location":"matlab_api/opts/#examples","title":"Examples","text":"<pre><code>mr.opts('maxGrad',30,'gradUnit','mT/m')\nmr.opts()\nmyOpts = mr.opts('maxSlew', 200, 'slewUnit', 'T/m/s');\n</code></pre>"},{"location":"matlab_api/opts/#see-also","title":"See Also","text":"<p>mr.convert</p>"},{"location":"matlab_api/paperPlot/","title":"paperPlot","text":"<p>This helper function generates a plot of a Pulseq sequence in a style suitable for scientific publications. It allows customization of various aspects of the plot's appearance, such as line width, axes color, and the colors of different gradient and RF components.</p>"},{"location":"matlab_api/paperPlot/#syntax","title":"Syntax","text":"<pre><code>function sp = paperPlot(varargin)\n</code></pre>"},{"location":"matlab_api/paperPlot/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.paperPlot(...)\n</code></pre>"},{"location":"matlab_api/paperPlot/#parameters","title":"Parameters","text":""},{"location":"matlab_api/paperPlot/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>blockRange</code> numeric array <code>[1 inf]</code> Specifies the range of blocks in the sequence to be plotted.  It's a two-element vector [first last], where 'first' and 'last' are the indices of the first and last blocks to include, respectively. Defaults to plotting the entire sequence. Valid values: Two-element numeric array <code>[5 10]</code> <code>lineWidth</code> double <code>1.2</code> Specifies the width of the lines used in the plot. Valid values: Positive numeric value <code>2.0</code> <code>axesColor</code> char or 1x3 numeric array <code>[0.5 0.5 0.5]</code> Specifies the color of the horizontal axes. Can be a standard color name (e.g., 'red', 'blue'), a hexadecimal RGB string (e.g., '#FF0000'), or a 1x3 vector of RGB values (e.g., [1 0 0]). Valid values: Valid MATLAB color specification <code>'black'</code> <code>rfColor</code> char or 1x3 numeric array <code>'black'</code> Specifies the color of the RF and ADC events in the plot.  Uses the same color specification as axesColor. Valid values: Valid MATLAB color specification <code>[0 1 0]</code> <code>gxColor</code> char or 1x3 numeric array <code>'blue'</code> Specifies the color of the X gradients in the plot. Uses the same color specification as axesColor. Valid values: Valid MATLAB color specification <code>'red'</code> <code>gyColor</code> char or 1x3 numeric array <code>'red'</code> Specifies the color of the Y gradients in the plot. Uses the same color specification as axesColor. Valid values: Valid MATLAB color specification <code>'green'</code> <code>gzColor</code> char or 1x3 numeric array <code>[0 0.5 0.3]</code> Specifies the color of the Z gradients in the plot. Uses the same color specification as axesColor. Valid values: Valid MATLAB color specification <code>'cyan'</code> <code>rfPlot</code> char <code>'abs'</code> Specifies how RF pulses are plotted: 'abs' for the magnitude, 'real' for the real part, or 'imag' for the imaginary part. Valid values: 'abs', 'real', 'imag' <code>'real'</code>"},{"location":"matlab_api/paperPlot/#returns","title":"Returns","text":"Output Type Description <code>sp</code> double Handle to the generated figure."},{"location":"matlab_api/paperPlot/#examples","title":"Examples","text":"<pre><code>sp = seq.paperPlot();\nsp = seq.paperPlot('blockRange', [10 20], 'lineWidth', 2, 'rfColor', 'red');\n</code></pre>"},{"location":"matlab_api/plot/","title":"plot","text":"<p>This function plots a Pulseq sequence object in a new figure.  It offers various options to control the appearance and content of the plot, including specifying time ranges, block ranges, color schemes, and display units for time. The function can also produce stacked plots and include dynamic guides for verifying event alignment. It utilizes the mr.aux.SeqPlot class internally for the actual plotting functionality.</p>"},{"location":"matlab_api/plot/#syntax","title":"Syntax","text":"<pre><code>function sp = plot(varargin)\n</code></pre>"},{"location":"matlab_api/plot/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.plot(...)\n</code></pre>"},{"location":"matlab_api/plot/#parameters","title":"Parameters","text":""},{"location":"matlab_api/plot/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>blockRange</code> numeric <code>[1 inf]</code> Specifies the range of blocks in the sequence to be plotted.  A two-element vector [first last] indicating the first and last block indices to include. Defaults to plotting all blocks. <code>[5 10]</code> <code>lineWidth</code> double <code>1.2</code> Specifies the line width for the plotted waveforms. <code>2.0</code> <code>axesColor</code> numeric <code>[0.5 0.5 0.5]</code> Sets the color of the horizontal axes. A three-element RGB vector. <code>[0.8 0.2 0.2]</code> <code>rfColor</code> char <code>'black'</code> Specifies the color of the RF and ADC events. <code>'red'</code> <code>gxColor</code> char <code>'blue'</code> Specifies the color of the X gradients. <code>'green'</code> <code>gyColor</code> char <code>'red'</code> Specifies the color of the Y gradients. <code>'magenta'</code> <code>gzColor</code> numeric <code>[0 0.5 0.3]</code> Specifies the color of the Z gradients. A three-element RGB vector. <code>[0.5 0 0.8]</code> <code>rfPlot</code> char <code>'abs'</code> Specifies how RF pulses are plotted: 'abs' (absolute value), 'real' (real part), or 'imag' (imaginary part). Valid values: 'abs', 'real', 'imag' <code>'real'</code> <code>timeRange</code> numeric <code>[]</code> Specifies the time range to plot. A two-element vector [start stop] defining the start and end times in seconds. (Units: seconds) <code>[0.01 0.05]</code> <code>timeDisp</code> char <code>[]</code> Specifies the units for time display: 's', 'ms', or 'us'. Valid values: 's', 'ms', 'us' <code>'ms'</code> <code>label</code> char <code>[]</code> Specifies which ADC event labels to plot. A comma-separated string of label names. <code>'LIN,REP'</code> <code>showBlocks</code> logical numeric <code>0</code> If true (or 1), plots grid and tick labels at block boundaries. <code>stacked</code> logical numeric <code>0</code> If true (or 1), arranges plots vertically in a stacked layout sharing the same x-axis. <code>showGuides</code> logical numeric <code>0</code> If true (or 1), displays dynamic hairline guides that follow the data cursor to aid in verifying event alignment."},{"location":"matlab_api/plot/#returns","title":"Returns","text":"Output Type Description <code>sp</code> object A handle to the figure created by the plot function; returned only if one output argument is requested."},{"location":"matlab_api/plot/#examples","title":"Examples","text":"<pre><code>seq.plot()\nseq.plot('timeRange', [0.01 0.05], 'showBlocks', 1)\nf = seq.plot('stacked', true, 'label', 'LIN,REP')\n</code></pre>"},{"location":"matlab_api/plot/#see-also","title":"See Also","text":"<p>mr.aux.SeqPlot, paperPlot</p>"},{"location":"matlab_api/pts2waveform/","title":"pts2waveform","text":"<p>This function interpolates a set of points (times, amplitudes) to generate a waveform with a specified gradient raster time.  It takes time points and corresponding amplitude values as input, and outputs a waveform sampled at the specified raster time. The interpolation ensures a smooth waveform consistent with the gradient hardware's resolution.</p>"},{"location":"matlab_api/pts2waveform/#syntax","title":"Syntax","text":"<pre><code>function waveform = pts2waveform(times, amplitudes, gradRasterTime)\n</code></pre>"},{"location":"matlab_api/pts2waveform/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.pts2waveform(...)\n</code></pre>"},{"location":"matlab_api/pts2waveform/#parameters","title":"Parameters","text":""},{"location":"matlab_api/pts2waveform/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>times</code> double A vector of time points at which the amplitudes are defined. <code>[0, 0.001, 0.002]</code> seconds <code>amplitudes</code> double A vector of amplitude values corresponding to the time points in 'times'. <code>[0, 100, 0]</code> Hz/m <code>gradRasterTime</code> double The time resolution of the gradient waveform. The output waveform will be sampled at this interval. <code>0.0001</code> seconds"},{"location":"matlab_api/pts2waveform/#returns","title":"Returns","text":"Output Type Description <code>waveform</code> double A vector representing the interpolated gradient waveform, sampled at the specified 'gradRasterTime'."},{"location":"matlab_api/pts2waveform/#examples","title":"Examples","text":"<pre><code>waveform = mr.pts2waveform([0, 0.001, 0.002], [0, 100, 0], 0.0001);\n</code></pre>"},{"location":"matlab_api/read/","title":"read","text":"<p>Loads a Pulseq sequence from a specified file into a sequence object.  The function reads definitions, signature information, and sequence data from the file, populating the object's properties accordingly.  It handles optional parameters to detect RF pulse usage and provides error handling for file opening.</p>"},{"location":"matlab_api/read/#syntax","title":"Syntax","text":"<pre><code>function read(filename,varargin)\n</code></pre>"},{"location":"matlab_api/read/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.read(...)\n</code></pre>"},{"location":"matlab_api/read/#parameters","title":"Parameters","text":""},{"location":"matlab_api/read/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>filename</code> char <code>N/A</code> The name of the file containing the Pulseq sequence data. <code>'my_sequences/gre.seq'</code> <code>major</code> double <code>N/A</code> Not explicitly used in provided code, likely part of version information (unused). Valid values: N/A <code>1</code> <code>minor</code> double <code>N/A</code> Not explicitly used in provided code, likely part of version information (unused). Valid values: N/A <code>0</code> <code>revision</code> double <code>N/A</code> Not explicitly used in provided code, likely part of version information (unused). Valid values: N/A <code>0</code>"},{"location":"matlab_api/read/#returns","title":"Returns","text":"Output Type Description <code>none</code> none The function modifies the input <code>obj</code> directly.  It does not return a value."},{"location":"matlab_api/read/#examples","title":"Examples","text":"<pre><code>seq.read('my_sequences/gre.seq')\nseq.read('my_sequences/gre.seq', 'detectRFuse')\n</code></pre>"},{"location":"matlab_api/read/#see-also","title":"See Also","text":"<p>write</p>"},{"location":"matlab_api/readBinary/","title":"readBinary","text":"<p>Loads a Pulseq sequence from a binary file.  This function reads a binary file containing a Pulseq sequence and populates a Pulseq sequence object with the data.  The binary file format is described in the Pulseq specification at http://pulseq.github.io.  The function reads various sections of the binary file, including definitions, blocks, RF pulses, gradients, ADC events, delays, and shapes, and stores them in the appropriate fields of the sequence object.</p>"},{"location":"matlab_api/readBinary/#syntax","title":"Syntax","text":"<pre><code>function readBinary(filename)\n</code></pre>"},{"location":"matlab_api/readBinary/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.readBinary(...)\n</code></pre>"},{"location":"matlab_api/readBinary/#parameters","title":"Parameters","text":""},{"location":"matlab_api/readBinary/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>filename</code> string The path to the binary file containing the Pulseq sequence. <code>'sequences/gre.bin'</code>"},{"location":"matlab_api/readBinary/#examples","title":"Examples","text":"<pre><code>seq.readBinary('sequences/gre.bin')\n</code></pre>"},{"location":"matlab_api/readBinary/#see-also","title":"See Also","text":"<p>writeBinary</p>"},{"location":"matlab_api/readasc/","title":"readasc","text":"<p>Reads Siemens ASC ASCII-formatted text files and returns a MATLAB structure containing the data.  Handles files that may be split into two parts (e.g., ####.asc and ####_GSWD_SAFETY.asc), merging the data from both if found.</p>"},{"location":"matlab_api/readasc/#syntax","title":"Syntax","text":"<pre><code>function [asc, extra] = readasc(filePathBasic)\n</code></pre>"},{"location":"matlab_api/readasc/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.Siemens.readasc(...)\n</code></pre>"},{"location":"matlab_api/readasc/#parameters","title":"Parameters","text":""},{"location":"matlab_api/readasc/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>filePathBasic</code> string The base path and filename of the Siemens ASC file (e.g., 'path/to/file.asc'). The function will automatically check for a corresponding '_GSWD_SAFETY' file if it exists. <code>'path/to/my_scan.asc'</code>"},{"location":"matlab_api/readasc/#returns","title":"Returns","text":"Output Type Description <code>asc</code> struct A MATLAB structure containing the data read from the ASC file(s). Field names and values correspond to the parameters defined in the ASC file. <code>extra</code> struct This output is currently not used by the provided code excerpt.  It might be used for additional extracted information in the full function implementation."},{"location":"matlab_api/readasc/#examples","title":"Examples","text":"<pre><code>myAsc = mr.Siemens.readasc('path/to/my_scan.asc');\n[prot, yaps] = mr.Siemens.readasc('path/to/another_scan.asc');\n</code></pre>"},{"location":"matlab_api/registerGradEvent/","title":"registerGradEvent","text":"<p>Pre-registers a gradient event in the sequence object's library for performance optimization. This method stores gradient events (trapezoids or arbitrary gradients) in an internal library and returns a unique ID that can be used for fast event retrieval in loops. This significantly accelerates sequence assembly when the same gradient event is used multiple times.</p>"},{"location":"matlab_api/registerGradEvent/#syntax","title":"Syntax","text":"<pre><code>function [id, shapeIDs] = registerGradEvent(event)\n</code></pre>"},{"location":"matlab_api/registerGradEvent/#calling-pattern","title":"Calling Pattern","text":"<pre><code>[id, shapeIDs] = seq.registerGradEvent(gradientEvent)\n</code></pre>"},{"location":"matlab_api/registerGradEvent/#parameters","title":"Parameters","text":""},{"location":"matlab_api/registerGradEvent/#required-parameters","title":"Required Parameters","text":"Name Type Default Description Example <code>event</code> struct A gradient event structure created by makeTrapezoid, makeArbitraryGrad, or scaleGrad <code>makeTrapezoid('x', 'Area', 1e-4)</code>"},{"location":"matlab_api/registerGradEvent/#returns","title":"Returns","text":"Output Type Description <code>id</code> double Unique identifier for the registered gradient event in the library <code>shapeIDs</code> array Array of shape IDs for gradient waveform components (optional output)"},{"location":"matlab_api/registerGradEvent/#usage-notes","title":"Usage Notes","text":"<ul> <li>Pre-registering gradient events is particularly useful in loops where the same gradient is used repeatedly</li> <li>The returned ID can be stored in the event structure as <code>event.id</code> for faster addBlock operations</li> <li>This method automatically handles gradient shape compression for efficient storage</li> <li>Supports both trapezoidal and arbitrary gradient waveforms</li> </ul>"},{"location":"matlab_api/registerGradEvent/#examples","title":"Examples","text":"<pre><code>% From MPRAGE sequence: pre-register objects that do not change while looping\ngslSp.id = seq.registerGradEvent(gslSp);\ngroSp.id = seq.registerGradEvent(groSp);\ngro1.id = seq.registerGradEvent(gro1);\n\n% Pre-register phase-encoding gradients that repeat in the inner loop\ngpe2je = mr.scaleGrad(gpe2, pe2Steps(PEsamp(count)));\ngpe2je.id = seq.registerGradEvent(gpe2je);\ngpe2jr = mr.scaleGrad(gpe2, -pe2Steps(PEsamp(count)));\ngpe2jr.id = seq.registerGradEvent(gpe2jr);\n\n% Use pre-registered gradients in sequence assembly\nfor i = 1:N(ax.n2)  % inner loop for partition encoding\n    if (i == 1)\n        seq.addBlock(rf);\n    else\n        seq.addBlock(rf, groSp, mr.scaleGrad(gpe1, -pe1Steps(i-1)), gpe2jr);\n    end\n    seq.addBlock(adc, gro1, mr.scaleGrad(gpe1, pe1Steps(i)), gpe2je);\nend\n</code></pre>"},{"location":"matlab_api/registerGradEvent/#see-also","title":"See Also","text":"<p>registerRfEvent, registerLabelEvent, makeTrapezoid, makeArbitraryGrad, scaleGrad, addBlock</p>"},{"location":"matlab_api/registerLabelEvent/","title":"registerLabelEvent","text":"<p>Pre-registers a label event in the sequence object's library for performance optimization. This method stores label events (SET or INC operations) in an internal library and returns a unique ID for fast retrieval. Labels are used for tracking counters, flags, and states during sequence execution, particularly important for parallel imaging (GRAPPA/SENSE) and multi-contrast acquisitions.</p>"},{"location":"matlab_api/registerLabelEvent/#syntax","title":"Syntax","text":"<pre><code>function id = registerLabelEvent(event)\n</code></pre>"},{"location":"matlab_api/registerLabelEvent/#calling-pattern","title":"Calling Pattern","text":"<pre><code>id = seq.registerLabelEvent(labelEvent)\n</code></pre>"},{"location":"matlab_api/registerLabelEvent/#parameters","title":"Parameters","text":""},{"location":"matlab_api/registerLabelEvent/#required-parameters","title":"Required Parameters","text":"Name Type Default Description Example <code>event</code> struct A label event structure created by makeLabel <code>makeLabel('INC', 'LIN', 1)</code>"},{"location":"matlab_api/registerLabelEvent/#returns","title":"Returns","text":"Output Type Description <code>id</code> double Unique identifier for the registered label event in the library"},{"location":"matlab_api/registerLabelEvent/#usage-notes","title":"Usage Notes","text":"<ul> <li>Labels are essential for parallel imaging sequences (GRAPPA, SENSE) to mark reference lines</li> <li>Common labels include: LIN (line number), PAR (partition), REF (reference scan), IMA (image scan)</li> <li>Two operation types: 'SET' (sets a value) and 'INC' (increments by a value)</li> <li>Pre-registering label events improves performance in sequences with complex sampling patterns</li> <li>Labels must be from the list of supported labels (use getSupportedLabels() to see available options)</li> </ul>"},{"location":"matlab_api/registerLabelEvent/#examples","title":"Examples","text":"<pre><code>% From MPRAGE with GRAPPA: pre-register label events\nlblIncPar = mr.makeLabel('INC', 'PAR', 1);\nlblResetPar = mr.makeLabel('SET', 'PAR', 0);\n\n% Set PAT scan flags for GRAPPA\nlblSetRefScan = mr.makeLabel('SET', 'REF', true);\nlblSetRefAndImaScan = mr.makeLabel('SET', 'IMA', true);\nlblResetRefScan = mr.makeLabel('SET', 'REF', false);\nlblResetRefAndImaScan = mr.makeLabel('SET', 'IMA', false);\n\n% Pre-register all label events\nlblSetRefScan.id = seq.registerLabelEvent(lblSetRefScan);\nlblSetRefAndImaScan.id = seq.registerLabelEvent(lblSetRefAndImaScan);\nlblResetRefScan.id = seq.registerLabelEvent(lblResetRefScan);\nlblResetRefAndImaScan.id = seq.registerLabelEvent(lblResetRefAndImaScan);\n\n% Use in GRAPPA acquisition loop\nfor count = 1:nPEsamp  % outer loop for phase encoding\n    % Set PAT labels for every PE line\n    if ismember(PEsamp(count), PEsamp_ACS)\n        if ismember(PEsamp(count), PEsamp_u)\n            seq.addBlock(lblSetRefAndImaScan, lblSetRefScan);\n        else\n            seq.addBlock(lblResetRefAndImaScan, lblSetRefScan);\n        end\n    else\n        seq.addBlock(lblResetRefAndImaScan, lblResetRefScan);\n    end\n\n    % Inner loop with partition encoding counter\n    for i = 1:N(ax.n2)\n        seq.addBlock(rf, groSp, gpe1, gpe2, lblIncPar);  % Increment PAR after ADC\n        seq.addBlock(adc, gro1);\n    end\n    seq.addBlock(lblResetPar);  % Reset partition counter\nend\n\n% Set initial line label\nseq.addBlock(mr.makeLabel('SET', 'LIN', PEsamp(1)-1));\n</code></pre>"},{"location":"matlab_api/registerLabelEvent/#see-also","title":"See Also","text":"<p>registerRfEvent, registerGradEvent, makeLabel, evalLabels, getSupportedLabels, addBlock</p>"},{"location":"matlab_api/registerRfEvent/","title":"registerRfEvent","text":"<p>Pre-registers an RF pulse event in the sequence object's library for performance optimization. This method stores RF pulse events in an internal library and returns a unique ID that can be used for fast event retrieval. Additionally, it returns shape IDs for the magnitude, phase, and time components of the RF pulse, which can be reused to avoid redundant shape compression operations.</p>"},{"location":"matlab_api/registerRfEvent/#syntax","title":"Syntax","text":"<pre><code>function [id, shapeIDs] = registerRfEvent(event)\n</code></pre>"},{"location":"matlab_api/registerRfEvent/#calling-pattern","title":"Calling Pattern","text":"<pre><code>[id, shapeIDs] = seq.registerRfEvent(rfEvent)\n</code></pre>"},{"location":"matlab_api/registerRfEvent/#parameters","title":"Parameters","text":""},{"location":"matlab_api/registerRfEvent/#required-parameters","title":"Required Parameters","text":"Name Type Default Description Example <code>event</code> struct An RF pulse event structure created by makeSincPulse, makeBlockPulse, makeGaussPulse, makeAdiabaticPulse, etc. <code>makeSincPulse(pi/2, 'Duration', 1e-3)</code>"},{"location":"matlab_api/registerRfEvent/#returns","title":"Returns","text":"Output Type Description <code>id</code> double Unique identifier for the registered RF event in the library <code>shapeIDs</code> array Array of three shape IDs: [magnitude_shape_id, phase_shape_id, time_shape_id]"},{"location":"matlab_api/registerRfEvent/#usage-notes","title":"Usage Notes","text":"<ul> <li>Pre-registering RF events is essential for sequences with phase cycling or RF spoiling</li> <li>The shapeIDs output can be stored in the RF event structure to avoid recomputing shapes</li> <li>The method automatically handles RF pulse compression and normalization</li> <li>Required 'use' parameter must be specified in the RF event (excitation, refocusing, inversion, etc.)</li> <li>Phase values are automatically normalized to 0-2\u03c0 range</li> </ul>"},{"location":"matlab_api/registerRfEvent/#examples","title":"Examples","text":"<pre><code>% From MPRAGE sequence: pre-register RF events\n% Only pre-register shapes for RF that will change phase (RF spoiling)\n[~, rf.shapeIDs] = seq.registerRfEvent(rf); % phase will change, only pre-register shapes\n\n% Pre-register complete RF event that won't change\nrf180 = mr.makeAdiabaticPulse('hypsec', sys, 'Duration', 10.24e-3, 'use', 'inversion');\n[rf180.id, rf180.shapeIDs] = seq.registerRfEvent(rf180);\n\n% RF spoiling implementation from MPRAGE\nrfSpoilingInc = 117;  % RF spoiling increment\nrf_phase = 0;\nrf_inc = 0;\n\nfor i = 1:N(ax.n2)  % inner loop\n    rf.phaseOffset = rf_phase/180*pi;  % unit: radian\n    adc.phaseOffset = rf_phase/180*pi;  % unit: radian\n    rf_inc = mod(rf_inc + rfSpoilingInc, 360.0);\n    rf_phase = mod(rf_phase + rf_inc, 360.0);\n\n    seq.addBlock(rf);  % Uses pre-registered shapes\nend\n\n% From 3D Gradient Echo: register RF for phase cycling\nrf = mr.makeBlockPulse(flip*pi/180, 'Duration', Trf, 'system', sys);\n[~, rf.shapeIDs] = seq.registerRfEvent(rf); % register shapes only\n</code></pre>"},{"location":"matlab_api/registerRfEvent/#see-also","title":"See Also","text":"<p>registerGradEvent, registerLabelEvent, makeBlockPulse, makeSincPulse, makeGaussPulse, makeAdiabaticPulse, addBlock</p>"},{"location":"matlab_api/restoreAdditionalShapeSamples/","title":"restoreAdditionalShapeSamples","text":"<p>This function post-processes a gradient waveform, specifically addressing issues that can arise when trapezoidal gradients are converted into arbitrary shapes.  It aims to restore samples at the edges of gradient raster intervals to ensure accuracy.  The function identifies and corrects discrepancies between the reconstructed waveform and the original, particularly important in situations like spiral gradients where small deviations can occur.</p>"},{"location":"matlab_api/restoreAdditionalShapeSamples/#syntax","title":"Syntax","text":"<pre><code>function [tt_chg, waveform_chg] = restoreAdditionalShapeSamples(tt,waveform,first,last,gradRasterTime,iBlock)\n</code></pre>"},{"location":"matlab_api/restoreAdditionalShapeSamples/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.restoreAdditionalShapeSamples(...)\n</code></pre>"},{"location":"matlab_api/restoreAdditionalShapeSamples/#parameters","title":"Parameters","text":""},{"location":"matlab_api/restoreAdditionalShapeSamples/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>tt</code> double Time vector corresponding to the original gradient waveform. <code>[0 0.001 0.002 0.003]</code> seconds <code>waveform</code> double Original gradient waveform amplitude values. <code>[0 100 100 0]</code> Hz/m <code>first</code> double Amplitude of the first sample of the original gradient waveform. <code>0</code> Hz/m <code>last</code> double Amplitude of the last sample of the original gradient waveform. <code>0</code> Hz/m <code>gradRasterTime</code> double Time interval of the gradient raster. <code>0.000001</code> seconds <code>iBlock</code> double Index of the current block (optional, used for warning messages). <code>1</code>"},{"location":"matlab_api/restoreAdditionalShapeSamples/#returns","title":"Returns","text":"Output Type Description <code>tt_chg</code> double Modified time vector after shape restoration. <code>waveform_chg</code> double Modified gradient waveform after shape restoration."},{"location":"matlab_api/restoreAdditionalShapeSamples/#examples","title":"Examples","text":"<pre><code>[tt_chg, waveform_chg] = mr.restoreAdditionalShapeSamples([0 1e-3 2e-3], [0 100 0], 0, 0, 1e-6, 1);\n</code></pre>"},{"location":"matlab_api/rotate/","title":"rotate","text":"<p>Rotates a 3D vector by a given unit quaternion.  The function efficiently implements quaternion rotation using explicit formulas to avoid the overhead of general quaternion multiplication.</p>"},{"location":"matlab_api/rotate/#syntax","title":"Syntax","text":"<pre><code>function r = rotate(q,v)\n</code></pre>"},{"location":"matlab_api/rotate/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.rotate(...)\n</code></pre>"},{"location":"matlab_api/rotate/#parameters","title":"Parameters","text":""},{"location":"matlab_api/rotate/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>q</code> double A unit quaternion representing the rotation.  It should be a 4-element vector or an N x 4 matrix where each row represents a quaternion.  The quaternion should be in the form [scalar, vector_x, vector_y, vector_z]. <code>[1, 0, 0, 0]</code> <code>v</code> double A 3D vector or an N x 3 matrix of 3D vectors to be rotated. Each column represents a component (x, y, z) of the vector. <code>[1; 2; 3]</code>"},{"location":"matlab_api/rotate/#returns","title":"Returns","text":"Output Type Description <code>r</code> double The rotated vector(s).  If 'v' is a 3D vector, 'r' is a 3D vector. If 'v' is an N x 3 matrix, 'r' is an N x 3 matrix where each row represents a rotated vector."},{"location":"matlab_api/rotate/#examples","title":"Examples","text":"<pre><code>r = mr.rotate([1 0 0 0], [1; 0; 0]); % No rotation\n r = mr.rotate([0 1 0 0], [1; 0; 0]); % Rotation by 180 degrees around x-axis\n</code></pre>"},{"location":"matlab_api/rotate3D/","title":"rotate3D","text":"<p>Rotates gradient objects within a Pulseq block using a provided rotation matrix or quaternion.  Non-gradient objects are unaffected.  It accepts either a 3x3 rotation matrix or a unit quaternion (scalar component first). An optional 'system' parameter can specify system limits. The function returns either a cell array or a list of rotated objects, suitable for use with <code>seq.addBlock()</code>.</p>"},{"location":"matlab_api/rotate3D/#syntax","title":"Syntax","text":"<pre><code>function [varargout] = rotate3D(rotation, varargin)\n</code></pre>"},{"location":"matlab_api/rotate3D/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.rotate3D(...)\n</code></pre>"},{"location":"matlab_api/rotate3D/#parameters","title":"Parameters","text":""},{"location":"matlab_api/rotate3D/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>rotation</code> double A 3x3 rotation matrix or a 4-element unit quaternion (scalar component first) specifying the rotation to be applied. <code>[1 0 0; 0 1 0; 0 0 1] or [1 0 0 0]</code>"},{"location":"matlab_api/rotate3D/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> A structure containing system limits (e.g., <code>gradRasterTime</code>, etc.).  Must be placed as the first or last optional argument, preceded or followed by the keyword 'system'. Valid values: Must contain at least 'gradRasterTime' field. <code>struct('gradRasterTime', 4e-6)</code> <code>obj</code> struct cell <code>[]</code> One or more Pulseq gradient objects to be rotated.  Can be a cell array of multiple objects or a sequence of objects. Valid values: Pulseq gradient objects or a cell array of them."},{"location":"matlab_api/rotate3D/#returns","title":"Returns","text":"Output Type Description <code>varargout</code> cell struct"},{"location":"matlab_api/rotate3D/#examples","title":"Examples","text":"<pre><code>[rotatedObjects] = mr.rotate3D([1 0 0; 0 1 0; 0 0 1], grad_x, grad_y, grad_z);\n[rotatedObjects] = mr.rotate3D([0 0 1; 1 0 0; 0 1 0], grad_x, grad_y, 'system', systemStruct);\n[rotatedObjects] = mr.rotate3D([1 0 0 0], {grad_x, grad_y, grad_z});\n</code></pre>"},{"location":"matlab_api/rotate3D/#see-also","title":"See Also","text":"<p>mr.rotate, Sequence.addBlock, mr.aux.quat.toRotMat</p>"},{"location":"matlab_api/scaleGrad/","title":"scaleGrad","text":"<p>Scales a gradient waveform by a given scalar value.  It handles both trapezoidal and arbitrary waveforms. Optionally, it checks the scaled gradient against system limits (maximum gradient amplitude and slew rate) to prevent exceeding hardware capabilities.</p>"},{"location":"matlab_api/scaleGrad/#syntax","title":"Syntax","text":"<pre><code>function [grad] = scaleGrad(grad, scale, system)\n</code></pre>"},{"location":"matlab_api/scaleGrad/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.scaleGrad(...)\n</code></pre>"},{"location":"matlab_api/scaleGrad/#parameters","title":"Parameters","text":""},{"location":"matlab_api/scaleGrad/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>grad</code> struct Structure containing the gradient waveform to be scaled. For trapezoidal gradients, it contains fields like 'amplitude', 'area', 'flatArea', 'riseTime', and 'fallTime'. For arbitrary waveforms, it contains fields like 'waveform' and 'tt'. <code>{type: 'trap', amplitude: 10, area: 0.001, flatArea: 0.0005, riseTime: 0.001, fallTime: 0.001}</code> <code>scale</code> double Scalar value by which to scale the gradient waveform. <code>2.5</code>"},{"location":"matlab_api/scaleGrad/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>N/A</code> Structure containing system limits.  Must contain fields 'maxGrad' (maximum gradient amplitude in Hz/m) and 'maxSlew' (maximum slew rate in Hz/m/s). Valid values: Must be a struct with 'maxGrad' and 'maxSlew' fields. <code>{maxGrad: 40e6, maxSlew: 150e6}</code>"},{"location":"matlab_api/scaleGrad/#returns","title":"Returns","text":"Output Type Description <code>grad</code> struct The scaled gradient waveform structure.  The 'id' field, if present, will be removed."},{"location":"matlab_api/scaleGrad/#examples","title":"Examples","text":"<pre><code>[grad_scaled] = mr.scaleGrad(grad, 2);\n[grad_scaled] = mr.scaleGrad(grad, 0.5, system);\n</code></pre>"},{"location":"matlab_api/scaleGrad/#see-also","title":"See Also","text":"<p>makeTrapezoid</p>"},{"location":"matlab_api/setBlock/","title":"setBlock","text":"<p>This function adds or replaces a block of events within a Pulseq sequence. It accepts events in uncompressed form and stores them in the sequence's internal, compressed, non-redundant libraries.  It handles different input formats: a pre-defined block structure, individual events, or a duration with subsequent events.  Error checking ensures that event durations do not exceed a specified duration when provided.</p>"},{"location":"matlab_api/setBlock/#syntax","title":"Syntax","text":"<pre><code>function setBlock(index, varargin)\n</code></pre>"},{"location":"matlab_api/setBlock/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.setBlock(...)\n</code></pre>"},{"location":"matlab_api/setBlock/#parameters","title":"Parameters","text":""},{"location":"matlab_api/setBlock/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>index</code> double The index specifying the location (block number) within the sequence where the new block should be added or replaced.  Indexing starts at 1. <code>1</code>"},{"location":"matlab_api/setBlock/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>trajectory_delay</code> double <code>0</code> Delay added to the trajectory of the block.  This is relevant to gradient and RF events in the block. (Units: seconds) <code>0.001</code>"},{"location":"matlab_api/setBlock/#returns","title":"Returns","text":"Output Type Description <code>none</code> none This function modifies the Pulseq sequence object in place. It does not return any value."},{"location":"matlab_api/setBlock/#examples","title":"Examples","text":"<pre><code>seq.setBlock(1, rf_event1, grad_event1); % Adds a block with an RF and a gradient event at index 1\nseq.setBlock(2, block_struct); % Replaces block at index 2 with a given block structure\nseq.setBlock(3, 0.01, rf_event2, grad_event2); % Creates a block with duration 0.01 seconds at index 3\n</code></pre>"},{"location":"matlab_api/setBlock/#see-also","title":"See Also","text":"<p>getBlock, addBlock</p>"},{"location":"matlab_api/setDefinition/","title":"setDefinition","text":"<p>This function modifies or creates a custom definition within a Pulseq sequence object.  It allows users to store key-value pairs as metadata associated with the sequence.</p>"},{"location":"matlab_api/setDefinition/#syntax","title":"Syntax","text":"<pre><code>function setDefinition(key,val)\n</code></pre>"},{"location":"matlab_api/setDefinition/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.setDefinition(...)\n</code></pre>"},{"location":"matlab_api/setDefinition/#parameters","title":"Parameters","text":""},{"location":"matlab_api/setDefinition/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>key</code> char The name of the definition to set or modify. This acts as the key for the key-value pair. <code>'FOV'</code> <code>val</code> double string cell The value to assign to the specified definition key. The type of value depends on the definition. For example, it could be a numerical value for field of view (FOV), or a string."},{"location":"matlab_api/setDefinition/#examples","title":"Examples","text":"<pre><code>seq.setDefinition('FOV', [0.2, 0.2, 0.2]); % Sets the FOV definition\nseq.setDefinition('PatientName', 'John Doe'); % Sets the patient name definition\n</code></pre>"},{"location":"matlab_api/setDefinition/#see-also","title":"See Also","text":"<p>getDefinition</p>"},{"location":"matlab_api/simRf/","title":"simRf","text":"<p>Simulates the effect of an RF pulse on nuclear magnetization using a quaternion-based rotation formalism.  It takes a Pulseq RF pulse definition as input and returns the resulting magnetization components, frequency axis, and refocusing efficiency.</p>"},{"location":"matlab_api/simRf/#syntax","title":"Syntax","text":"<pre><code>function [Mz_z,Mz_xy,F,ref_eff,Mx_xy,My_xy]=simRf(rf,rephase_factor,prephase_factor)\n</code></pre>"},{"location":"matlab_api/simRf/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.simRf(...)\n</code></pre>"},{"location":"matlab_api/simRf/#parameters","title":"Parameters","text":""},{"location":"matlab_api/simRf/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>rf</code> struct A Pulseq RF pulse structure.  This structure contains all the parameters defining the RF pulse, such as amplitude, duration, shape, frequency, phase, etc. <code>Pulseq RF pulse structure (created using Pulseq functions)</code>"},{"location":"matlab_api/simRf/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>rephase_factor</code> double <code>0</code> A factor used to correct the phase of the magnetization, particularly important for slice-selective excitation pulses.  It accounts for the timing difference between the pulse's center and its duration. Valid values: Any real number <code>0.004</code> <code>prephase_factor</code> double <code>0</code> An experimental parameter used for simulating refocusing pulses or spoiling.  It allows for additional phase adjustments beyond the rephase factor. Valid values: Any real number <code>0</code>"},{"location":"matlab_api/simRf/#returns","title":"Returns","text":"Output Type Description <code>Mz_z</code> double The z-component of the magnetization after the RF pulse, assuming initial magnetization along the z-axis. <code>Mz_xy</code> double The xy-component of the magnetization after the RF pulse, assuming initial magnetization along the z-axis. <code>F</code> double The frequency axis in Hz. <code>ref_eff</code> double The refocusing efficiency of the pulse as a complex number. The magnitude reflects the refocusing and the phase is related to the effective phase of the RF pulse. <code>Mx_xy</code> double The xy-component of the magnetization after the RF pulse, assuming initial magnetization along the x-axis. <code>My_xy</code> double The xy-component of the magnetization after the RF pulse, assuming initial magnetization along the y-axis."},{"location":"matlab_api/simRf/#examples","title":"Examples","text":"<pre><code>[Mz_z,Mz_xy,F,ref_eff,Mx_xy,My_xy] = mr.simRf(rf_pulse_struct);\n</code></pre>"},{"location":"matlab_api/simRf/#see-also","title":"See Also","text":"<p>mr.calcRfBandwidth</p>"},{"location":"matlab_api/sound/","title":"sound","text":"<p>Plays the sequence waveforms through the system speaker.  It processes the waveforms from the Pulseq sequence object, applies channel weighting, performs interpolation to match the desired sample rate, applies a Gaussian filter to suppress ringing artifacts, normalizes the amplitude, and then plays the resulting audio.  The function allows specifying a range of blocks to play and provides an option to only generate the sound data without playing it.</p>"},{"location":"matlab_api/sound/#syntax","title":"Syntax","text":"<pre><code>function soundData=sound(varargin)\n</code></pre>"},{"location":"matlab_api/sound/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.sound(...)\n</code></pre>"},{"location":"matlab_api/sound/#parameters","title":"Parameters","text":""},{"location":"matlab_api/sound/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>blockRange</code> double <code>[1 inf]</code> Specifies the range of blocks in the sequence to play.  Defaults to playing all blocks. Valid values: A two-element numeric vector [start_block end_block].  end_block can be Inf to indicate the end of the sequence. <code>[5, 10]</code> <code>channelWeights</code> double <code>[1 1 1]</code> Specifies the weights for the three channels (x, y, z). These weights scale the amplitudes of the corresponding channel waveforms before combining them for playback. Valid values: A three-element numeric vector [weight_x weight_y weight_z]. <code>[0.8, 1.2, 0.5]</code> <code>onlyProduceSoundData</code> logical <code>false</code> If true, the function only produces the sound data without actually playing it. This is useful if you want to process or save the sound data before playback. Valid values: true or false <code>true</code>"},{"location":"matlab_api/sound/#returns","title":"Returns","text":"Output Type Description <code>soundData</code> double A 2xN matrix containing the processed sound data for two channels.  Each column represents a sample.  If onlyProduceSoundData is true, this is the only output."},{"location":"matlab_api/sound/#examples","title":"Examples","text":"<pre><code>soundData = seq.sound(); % Plays the entire sequence\nsoundData = seq.sound('blockRange', [10, 20]); % Plays blocks 10-20\nseq.sound('channelWeights', [0.5, 1, 0], 'onlyProduceSoundData', true); % Generates sound data without playing, weighting channels differently\n</code></pre>"},{"location":"matlab_api/sound/#see-also","title":"See Also","text":"<p>waveforms_and_times</p>"},{"location":"matlab_api/splitGradient/","title":"splitGradient","text":"<p>This function decomposes a trapezoidal gradient into its constituent parts: slew-up, flat-top, and slew-down.  It takes a trapezoidal gradient structure as input and returns three separate extended trapezoid gradient structures representing the individual components. The delays within these components are adjusted to ensure that when added together using <code>addGradients</code>, the resulting gradient is equivalent to the original input gradient.</p>"},{"location":"matlab_api/splitGradient/#syntax","title":"Syntax","text":"<pre><code>function [grads] = splitGradient(grad, varargin)\n</code></pre>"},{"location":"matlab_api/splitGradient/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.splitGradient(...)\n</code></pre>"},{"location":"matlab_api/splitGradient/#parameters","title":"Parameters","text":""},{"location":"matlab_api/splitGradient/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>grad</code> struct A structure representing a trapezoidal gradient.  This structure must contain fields defining the gradient's amplitude, rise time, flat time, fall time, delay, and channel ('x','y','z').  It should be created using functions such as <code>mr.makeTrapezoid</code>. <code>mr.makeTrapezoid('x', 10, 0.001, 0.002, 0.001, 0)</code>"},{"location":"matlab_api/splitGradient/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> A structure containing system parameters (e.g., gradient raster time). If omitted, default system parameters are used from <code>mr.opts()</code>. Valid values: A valid mr.opts structure <code>mr.opts()</code>"},{"location":"matlab_api/splitGradient/#returns","title":"Returns","text":"Output Type Description <code>grads</code> struct An array of three extended trapezoid gradient structures: slew-up, flat-top, and slew-down gradients."},{"location":"matlab_api/splitGradient/#examples","title":"Examples","text":"<pre><code>[grads] = mr.splitGradient(mr.makeTrapezoid('x', 40, 0.001, 0.002, 0.001, 0), mr.opts('gradRasterTime', 0.0001));\n</code></pre>"},{"location":"matlab_api/splitGradient/#see-also","title":"See Also","text":"<p>splitGradientAt, makeExtendedTrapezoid, makeTrapezoid, Sequence.addBlock, mr.opts</p>"},{"location":"matlab_api/splitGradientAt/","title":"splitGradientAt","text":"<p>Splits a trapezoidal or arbitrary gradient into two parts at a specified time point.  The function divides a gradient waveform, either a trapezoid or an arbitrary shaped gradient, into two separate gradients at a given time.  It adjusts the delays to ensure that combining the resulting gradients using <code>addGradients</code> recreates the original gradient. For trapezoidal gradients, it returns extended trapezoids; for arbitrary gradients, it returns arbitrary gradient objects.</p>"},{"location":"matlab_api/splitGradientAt/#syntax","title":"Syntax","text":"<pre><code>function [varargout] = splitGradientAt(grad, timepoint, varargin)\n</code></pre>"},{"location":"matlab_api/splitGradientAt/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.splitGradientAt(...)\n</code></pre>"},{"location":"matlab_api/splitGradientAt/#parameters","title":"Parameters","text":""},{"location":"matlab_api/splitGradientAt/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>grad</code> struct Structure representing the gradient waveform to be split.  This structure contains fields like 'type' ('grad' or 'trap'), 'tt' (time points), 'waveform' (amplitude values), 'channel', and 'delay'. <code>{type:'trap', tt:[0 1 2 3], waveform:[0 100 100 0], channel:'x', delay:0}</code> <code>timepoint</code> double Time point (in seconds) at which to split the gradient waveform. <code>0.002</code> seconds"},{"location":"matlab_api/splitGradientAt/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> Structure containing system parameters, such as <code>gradRasterTime</code>. If not provided, default system parameters are used (via <code>mr.opts()</code>). Valid values: A structure with fields such as <code>gradRasterTime</code>. <code>mr.opts()</code>"},{"location":"matlab_api/splitGradientAt/#returns","title":"Returns","text":"Output Type Description <code>grads</code> cell Cell array containing the two resulting gradient structures. If nargout == 1, it returns a single cell array with both gradients. If nargout &gt; 1, it returns each gradient separately."},{"location":"matlab_api/splitGradientAt/#examples","title":"Examples","text":"<pre><code>[grad1, grad2] = mr.splitGradientAt(myGradient, 0.001, mr.opts());\n[grads] = mr.splitGradientAt(myGradient, 0.001);\n</code></pre>"},{"location":"matlab_api/splitGradientAt/#see-also","title":"See Also","text":"<p>addGradients, makeExtendedTrapezoid, makeTrapezoid, Sequence.addBlock, mr.opts</p>"},{"location":"matlab_api/testReport/","title":"testReport","text":"<p>Analyzes a Pulseq sequence object and generates a text report summarizing key sequence parameters.  The report includes information such as RF flip angles, echo time (TE), repetition time (TR), and other relevant sequence characteristics.  An optional 'system' parameter allows for comparison of sequence parameters against the limits of a specified MR system.</p>"},{"location":"matlab_api/testReport/#syntax","title":"Syntax","text":"<pre><code>function [ report ] = testReport(varargin )\n</code></pre>"},{"location":"matlab_api/testReport/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.testReport(...)\n</code></pre>"},{"location":"matlab_api/testReport/#parameters","title":"Parameters","text":""},{"location":"matlab_api/testReport/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>struct([])</code> A structure containing MR system specifications to compare against. If omitted, no system-specific checks are performed. Valid values: A structure with fields representing system limits (e.g., gradient limits, slew rate limits, etc.). The exact fields depend on the specific tests performed by the function. <code>{ 'maxGrad': 40, 'maxSlew': 120 }</code>"},{"location":"matlab_api/testReport/#returns","title":"Returns","text":"Output Type Description <code>report</code> string A text string containing the analysis report of the input Pulseq sequence."},{"location":"matlab_api/testReport/#examples","title":"Examples","text":"<pre><code>report = seq.testReport();\nreport = seq.testReport('system', systemParams);\n</code></pre>"},{"location":"matlab_api/toRotMat/","title":"toRotMat","text":"<p>This function converts a normalized quaternion into its corresponding 3x3 rotation matrix.  The quaternion must be a 4-element vector.</p>"},{"location":"matlab_api/toRotMat/#syntax","title":"Syntax","text":"<pre><code>function r = toRotMat(q)\n</code></pre>"},{"location":"matlab_api/toRotMat/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.aux.quat.toRotMat(...)\n</code></pre>"},{"location":"matlab_api/toRotMat/#parameters","title":"Parameters","text":""},{"location":"matlab_api/toRotMat/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>q</code> double A 4-element vector representing a normalized quaternion [q1, q2, q3, q4]. <code>[0.707, 0, 0, 0.707]</code>"},{"location":"matlab_api/toRotMat/#returns","title":"Returns","text":"Output Type Description <code>r</code> double A 3x3 rotation matrix corresponding to the input quaternion."},{"location":"matlab_api/toRotMat/#examples","title":"Examples","text":"<pre><code>r = mr.aux.quat.toRotMat([0.707, 0, 0, 0.707]);\n</code></pre>"},{"location":"matlab_api/traj2grad/","title":"traj2grad","text":"<p>Converts a k-space trajectory into gradient waveforms using finite differences.  The input trajectory is assumed to be in units of 1/m and sampled at the raster edges (unless otherwise specified). The function calculates both the gradient waveform and the slew rate. It offers options for handling the first gradient step and for a more conservative slew rate estimate.</p>"},{"location":"matlab_api/traj2grad/#syntax","title":"Syntax","text":"<pre><code>function [g sr]=traj2grad(k,varargin)\n</code></pre>"},{"location":"matlab_api/traj2grad/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.traj2grad(...)\n</code></pre>"},{"location":"matlab_api/traj2grad/#parameters","title":"Parameters","text":""},{"location":"matlab_api/traj2grad/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>k</code> double The k-space trajectory.  The size of k is [nChannel nTime], where nChannel is the number of channels and nTime is the number of time points. <code>[0.1 0.2 0.3; 0.4 0.5 0.6]</code> 1/m"},{"location":"matlab_api/traj2grad/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>first</code> double <code>[]</code> The initial gradient value. If not provided, it defaults to zero. (Units: Hz/m) <code>[10; 20]</code> <code>firstGradStepHalfRaster</code> logical <code>true</code> Specifies whether the first gradient step should be considered half a raster time.  Affects the slew rate calculation. <code>true</code> <code>conservativeSlewEstimate</code> logical <code>false</code> If true, uses a conservative estimate for the slew rate, taking the maximum absolute slew rate between adjacent gradient points. If false, uses the average of adjacent slew rates. <code>false</code> <code>system</code> struct <code>[]</code> A structure containing system parameters. If not provided, it defaults to mr.opts().  Likely contains parameters such as gradRasterTime. <code>mr.opts()</code> <code>RasterTime</code> double <code>[]</code> The time duration of one raster time unit.  If not provided, it defaults to the gradRasterTime from the 'system' parameter (or mr.opts().gradRasterTime if 'system' is not provided). (Units: seconds) <code>0.000004</code>"},{"location":"matlab_api/traj2grad/#returns","title":"Returns","text":"Output Type Description <code>g</code> double The calculated gradient waveform in Hz/m. <code>sr</code> double The calculated slew rate in Hz/m/s."},{"location":"matlab_api/traj2grad/#examples","title":"Examples","text":"<pre><code>g = mr.traj2grad(k);\ng = mr.traj2grad(k, 'RasterTime', 0.000004);\n[g, sr] = mr.traj2grad(k, 'system', mr.opts('maxSlewRate', 150), 'firstGradStepHalfRaster', false);\n</code></pre>"},{"location":"matlab_api/traj2grad/#see-also","title":"See Also","text":"<p>mr.opts, Sequence.makeArbitraryGrad</p>"},{"location":"matlab_api/transform/","title":"transform","text":"<p>Creates a transformed copy of a Pulseq sequence by applying a rotation, translation, or a 4x4 homogeneous transformation matrix.  It modifies the sequence's gradient waveforms and calculates updated k-space phase information based on the transformation.</p>"},{"location":"matlab_api/transform/#syntax","title":"Syntax","text":"<pre><code>function [seq2, gw_pp]= transform(seq, varargin)\n</code></pre>"},{"location":"matlab_api/transform/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.transform(...)\n</code></pre>"},{"location":"matlab_api/transform/#parameters","title":"Parameters","text":""},{"location":"matlab_api/transform/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>seq</code> struct The input Pulseq sequence structure to be transformed. <code>mySequence</code>"},{"location":"matlab_api/transform/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>rotation</code> double <code>[]</code> A 3x3 rotation matrix to apply to the sequence.  Cannot be used with 'transform'. Valid values: 3x3 numeric matrix <code>[1 0 0; 0 1 0; 0 0 1]</code> <code>translation</code> double <code>[]</code> A 1x3 translation vector in Pulseq logical coordinates [x, y, z]. Cannot be used with 'transform'. Valid values: 1x3 numeric vector (Units: meters) <code>[0.01 0 0]</code> <code>offset</code> double <code>[]</code> A translation vector in Pulseq logical coordinates [x, y, z]. Valid values: 1x3 numeric vector (Units: meters) <code>[0.02, 0, 0]</code> <code>transform</code> double <code>[]</code> A 4x4 homogeneous transformation matrix containing both rotation and translation (in lab coordinates). Cannot be used with 'rotation' or 'translation'. Valid values: 4x4 numeric matrix <code>[1 0 0 0.01; 0 1 0 0; 0 0 1 0; 0 0 0 1]</code> <code>system</code> struct <code>[]</code> Optional MR system description. If not provided, system properties from the input sequence are inherited. <code>mr.opts('maxGrad', 40, 'maxSlew', 130)</code> <code>sameSeq</code> logical <code>false</code> If true, the output sequence will be a pointer to the input sequence; otherwise, a copy is created. <code>true</code> <code>blockRange</code> double <code>[1 inf]</code> Specifies the range of blocks in the sequence to process.  The second value can be 'inf' for all blocks. Valid values: 1x2 numeric vector <code>[10, 20]</code> <code>gw_pp</code> cell <code>{}</code> Optional pre-calculated gradient piecewise polynomial (k-space) data. If provided, the function will reuse this data instead of recalculating it. <code>{}</code>"},{"location":"matlab_api/transform/#returns","title":"Returns","text":"Output Type Description <code>seq2</code> struct The transformed Pulseq sequence. <code>gw_pp</code> cell Gradient piecewise polynomial (k-space) data for the transformed sequence."},{"location":"matlab_api/transform/#examples","title":"Examples","text":"<pre><code>[seq2, gw_pp] = mr.transform(mySequence, 'rotation', rotMatrix, 'offset', [0.01, 0, 0]);\n[seq2, gw_pp] = mr.transform(mySequence, 'transform', homogeneousTransformMatrix);\n</code></pre>"},{"location":"matlab_api/transform/#see-also","title":"See Also","text":"<p>mr.rotate, mr.rotate3D</p>"},{"location":"matlab_api/version/","title":"version","text":"<p>Returns the version information for the Pulseq Matlab package.  The specific version information returned ('pulseq' or 'output') depends on the input parameter <code>type</code>.</p>"},{"location":"matlab_api/version/#syntax","title":"Syntax","text":"<pre><code>function [version_major, version_minor, version_revision, version_combined]=version(type)\n</code></pre>"},{"location":"matlab_api/version/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.aux.version(...)\n</code></pre>"},{"location":"matlab_api/version/#parameters","title":"Parameters","text":""},{"location":"matlab_api/version/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>type</code> char Specifies the type of version information to return.  'pulseq' returns the version of the Matlab package, while 'output' returns the version number written to the output file by the <code>seq.write()</code> function. <code>'pulseq'</code>"},{"location":"matlab_api/version/#returns","title":"Returns","text":"Output Type Description <code>version_major</code> double Major version number. <code>version_minor</code> double Minor version number. <code>version_revision</code> double Revision version number. <code>version_combined</code> double Combined version number (major1000000 + minor1000 + revision)."},{"location":"matlab_api/version/#examples","title":"Examples","text":"<pre><code>mr.aux.version('pulseq')\nmr.aux.version('output')\n</code></pre>"},{"location":"matlab_api/version/#see-also","title":"See Also","text":"<p>seq.write</p>"},{"location":"matlab_api/waveforms_and_times/","title":"waveforms_and_times","text":"<p>This function extracts and organizes waveform data from a Pulseq sequence object. It decompresses the gradient waveforms, returning them as a cell array where each cell contains time points and corresponding gradient amplitude values for each gradient axis (typically x, y, and z).  It also returns timing information for excitation and refocusing RF pulses, and ADC sampling points, including frequency and phase offsets.  If the <code>appendRF</code> flag is true, RF waveforms are included in the output.</p>"},{"location":"matlab_api/waveforms_and_times/#syntax","title":"Syntax","text":"<pre><code>function [wave_data, tfp_excitation, tfp_refocusing, t_adc, fp_adc, pm_adc]=waveforms_and_times(appendRF, blockRange)\n</code></pre>"},{"location":"matlab_api/waveforms_and_times/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.waveforms_and_times(...)\n</code></pre>"},{"location":"matlab_api/waveforms_and_times/#parameters","title":"Parameters","text":""},{"location":"matlab_api/waveforms_and_times/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>appendRF</code> logical A boolean flag indicating whether to include RF waveforms in the output.  True includes RF data; False excludes it. <code>true</code> <code>blockRange</code> numeric A two-element vector specifying the range of blocks in the sequence to process.  The first element is the starting block index, and the second element is the ending block index. <code>[1, 10]</code>"},{"location":"matlab_api/waveforms_and_times/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>trajectory_delay</code> double <code>0</code> Delay added to the trajectory. (Units: seconds) <code>0.001</code> <code>gradient_offset</code> double <code>0</code> Offset added to the gradient waveforms. (Units: Hz/m) <code>100</code> <code>blockRange</code> numeric <code>[1 inf]</code> A two-element vector specifying the range of blocks in the sequence to process. Defaults to processing all blocks. <code>[5,15]</code> <code>externalWaveformsAndTimes</code> struct <code>struct([])</code> Allows for providing external waveforms and timing data. <code>struct('gradients', { [1 2], [3 4] }, 'rf', { [5 6], [7 8] })</code>"},{"location":"matlab_api/waveforms_and_times/#returns","title":"Returns","text":"Output Type Description <code>wave_data</code> cell A cell array containing the gradient waveforms. Each cell represents a gradient axis (x, y, z) and contains a matrix of time points and corresponding amplitude values. <code>tfp_excitation</code> numeric Time points, frequency, and phase offsets of the excitation RF pulses. <code>tfp_refocusing</code> numeric Time points, frequency, and phase offsets of the refocusing RF pulses. <code>t_adc</code> numeric Time points of all ADC sampling points. <code>fp_adc</code> numeric Frequency and phase offsets of each ADC object. <code>pm_adc</code> numeric Phase modulation of every ADC sample beyond the data stored in fp_adc."},{"location":"matlab_api/waveforms_and_times/#examples","title":"Examples","text":"<pre><code>[wave_data, tfp_excitation, tfp_refocusing, t_adc, fp_adc, pm_adc] = seq.waveforms_and_times(true, [1, 10]);\n</code></pre>"},{"location":"matlab_api/waveforms_and_times/#see-also","title":"See Also","text":"<p>getBlock</p>"},{"location":"matlab_api/write/","title":"write","text":"<p>Writes a Pulseq sequence object to a file in the Pulseq open file format.  This function serializes the sequence data, including definitions, block events, and RF events, into a text-based file that can be later read back into MATLAB using the <code>read</code> function.</p>"},{"location":"matlab_api/write/#syntax","title":"Syntax","text":"<pre><code>function write(filename,create_signature)\n</code></pre>"},{"location":"matlab_api/write/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.write(...)\n</code></pre>"},{"location":"matlab_api/write/#parameters","title":"Parameters","text":""},{"location":"matlab_api/write/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>filename</code> char The name of the file to write the sequence data to, including the full path.  The file extension '.seq' is usually used. <code>'my_sequences/gre.seq'</code> <code>create_signature</code> logical A boolean value indicating whether to create a signature (MD5 hash) for the sequence file. If true (default), a signature is generated and included in the file. <code>true</code>"},{"location":"matlab_api/write/#examples","title":"Examples","text":"<pre><code>seq.write('my_sequences/gre.seq')\nseq.write('my_sequences/gre.seq', false)\n</code></pre>"},{"location":"matlab_api/write/#see-also","title":"See Also","text":"<p>read</p>"},{"location":"matlab_api/writeBinary/","title":"writeBinary","text":"<p>Writes a Pulseq sequence object to a file in binary format, using the Pulseq open file format specification.  This function serializes the sequence data, including header information, definitions, block events, RF pulses, and gradients, into a binary file for later use or sharing.</p>"},{"location":"matlab_api/writeBinary/#syntax","title":"Syntax","text":"<pre><code>function writeBinary(filename)\n</code></pre>"},{"location":"matlab_api/writeBinary/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.writeBinary(...)\n</code></pre>"},{"location":"matlab_api/writeBinary/#parameters","title":"Parameters","text":""},{"location":"matlab_api/writeBinary/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>filename</code> char The name of the file to write the sequence data to.  The filename should include the '.bin' extension. <code>'sequences/gre.bin'</code>"},{"location":"matlab_api/writeBinary/#examples","title":"Examples","text":"<pre><code>seq.writeBinary('sequences/gre.bin')\n</code></pre>"},{"location":"matlab_api/writeBinary/#see-also","title":"See Also","text":"<p>readBinary</p>"},{"location":"matlab_api/write_v141/","title":"write_v141","text":"<p>Writes a Pulseq sequence object to a file in version 1.4.1 format.  This function takes a Pulseq sequence object and a filename as input and writes the sequence data to the specified file using the Pulseq open file format. It also includes an optional parameter to control whether a signature is created.</p>"},{"location":"matlab_api/write_v141/#syntax","title":"Syntax","text":"<pre><code>function write_v141(filename,create_signature)\n</code></pre>"},{"location":"matlab_api/write_v141/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.write_v141(...)\n</code></pre>"},{"location":"matlab_api/write_v141/#parameters","title":"Parameters","text":""},{"location":"matlab_api/write_v141/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>filename</code> char The name of the file to which the sequence data should be written.  This includes the full path. <code>'my_sequences/gre.seq'</code> <code>create_signature</code> logical A boolean flag indicating whether a signature should be created for the file (default is true if not provided). <code>true</code>"},{"location":"matlab_api/write_v141/#examples","title":"Examples","text":"<pre><code>seq.write_v141('my_sequences/gre.seq', true);\nseq.write_v141('my_sequences/gre.seq');\n</code></pre>"},{"location":"matlab_api/write_v141/#see-also","title":"See Also","text":"<p>mr.aux.version, write, read</p>"},{"location":"mdDocs/","title":"PulsePal MATLAB API Documentation","text":""},{"location":"mdDocs/#matlab-function-reference","title":"MATLAB Function Reference","text":"<p>This site provides complete documentation for all MATLAB functions in the Pulseq framework.</p>"},{"location":"mdDocs/#quick-links","title":"Quick Links","text":"<ul> <li>Browse All Functions - Complete alphabetical listing</li> <li>Official Pulseq Repository - Source code and examples</li> </ul>"},{"location":"mdDocs/#getting-started","title":"Getting Started","text":"<ol> <li>Browse the complete function list</li> <li>Click on any function for detailed documentation</li> <li>Each function page includes syntax, parameters, returns, and examples</li> </ol>"},{"location":"mdDocs/API_REFERENCE/","title":"PulsePal API Reference","text":""},{"location":"mdDocs/API_REFERENCE/#core-modules","title":"Core Modules","text":""},{"location":"mdDocs/API_REFERENCE/#pulsepalmain_agent","title":"pulsepal.main_agent","text":"<p>The main agent module contains the core PulsePal intelligent agent.</p>"},{"location":"mdDocs/API_REFERENCE/#functions","title":"Functions","text":""},{"location":"mdDocs/API_REFERENCE/#run_pulsepalquery-str-session_id-str-none-tuplestr-str","title":"<code>run_pulsepal(query: str, session_id: str = None) -&gt; tuple[str, str]</code>","text":"<p>Run PulsePal with a query and optional session management.</p> <p>Parameters: - <code>query</code> (str): The user's question or request about Pulseq/MRI - <code>session_id</code> (str, optional): Existing session ID to continue conversation</p> <p>Returns: - <code>tuple[str, str]</code>: Session ID and response text</p> <p>Example: <pre><code>from pulsepal.main_agent import run_pulsepal\n\nsession_id, response = await run_pulsepal(\n    \"How do I create a gradient echo sequence?\",\n    session_id=\"existing-session-123\"\n)\n</code></pre></p>"},{"location":"mdDocs/API_REFERENCE/#pulsepal_agent","title":"<code>pulsepal_agent</code>","text":"<p>The main PydanticAI agent instance configured with Google Gemini.</p> <p>Usage: <pre><code>from pulsepal.main_agent import pulsepal_agent\n\nresult = await pulsepal_agent.run(\n    \"Your query here\",\n    deps=dependencies\n)\n</code></pre></p>"},{"location":"mdDocs/API_REFERENCE/#pulsepalrag_service","title":"pulsepal.rag_service","text":"<p>RAG (Retrieval Augmented Generation) service for Pulseq documentation search.</p>"},{"location":"mdDocs/API_REFERENCE/#classes","title":"Classes","text":""},{"location":"mdDocs/API_REFERENCE/#modernpulseqrag","title":"<code>ModernPulseqRAG</code>","text":"<p>Advanced RAG service with hybrid search capabilities.</p> <p>Methods:</p>"},{"location":"mdDocs/API_REFERENCE/#search_pulseq_knowledgequery-str-search_type-str-auto-str","title":"<code>search_pulseq_knowledge(query: str, search_type: str = \"auto\") -&gt; str</code>","text":"<p>Search Pulseq documentation and return relevant information.</p> <p>Parameters: - <code>query</code> (str): Search query - <code>search_type</code> (str): One of \"auto\", \"documentation\", \"functions\", \"examples\", \"code\"</p> <p>Returns: - <code>str</code>: Formatted search results</p> <p>Example: <pre><code>from pulsepal.rag_service import ModernPulseqRAG\n\nrag = ModernPulseqRAG()\nresults = await rag.search_pulseq_knowledge(\n    \"gradient echo parameters\",\n    search_type=\"documentation\"\n)\n</code></pre></p>"},{"location":"mdDocs/API_REFERENCE/#supabaseragclient","title":"<code>SupabaseRAGClient</code>","text":"<p>Low-level client for Supabase vector database operations.</p> <p>Methods:</p>"},{"location":"mdDocs/API_REFERENCE/#hybrid_searchquery-str-limit-int-5-listdict","title":"<code>hybrid_search(query: str, limit: int = 5) -&gt; List[Dict]</code>","text":"<p>Perform hybrid vector + keyword search.</p> <p>Parameters: - <code>query</code> (str): Search query - <code>limit</code> (int): Maximum results to return</p> <p>Returns: - <code>List[Dict]</code>: Search results with metadata</p>"},{"location":"mdDocs/API_REFERENCE/#pulsepaltools","title":"pulsepal.tools","text":"<p>Tool functions for the PulsePal agent.</p>"},{"location":"mdDocs/API_REFERENCE/#functions_1","title":"Functions","text":""},{"location":"mdDocs/API_REFERENCE/#search_pulseq_knowledgectx-runcontext-query-str-search_type-str-auto-str","title":"<code>search_pulseq_knowledge(ctx: RunContext, query: str, search_type: str = \"auto\") -&gt; str</code>","text":"<p>Agent tool for searching Pulseq knowledge base.</p> <p>Parameters: - <code>ctx</code>: PydanticAI run context - <code>query</code> (str): Search query - <code>search_type</code> (str): Search method selection</p> <p>Returns: - <code>str</code>: Formatted search results for agent use</p> <p>Example: <pre><code>from pulsepal.tools import search_pulseq_knowledge\n\n# Used internally by the agent\n@pulsepal_agent.tool\nasync def search_tool(ctx, query):\n    return await search_pulseq_knowledge(ctx, query)\n</code></pre></p>"},{"location":"mdDocs/API_REFERENCE/#pulsepaldependencies","title":"pulsepal.dependencies","text":"<p>Session management and conversation context.</p>"},{"location":"mdDocs/API_REFERENCE/#classes_1","title":"Classes","text":""},{"location":"mdDocs/API_REFERENCE/#sessionmanager","title":"<code>SessionManager</code>","text":"<p>Manages user sessions and conversation history.</p> <p>Methods:</p>"},{"location":"mdDocs/API_REFERENCE/#create_session-str","title":"<code>create_session() -&gt; str</code>","text":"<p>Create a new session with unique ID.</p> <p>Returns: - <code>str</code>: New session ID</p>"},{"location":"mdDocs/API_REFERENCE/#get_sessionsession_id-str-conversationcontext","title":"<code>get_session(session_id: str) -&gt; ConversationContext</code>","text":"<p>Retrieve existing session context.</p> <p>Parameters: - <code>session_id</code> (str): Session identifier</p> <p>Returns: - <code>ConversationContext</code>: Session data</p>"},{"location":"mdDocs/API_REFERENCE/#cleanup_old_sessionsmax_age_hours-int-24","title":"<code>cleanup_old_sessions(max_age_hours: int = 24)</code>","text":"<p>Remove expired sessions.</p> <p>Parameters: - <code>max_age_hours</code> (int): Maximum session age</p>"},{"location":"mdDocs/API_REFERENCE/#conversationcontext","title":"<code>ConversationContext</code>","text":"<p>Dataclass for storing conversation state.</p> <p>Attributes: - <code>session_id</code> (str): Unique session identifier - <code>conversation_history</code> (List[Dict]): Previous messages - <code>preferred_language</code> (str): \"matlab\" or \"python\" - <code>code_examples</code> (List[Dict]): Stored code snippets - <code>session_start_time</code> (datetime): Creation timestamp - <code>last_activity</code> (datetime): Last interaction time</p> <p>Example: <pre><code>from pulsepal.dependencies import SessionManager, ConversationContext\n\nmanager = SessionManager()\nsession_id = manager.create_session()\ncontext = manager.get_session(session_id)\n\n# Access conversation history\nfor message in context.conversation_history:\n    print(f\"{message['role']}: {message['content']}\")\n</code></pre></p>"},{"location":"mdDocs/API_REFERENCE/#pulsepaldependencies_1","title":"<code>PulsePalDependencies</code>","text":"<p>Dependencies container for the agent.</p> <p>Attributes: - <code>conversation_context</code> (ConversationContext): Current session - <code>session_manager</code> (SessionManager): Session manager instance - <code>rag_initialized</code> (bool): RAG service status - <code>force_rag</code> (bool): Force RAG search - <code>skip_rag</code> (bool): Skip RAG search</p>"},{"location":"mdDocs/API_REFERENCE/#pulsepalsettings","title":"pulsepal.settings","text":"<p>Configuration management using pydantic-settings.</p>"},{"location":"mdDocs/API_REFERENCE/#classes_2","title":"Classes","text":""},{"location":"mdDocs/API_REFERENCE/#settings","title":"<code>Settings</code>","text":"<p>Application settings with environment variable support.</p> <p>Attributes: - <code>google_api_key</code> (str): Google API key for Gemini - <code>llm_model</code> (str): Model name (default: \"gemini-2.5-flash\") - <code>supabase_url</code> (str): Supabase project URL - <code>supabase_key</code> (str): Supabase API key - <code>max_session_duration_hours</code> (int): Session timeout (default: 24) - <code>max_conversation_history</code> (int): Max messages per session (default: 100) - <code>use_hybrid_search</code> (bool): Enable hybrid search (default: True)</p>"},{"location":"mdDocs/API_REFERENCE/#functions_2","title":"Functions","text":""},{"location":"mdDocs/API_REFERENCE/#get_settings-settings","title":"<code>get_settings() -&gt; Settings</code>","text":"<p>Load settings from environment variables.</p> <p>Returns: - <code>Settings</code>: Configured settings instance</p> <p>Example: <pre><code>from pulsepal.settings import get_settings\n\nsettings = get_settings()\nprint(f\"Using model: {settings.llm_model}\")\nprint(f\"Session timeout: {settings.max_session_duration_hours} hours\")\n</code></pre></p>"},{"location":"mdDocs/API_REFERENCE/#get_llm_model-geminimodel","title":"<code>get_llm_model() -&gt; GeminiModel</code>","text":"<p>Get configured Gemini model instance.</p> <p>Returns: - <code>GeminiModel</code>: Configured model for PydanticAI</p>"},{"location":"mdDocs/API_REFERENCE/#cli-interface","title":"CLI Interface","text":""},{"location":"mdDocs/API_REFERENCE/#run_pulsepalpy","title":"run_pulsepal.py","text":"<p>Command-line interface for PulsePal.</p>"},{"location":"mdDocs/API_REFERENCE/#usage","title":"Usage","text":"<pre><code># Interactive mode\npython run_pulsepal.py\n\n# Single query\npython run_pulsepal.py \"Your question here\"\n\n# With session\npython run_pulsepal.py --session-id &lt;id&gt;\n\n# Help\npython run_pulsepal.py --help\n</code></pre>"},{"location":"mdDocs/API_REFERENCE/#arguments","title":"Arguments","text":"<ul> <li><code>query</code> (positional, optional): Direct query to process</li> <li><code>--session-id</code>: Continue existing session</li> <li><code>--interactive</code>: Force interactive mode</li> <li><code>--help</code>: Show help message</li> </ul>"},{"location":"mdDocs/API_REFERENCE/#web-interface","title":"Web Interface","text":""},{"location":"mdDocs/API_REFERENCE/#chainlit_apppy","title":"chainlit_app.py","text":"<p>Chainlit web interface for PulsePal.</p>"},{"location":"mdDocs/API_REFERENCE/#starting-the-server","title":"Starting the Server","text":"<pre><code>chainlit run chainlit_app.py\n</code></pre>"},{"location":"mdDocs/API_REFERENCE/#features","title":"Features","text":"<ul> <li>Real-time streaming responses</li> <li>Session persistence</li> <li>Markdown rendering</li> <li>Code syntax highlighting</li> <li>File upload support</li> </ul>"},{"location":"mdDocs/API_REFERENCE/#configuration","title":"Configuration","text":"<p>Configure in <code>.chainlit/config.toml</code>:</p> <pre><code>[project]\nname = \"PulsePal\"\ndescription = \"MRI Sequence Assistant\"\n\n[UI]\ntheme = \"light\"\n</code></pre>"},{"location":"mdDocs/API_REFERENCE/#error-handling","title":"Error Handling","text":""},{"location":"mdDocs/API_REFERENCE/#common-exceptions","title":"Common Exceptions","text":""},{"location":"mdDocs/API_REFERENCE/#sessionnotfounderror","title":"<code>SessionNotFoundError</code>","text":"<p>Raised when session ID doesn't exist.</p> <pre><code>try:\n    context = manager.get_session(\"invalid-id\")\nexcept SessionNotFoundError:\n    context = manager.create_session()\n</code></pre>"},{"location":"mdDocs/API_REFERENCE/#ragserviceerror","title":"<code>RAGServiceError</code>","text":"<p>Raised when RAG search fails.</p> <pre><code>try:\n    results = await rag.search_pulseq_knowledge(query)\nexcept RAGServiceError as e:\n    # Fallback to agent's built-in knowledge\n    results = None\n</code></pre>"},{"location":"mdDocs/API_REFERENCE/#configurationerror","title":"<code>ConfigurationError</code>","text":"<p>Raised when required environment variables are missing.</p> <pre><code>try:\n    settings = get_settings()\nexcept ConfigurationError as e:\n    print(f\"Missing configuration: {e}\")\n</code></pre>"},{"location":"mdDocs/API_REFERENCE/#environment-variables","title":"Environment Variables","text":"<p>Required environment variables in <code>.env</code>:</p> <pre><code># Google Gemini API\nGOOGLE_API_KEY=your-api-key\nLLM_MODEL=gemini-2.5-flash\n\n# Supabase Vector Database\nSUPABASE_URL=your-supabase-url\nSUPABASE_KEY=your-supabase-key\n\n# Optional: Google Embeddings\nGOOGLE_API_KEY_EMBEDDING=your-embedding-key\n\n# Session Configuration\nMAX_SESSION_DURATION_HOURS=24\nMAX_CONVERSATION_HISTORY=100\n\n# Search Configuration\nUSE_HYBRID_SEARCH=true\n</code></pre>"},{"location":"mdDocs/API_REFERENCE/#return-types","title":"Return Types","text":""},{"location":"mdDocs/API_REFERENCE/#search-results-format","title":"Search Results Format","text":"<pre><code>{\n    \"results\": [\n        {\n            \"content\": \"Documentation text\",\n            \"metadata\": {\n                \"source\": \"file.md\",\n                \"section\": \"gradient_echo\",\n                \"relevance\": 0.95\n            }\n        }\n    ],\n    \"query\": \"original query\",\n    \"search_type\": \"documentation\"\n}\n</code></pre>"},{"location":"mdDocs/API_REFERENCE/#session-format","title":"Session Format","text":"<pre><code>{\n    \"session_id\": \"uuid-string\",\n    \"conversation_history\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"question\",\n            \"timestamp\": \"2025-01-18T10:00:00\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"content\": \"response\",\n            \"timestamp\": \"2025-01-18T10:00:01\"\n        }\n    ],\n    \"preferred_language\": \"matlab\",\n    \"created_at\": \"2025-01-18T09:59:00\"\n}\n</code></pre>"},{"location":"mdDocs/API_REFERENCE/#examples","title":"Examples","text":""},{"location":"mdDocs/API_REFERENCE/#basic-usage","title":"Basic Usage","text":"<pre><code>import asyncio\nfrom pulsepal.main_agent import run_pulsepal\n\nasync def main():\n    # Simple query\n    session_id, response = await run_pulsepal(\n        \"What is a gradient echo sequence?\"\n    )\n    print(response)\n\n    # Follow-up with session\n    _, response2 = await run_pulsepal(\n        \"Can you show me the code?\",\n        session_id=session_id\n    )\n    print(response2)\n\nasyncio.run(main())\n</code></pre>"},{"location":"mdDocs/API_REFERENCE/#custom-rag-search","title":"Custom RAG Search","text":"<pre><code>from pulsepal.rag_service import ModernPulseqRAG\n\nasync def search_examples():\n    rag = ModernPulseqRAG()\n\n    # Search for code examples\n    examples = await rag.search_pulseq_knowledge(\n        \"EPI sequence implementation\",\n        search_type=\"examples\"\n    )\n\n    # Search for function documentation\n    functions = await rag.search_pulseq_knowledge(\n        \"makeArbitraryGrad parameters\",\n        search_type=\"functions\"\n    )\n\n    return examples, functions\n</code></pre>"},{"location":"mdDocs/API_REFERENCE/#session-management","title":"Session Management","text":"<pre><code>from pulsepal.dependencies import SessionManager\n\n# Create manager\nmanager = SessionManager()\n\n# New session\nsession_id = manager.create_session()\n\n# Get session\ncontext = manager.get_session(session_id)\n\n# Update context\ncontext.preferred_language = \"python\"\ncontext.conversation_history.append({\n    \"role\": \"user\",\n    \"content\": \"Show me Python code\"\n})\n\n# Save session\nmanager.save_session(context)\n\n# Cleanup old sessions\nmanager.cleanup_old_sessions(max_age_hours=48)\n</code></pre>"},{"location":"mdDocs/API_REFERENCE/#testing","title":"Testing","text":""},{"location":"mdDocs/API_REFERENCE/#running-tests","title":"Running Tests","text":"<pre><code># All tests\npytest\n\n# With coverage\npytest --cov=pulsepal\n\n# Specific module\npytest tests/unit/test_main_agent.py\n</code></pre>"},{"location":"mdDocs/API_REFERENCE/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/          # Unit tests\n\u251c\u2500\u2500 integration/   # Integration tests\n\u251c\u2500\u2500 e2e/          # End-to-end tests\n\u2514\u2500\u2500 fixtures/     # Test data\n</code></pre>"},{"location":"mdDocs/API_REFERENCE/#support","title":"Support","text":"<p>For issues or questions: - Email: rmoskwa@wisc.edu - GitHub: https://github.com/rmoskwa/Pulsepal/issues - Documentation: This file</p>"},{"location":"mdDocs/ARCHITECTURE_DIAGRAMS/","title":"PulsePal Architecture Diagrams","text":""},{"location":"mdDocs/ARCHITECTURE_DIAGRAMS/#system-architecture","title":"System Architecture","text":"<pre><code>graph TB\n    subgraph \"User Interfaces\"\n        CLI[CLI Interface&lt;br/&gt;run_pulsepal.py]\n        WEB[Web Interface&lt;br/&gt;chainlit_app.py]\n    end\n\n    subgraph \"Core Agent\"\n        AGENT[PulsePal Agent&lt;br/&gt;main_agent.py]\n        DEPS[Dependencies&lt;br/&gt;dependencies.py]\n        TOOLS[Tools&lt;br/&gt;tools.py]\n    end\n\n    subgraph \"Services\"\n        RAG[RAG Service&lt;br/&gt;rag_service.py]\n        SESSION[Session Manager]\n        SETTINGS[Settings&lt;br/&gt;settings.py]\n    end\n\n    subgraph \"External Services\"\n        GEMINI[Google Gemini&lt;br/&gt;2.5 Flash]\n        SUPABASE[Supabase&lt;br/&gt;Vector DB]\n        EMBEDDINGS[Google&lt;br/&gt;Embeddings API]\n    end\n\n    CLI --&gt; AGENT\n    WEB --&gt; AGENT\n    AGENT --&gt; DEPS\n    AGENT --&gt; TOOLS\n    TOOLS --&gt; RAG\n    DEPS --&gt; SESSION\n    AGENT --&gt; SETTINGS\n    RAG --&gt; SUPABASE\n    RAG --&gt; EMBEDDINGS\n    AGENT --&gt; GEMINI\n    SETTINGS --&gt; GEMINI\n</code></pre>"},{"location":"mdDocs/ARCHITECTURE_DIAGRAMS/#data-flow-diagram","title":"Data Flow Diagram","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Interface as CLI/Web\n    participant Agent as PulsePal Agent\n    participant Router as Semantic Router\n    participant RAG as RAG Service\n    participant Gemini as Google Gemini\n    participant Supabase as Supabase DB\n\n    User-&gt;&gt;Interface: Query\n    Interface-&gt;&gt;Agent: Process Query\n    Agent-&gt;&gt;Router: Analyze Query Type\n\n    alt Needs Documentation\n        Router-&gt;&gt;Agent: Force RAG Search\n        Agent-&gt;&gt;RAG: Search Knowledge\n        RAG-&gt;&gt;Supabase: Vector Search\n        Supabase--&gt;&gt;RAG: Results\n        RAG--&gt;&gt;Agent: Formatted Results\n    else Built-in Knowledge\n        Router-&gt;&gt;Agent: Skip RAG\n    end\n\n    Agent-&gt;&gt;Gemini: Generate Response\n    Gemini--&gt;&gt;Agent: Response\n    Agent--&gt;&gt;Interface: Final Answer\n    Interface--&gt;&gt;User: Display Result\n</code></pre>"},{"location":"mdDocs/ARCHITECTURE_DIAGRAMS/#module-relationships","title":"Module Relationships","text":"<pre><code>graph LR\n    subgraph \"Entry Points\"\n        CLI[run_pulsepal.py]\n        WEB[chainlit_app.py]\n    end\n\n    subgraph \"Core Modules\"\n        MAIN[main_agent.py]\n        TOOLS[tools.py]\n        DEPS[dependencies.py]\n    end\n\n    subgraph \"Service Modules\"\n        RAG[rag_service.py]\n        SETTINGS[settings.py]\n        PROVIDERS[providers.py]\n        LOGGER[conversation_logger.py]\n    end\n\n    subgraph \"Support Modules\"\n        PROMPTS[system_prompts.py]\n        ROUTER[semantic_router.py]\n        UTILS[utils.py]\n    end\n\n    CLI --&gt; MAIN\n    WEB --&gt; MAIN\n    MAIN --&gt; TOOLS\n    MAIN --&gt; DEPS\n    MAIN --&gt; SETTINGS\n    TOOLS --&gt; RAG\n    DEPS --&gt; RAG\n    RAG --&gt; PROVIDERS\n    MAIN --&gt; PROMPTS\n    MAIN --&gt; ROUTER\n    MAIN --&gt; LOGGER\n    RAG --&gt; UTILS\n</code></pre>"},{"location":"mdDocs/ARCHITECTURE_DIAGRAMS/#session-management-flow","title":"Session Management Flow","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; New: User starts conversation\n    New --&gt; Active: Session created\n    Active --&gt; Active: Query processed\n    Active --&gt; Inactive: No activity (2h)\n    Inactive --&gt; Active: User returns\n    Active --&gt; Expired: 24 hours passed\n    Inactive --&gt; Expired: 24 hours passed\n    Expired --&gt; Archived: Cleanup process\n    Archived --&gt; Deleted: 7 days passed\n    Deleted --&gt; [*]\n\n    note right of Active\n        - Stores conversation history\n        - Tracks language preference\n        - Maintains code examples\n    end note\n\n    note right of Archived\n        - Compressed storage\n        - Historical reference\n        - Can be restored\n    end note\n</code></pre>"},{"location":"mdDocs/ARCHITECTURE_DIAGRAMS/#rag-service-architecture","title":"RAG Service Architecture","text":"<pre><code>graph TD\n    subgraph \"Query Processing\"\n        QUERY[User Query]\n        ROUTER[Query Router]\n        OPTIMIZE[Query Optimizer]\n    end\n\n    subgraph \"Search Methods\"\n        DOC[Documentation Search]\n        FUNC[Function Search]\n        EXAMPLE[Example Search]\n        CODE[Code Search]\n    end\n\n    subgraph \"Search Strategy\"\n        VECTOR[Vector Search]\n        KEYWORD[Keyword Search]\n        HYBRID[Hybrid Search]\n    end\n\n    subgraph \"Results\"\n        FORMAT[Result Formatter]\n        CACHE[Result Cache]\n        RESPONSE[Final Response]\n    end\n\n    QUERY --&gt; ROUTER\n    ROUTER --&gt; OPTIMIZE\n\n    OPTIMIZE --&gt; DOC\n    OPTIMIZE --&gt; FUNC\n    OPTIMIZE --&gt; EXAMPLE\n    OPTIMIZE --&gt; CODE\n\n    DOC --&gt; HYBRID\n    FUNC --&gt; HYBRID\n    EXAMPLE --&gt; VECTOR\n    CODE --&gt; KEYWORD\n\n    HYBRID --&gt; FORMAT\n    VECTOR --&gt; FORMAT\n    KEYWORD --&gt; FORMAT\n\n    FORMAT --&gt; CACHE\n    CACHE --&gt; RESPONSE\n</code></pre>"},{"location":"mdDocs/ARCHITECTURE_DIAGRAMS/#decision-flow-built-in-vs-rag-search","title":"Decision Flow - Built-in vs RAG Search","text":"<pre><code>flowchart TD\n    START[User Query] --&gt; ANALYZE[Analyze Query]\n    ANALYZE --&gt; PHYSICS{Pure Physics?}\n\n    PHYSICS --&gt;|Yes| BUILTIN[Use Built-in Knowledge]\n    PHYSICS --&gt;|No| SPECIFIC{Specific Pulseq?}\n\n    SPECIFIC --&gt;|Yes| CHECKFUNC{Function Name?}\n    SPECIFIC --&gt;|No| GENERAL{General MRI?}\n\n    CHECKFUNC --&gt;|Yes| RAGSEARCH[Force RAG Search]\n    CHECKFUNC --&gt;|No| CHECKEXAMPLE{Code Example?}\n\n    CHECKEXAMPLE --&gt;|Yes| RAGSEARCH\n    CHECKEXAMPLE --&gt;|No| BUILTIN\n\n    GENERAL --&gt;|Yes| BUILTIN\n    GENERAL --&gt;|No| RAGSEARCH\n\n    BUILTIN --&gt; GEMINI[Generate with Gemini]\n    RAGSEARCH --&gt; SEARCH[Search Supabase]\n    SEARCH --&gt; AUGMENT[Augment Context]\n    AUGMENT --&gt; GEMINI\n\n    GEMINI --&gt; RESPONSE[Final Response]\n</code></pre>"},{"location":"mdDocs/ARCHITECTURE_DIAGRAMS/#component-interaction-diagram","title":"Component Interaction Diagram","text":"<pre><code>graph TB\n    subgraph \"Application Layer\"\n        UI[User Interface]\n    end\n\n    subgraph \"Agent Layer\"\n        AGENT[PulsePal Agent]\n        TOOLS[Agent Tools]\n        CONTEXT[Conversation Context]\n    end\n\n    subgraph \"Service Layer\"\n        RAG[RAG Service]\n        SESSION[Session Service]\n        CONFIG[Configuration Service]\n    end\n\n    subgraph \"Data Layer\"\n        VECTORDB[(Supabase&lt;br/&gt;Vector DB)]\n        SESSIONS[(Session&lt;br/&gt;Storage)]\n        LOGS[(Conversation&lt;br/&gt;Logs)]\n    end\n\n    subgraph \"External APIs\"\n        LLM[Google Gemini API]\n        EMBED[Embeddings API]\n    end\n\n    UI &lt;--&gt; AGENT\n    AGENT &lt;--&gt; TOOLS\n    AGENT &lt;--&gt; CONTEXT\n    TOOLS &lt;--&gt; RAG\n    CONTEXT &lt;--&gt; SESSION\n    AGENT &lt;--&gt; CONFIG\n    RAG &lt;--&gt; VECTORDB\n    SESSION &lt;--&gt; SESSIONS\n    AGENT --&gt; LOGS\n    RAG &lt;--&gt; EMBED\n    AGENT &lt;--&gt; LLM\n</code></pre>"},{"location":"mdDocs/ARCHITECTURE_DIAGRAMS/#deployment-architecture","title":"Deployment Architecture","text":"<pre><code>graph LR\n    subgraph \"Development\"\n        DEV[Local Development]\n        DEVDB[(Local Supabase)]\n    end\n\n    subgraph \"Production\"\n        PROD[Production Server]\n        PRODDB[(Production Supabase)]\n\n        subgraph \"Services\"\n            API[API Server]\n            WEB[Web Server]\n            WORKER[Background Workers]\n        end\n    end\n\n    subgraph \"External\"\n        GEMINI[Google Gemini]\n        EMBED[Google Embeddings]\n    end\n\n    DEV --&gt; DEVDB\n    DEV --&gt; GEMINI\n    DEV --&gt; EMBED\n\n    PROD --&gt; PRODDB\n    API --&gt; GEMINI\n    API --&gt; EMBED\n    WEB --&gt; API\n    WORKER --&gt; PRODDB\n\n    style DEV fill:#e1f5fe\n    style PROD fill:#c8e6c9\n    style GEMINI fill:#fff3e0\n    style EMBED fill:#fff3e0\n</code></pre>"},{"location":"mdDocs/ARCHITECTURE_DIAGRAMS/#error-handling-flow","title":"Error Handling Flow","text":"<pre><code>flowchart TD\n    REQUEST[User Request] --&gt; TRY{Try Process}\n\n    TRY --&gt;|Success| RESPONSE[Return Response]\n    TRY --&gt;|API Error| APIHANDLE{API Handler}\n    TRY --&gt;|Session Error| SESSIONHANDLE{Session Handler}\n    TRY --&gt;|RAG Error| RAGHANDLE{RAG Handler}\n\n    APIHANDLE --&gt;|Rate Limit| WAIT[Wait &amp; Retry]\n    APIHANDLE --&gt;|Auth Error| FAIL[Return Error]\n\n    SESSIONHANDLE --&gt;|Not Found| CREATE[Create New Session]\n    SESSIONHANDLE --&gt;|Corrupted| REBUILD[Rebuild Session]\n\n    RAGHANDLE --&gt;|No Results| FALLBACK[Use Built-in Knowledge]\n    RAGHANDLE --&gt;|Timeout| CACHE[Check Cache]\n\n    WAIT --&gt; TRY\n    CREATE --&gt; TRY\n    REBUILD --&gt; TRY\n    FALLBACK --&gt; RESPONSE\n    CACHE --&gt; RESPONSE\n    FAIL --&gt; ERROR[Error Message]\n</code></pre>"},{"location":"mdDocs/ARCHITECTURE_DIAGRAMS/#performance-optimization-strategy","title":"Performance Optimization Strategy","text":"<pre><code>graph TD\n    subgraph \"Query Processing\"\n        Q1[Query Analysis&lt;br/&gt;~50ms]\n        Q2[Semantic Routing&lt;br/&gt;~100ms]\n    end\n\n    subgraph \"Knowledge Decision\"\n        D1{Use RAG?}\n        D2[Built-in Knowledge&lt;br/&gt;~0ms]\n        D3[RAG Search&lt;br/&gt;~500-1000ms]\n    end\n\n    subgraph \"Response Generation\"\n        G1[Gemini Processing&lt;br/&gt;~1000-2000ms]\n        G2[Format Response&lt;br/&gt;~50ms]\n    end\n\n    subgraph \"Optimizations\"\n        O1[Session Cache]\n        O2[Result Cache]\n        O3[Query Batching]\n    end\n\n    Q1 --&gt; Q2\n    Q2 --&gt; D1\n    D1 --&gt;|No 90%| D2\n    D1 --&gt;|Yes 10%| D3\n    D2 --&gt; G1\n    D3 --&gt; G1\n    G1 --&gt; G2\n\n    O1 -.-&gt; Q1\n    O2 -.-&gt; D3\n    O3 -.-&gt; G1\n\n    style D2 fill:#c8e6c9\n    style D3 fill:#ffccbc\n</code></pre>"},{"location":"mdDocs/ARCHITECTURE_DIAGRAMS/#testing-coverage-map","title":"Testing Coverage Map","text":"<pre><code>graph LR\n    subgraph \"Unit Tests\"\n        UT1[main_agent.py&lt;br/&gt;90% coverage]\n        UT2[rag_service.py&lt;br/&gt;85% coverage]\n        UT3[dependencies.py&lt;br/&gt;95% coverage]\n        UT4[tools.py&lt;br/&gt;100% coverage]\n    end\n\n    subgraph \"Integration Tests\"\n        IT1[Agent + RAG&lt;br/&gt;80% coverage]\n        IT2[Session Flow&lt;br/&gt;85% coverage]\n        IT3[API Integration&lt;br/&gt;75% coverage]\n    end\n\n    subgraph \"E2E Tests\"\n        E2E1[CLI Workflow&lt;br/&gt;70% coverage]\n        E2E2[Web Workflow&lt;br/&gt;60% coverage]\n        E2E3[Full Query Flow&lt;br/&gt;80% coverage]\n    end\n\n    UT1 --&gt; IT1\n    UT2 --&gt; IT1\n    UT3 --&gt; IT2\n    UT4 --&gt; IT3\n\n    IT1 --&gt; E2E3\n    IT2 --&gt; E2E3\n    IT3 --&gt; E2E1\n    IT3 --&gt; E2E2\n\n    style UT4 fill:#c8e6c9\n    style UT3 fill:#c8e6c9\n    style UT1 fill:#dcedc8\n    style E2E2 fill:#ffccbc\n</code></pre> <p>These diagrams use Mermaid syntax and can be rendered in: - GitHub markdown files - VS Code with Mermaid extension - Online at mermaid.live - MkDocs documentation</p> <p>To update diagrams, edit the Mermaid code blocks above.</p>"},{"location":"mdDocs/PROJECT_OVERVIEW/","title":"PulsePal Project Overview","text":""},{"location":"mdDocs/PROJECT_OVERVIEW/#what-is-pulsepal","title":"What is PulsePal?","text":"<p>PulsePal is an intelligent MRI sequence programming assistant that combines deep MRI physics knowledge with the Pulseq framework expertise. Built with Google Gemini 2.5 Flash and PydanticAI, it provides researchers and engineers with instant, accurate guidance for MRI sequence development.</p>"},{"location":"mdDocs/PROJECT_OVERVIEW/#key-features","title":"Key Features","text":"<ul> <li>Intelligence-First Design: 90% of queries answered using built-in knowledge, selective RAG search only when needed</li> <li>Multi-Language Support: Generates code in MATLAB (default) and Python (pypulseq)</li> <li>Session Management: Maintains conversation context and language preferences</li> <li>Dual Interface: Both CLI and web UI (Chainlit) interfaces</li> <li>Source-Aware RAG: Intelligent routing to API docs, examples, or tutorials based on query intent</li> </ul>"},{"location":"mdDocs/PROJECT_OVERVIEW/#architecture-highlights","title":"Architecture Highlights","text":""},{"location":"mdDocs/PROJECT_OVERVIEW/#single-agent-design","title":"Single Agent Design","text":"<p>PulsePal uses a monolithic intelligent agent architecture without sub-agents or delegation patterns. This design choice optimizes for: - Faster response times (90% improvement over traditional RAG) - Simpler maintenance and debugging - Better context preservation</p>"},{"location":"mdDocs/PROJECT_OVERVIEW/#technology-stack","title":"Technology Stack","text":"<ul> <li>LLM: Google Gemini 2.5 Flash</li> <li>Framework: PydanticAI</li> <li>Vector Database: Supabase with pgvector</li> <li>Embeddings: Google Embeddings API</li> <li>Web UI: Chainlit</li> <li>CLI: Native Python with argparse</li> </ul>"},{"location":"mdDocs/PROJECT_OVERVIEW/#quick-start","title":"Quick Start","text":""},{"location":"mdDocs/PROJECT_OVERVIEW/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>Google Cloud API key</li> <li>Supabase project credentials</li> </ul>"},{"location":"mdDocs/PROJECT_OVERVIEW/#installation","title":"Installation","text":"<pre><code># Clone repository\ngit clone https://github.com/yourusername/pulsepal.git\ncd pulsepal\n\n# Install dependencies\npip install -r requirements.txt\n\n# Configure environment\ncp .env.example .env\n# Edit .env with your API keys\n</code></pre>"},{"location":"mdDocs/PROJECT_OVERVIEW/#basic-usage","title":"Basic Usage","text":""},{"location":"mdDocs/PROJECT_OVERVIEW/#cli-mode","title":"CLI Mode","text":"<pre><code># Interactive mode\npython run_pulsepal.py\n\n# Single query\npython run_pulsepal.py \"How do I create a gradient echo sequence?\"\n</code></pre>"},{"location":"mdDocs/PROJECT_OVERVIEW/#web-ui","title":"Web UI","text":"<pre><code>chainlit run chainlit_app.py\n</code></pre>"},{"location":"mdDocs/PROJECT_OVERVIEW/#python-api","title":"Python API","text":"<pre><code>from pulsepal.main_agent import run_pulsepal\n\nsession_id, response = await run_pulsepal(\"What is T1 relaxation?\")\n</code></pre>"},{"location":"mdDocs/PROJECT_OVERVIEW/#documentation-structure","title":"Documentation Structure","text":"<ul> <li>API_REFERENCE.md - Complete API documentation</li> <li>ARCHITECTURE_DIAGRAMS.md - Visual system architecture</li> <li>QUICK_REFERENCE.md - Common commands and usage patterns</li> <li>SESSION_MANAGEMENT.md - Session handling details</li> </ul>"},{"location":"mdDocs/PROJECT_OVERVIEW/#project-structure","title":"Project Structure","text":"<pre><code>pulsepal/\n\u251c\u2500\u2500 pulsepal/              # Core package\n\u2502   \u251c\u2500\u2500 main_agent.py     # Main PulsePal agent\n\u2502   \u251c\u2500\u2500 rag_service.py    # RAG service implementation\n\u2502   \u251c\u2500\u2500 dependencies.py   # Session management\n\u2502   \u251c\u2500\u2500 tools.py          # Agent tools\n\u2502   \u2514\u2500\u2500 settings.py       # Configuration\n\u251c\u2500\u2500 chainlit_app.py       # Web UI interface\n\u251c\u2500\u2500 run_pulsepal.py       # CLI interface\n\u251c\u2500\u2500 docs/                 # Documentation\n\u251c\u2500\u2500 tests/                # Test suite\n\u2514\u2500\u2500 requirements.txt      # Dependencies\n</code></pre>"},{"location":"mdDocs/PROJECT_OVERVIEW/#development-principles","title":"Development Principles","text":""},{"location":"mdDocs/PROJECT_OVERVIEW/#intelligence-first-approach","title":"Intelligence-First Approach","text":"<ul> <li>Trust Gemini's built-in knowledge for general MRI physics</li> <li>Use RAG search selectively for Pulseq-specific functions</li> <li>Function detection provides hints, not restrictions</li> </ul>"},{"location":"mdDocs/PROJECT_OVERVIEW/#fail-fast-policy","title":"Fail-Fast Policy","text":"<ul> <li>No graceful fallbacks that mask errors</li> <li>Clear error messages for debugging</li> <li>Explicit validation when needed</li> </ul>"},{"location":"mdDocs/PROJECT_OVERVIEW/#session-continuity","title":"Session Continuity","text":"<ul> <li>Preserve conversation context across interactions</li> <li>Track language preferences automatically</li> <li>Maintain code examples within sessions</li> </ul>"},{"location":"mdDocs/PROJECT_OVERVIEW/#performance-characteristics","title":"Performance Characteristics","text":"<ul> <li>Response Time: 1-3 seconds for built-in knowledge, 2-5 seconds with RAG</li> <li>Accuracy: 95%+ for common Pulseq patterns</li> <li>Session Duration: 24 hours (configurable)</li> <li>Concurrent Users: Unlimited (API rate limits apply)</li> </ul>"},{"location":"mdDocs/PROJECT_OVERVIEW/#testing","title":"Testing","text":"<pre><code># Run test suite\npytest\n\n# With coverage\npytest --cov=pulsepal\n\n# Specific tests\npytest tests/test_main_agent.py\n</code></pre>"},{"location":"mdDocs/PROJECT_OVERVIEW/#support","title":"Support","text":"<ul> <li>Issues: GitHub Issues</li> <li>Email: rmoskwa@wisc.edu</li> <li>Documentation: This directory</li> </ul>"},{"location":"mdDocs/PROJECT_OVERVIEW/#license","title":"License","text":"<p>MIT License - See LICENSE file for details</p>"},{"location":"mdDocs/PULSEPAL_VISION/","title":"PulsePal Vision Document","text":""},{"location":"mdDocs/PULSEPAL_VISION/#executive-summary","title":"Executive Summary","text":"<p>PulsePal is an intelligent MRI sequence programming assistant that serves as an expert partner for researchers, scientists, and engineers developing Pulseq sequences. This document outlines the strategic vision for what PulsePal should know, how it should assist users, and the boundaries of its expertise.</p> <p>Core Mission: Enable researchers to efficiently develop, deploy, and debug MRI sequences using the Pulseq framework by providing practical, focused expertise at the intersection of MRI physics and sequence programming.</p>"},{"location":"mdDocs/PULSEPAL_VISION/#knowledge-distribution-strategy","title":"Knowledge Distribution Strategy","text":""},{"location":"mdDocs/PULSEPAL_VISION/#what-the-base-llm-gemini-already-provides","title":"What the Base LLM (Gemini) Already Provides","text":"<p>The base LLM inherently understands: - MRI Physics: T1/T2 relaxation, Bloch equations, k-space theory, contrast mechanisms - Sequence Concepts: What spin echo vs gradient echo means, how EPI works, diffusion principles - Building Block Logic: Can reason about sequence components and their combinations - General Programming: MATLAB syntax, debugging strategies, code optimization - Mathematical Concepts: Fourier transforms, linear algebra, signal processing</p>"},{"location":"mdDocs/PULSEPAL_VISION/#what-pulsepals-knowledge-base-must-provide","title":"What PulsePal's Knowledge Base Must Provide","text":"<p>PulsePal adds value through: - Pulseq-Specific Syntax: Exact API calls, parameter formats, version-specific features - Working Code Examples: Complete, tested implementations that actually run - Vendor Conversion Details: TRID labels, seq2ge specifics, timing requirements - Pulseq Gotchas: Block boundary requirements, timing grid constraints, common errors - Validated Patterns: Proven solutions to specific Pulseq challenges - Current Best Practices: Community-established patterns for Pulseq 1.5.0</p>"},{"location":"mdDocs/PULSEPAL_VISION/#the-three-pillars-of-pulsepal-knowledge","title":"The Three Pillars of PulsePal Knowledge","text":"<p>PulsePal's expertise is organized around three fundamental pillars that cover the complete sequence development lifecycle:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   PILLAR 1: BUILDING                     \u2502\n\u2502              \"How to construct sequences\"                \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                   PILLAR 2: DEPLOYING                    \u2502\n\u2502              \"How to run on real scanners\"               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                   PILLAR 3: DEBUGGING                    \u2502\n\u2502            \"Why it's not working and how to fix\"         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"mdDocs/PULSEPAL_VISION/#pillar-1-building-the-pulseq-construction-kit","title":"PILLAR 1: BUILDING - The Pulseq Construction Kit","text":""},{"location":"mdDocs/PULSEPAL_VISION/#11-the-pulseq-language-knowledge-base-critical","title":"1.1 The Pulseq Language (Knowledge Base Critical)","text":"<p>While the LLM understands MRI concepts, PulsePal's knowledge base must provide exact Pulseq syntax:</p> <pre><code>% Core sequence construction\nmr.Sequence()           % Sequence container\nmr.opts()              % System specifications\n\n% RF pulse generation\nmr.makeSincPulse()     % Sinc pulses for slice selection\nmr.makeBlockPulse()    % Rectangular pulses\nmr.makeGaussPulse()    % Gaussian pulses\nmr.makeArbitraryRf()   % Custom RF waveforms\n\n% Gradient generation\nmr.makeTrapezoid()     % Trapezoidal gradients\nmr.makeArbitraryGrad() % Arbitrary gradient waveforms\nmr.makeExtendedTrapezoid() % Extended trapezoids\n\n% Data acquisition\nmr.makeAdc()           % ADC events\nmr.makeDelay()         % Timing delays\n\n% Sequence assembly\nseq.addBlock()         % Add events to sequence\nseq.write()            % Export to .seq file\nseq.checkTiming()      % Validate timing\nseq.plot()             % Visualize sequence\n</code></pre>"},{"location":"mdDocs/PULSEPAL_VISION/#12-common-sequence-structure-observational-not-prescriptive","title":"1.2 Common Sequence Structure (Observational, Not Prescriptive)","text":"<p>Our knowledge base contains ~100 verified sequence implementations that demonstrate various approaches to Pulseq programming. While each sequence is unique, many share common organizational patterns:</p> <ul> <li>Initialization: System limits and sequence object setup</li> <li>Parameter Definition: FOV, resolution, timing parameters</li> <li>Block Construction: Building RF, gradient, and ADC events</li> <li>Sequence Assembly: Combining blocks with appropriate timing</li> <li>Validation: Checking timing and hardware constraints</li> <li>Export: Writing the .seq file</li> </ul> <p>These patterns emerge naturally from good programming practices and Pulseq's design, but innovative sequences may deviate from this structure when needed. The LLM learns from all ~100 examples to understand both common patterns and creative variations.</p> <p>Example of a typical structure (not mandatory): <pre><code>% Common initialization pattern\nsys = mr.opts('MaxGrad', 40, 'GradUnit', 'mT/m', ...);\nseq = mr.Sequence(sys);\n\n% Parameter definitions vary by sequence needs\nFOV = 256e-3; \nNx = 128; \nTE = 10e-3;\nTR = 100e-3;\n\n% Block construction depends on sequence type\n[rf, gz] = mr.makeSincPulse(flip, 'Duration', 3e-3, ...);\ngx = mr.makeTrapezoid('x', 'Area', kx_area, ...);\nadc = mr.makeAdc(Nx, 'Duration', adc_dur, ...);\n\n% Assembly patterns vary significantly\nfor i = 1:Ny\n    seq.addBlock(rf, gz);\n    seq.addBlock(gx, adc);\n    seq.addBlock(spoiler);\nend\n\n% Validation and export are recommended best practices\n[ok, error_report] = seq.checkTiming();\nseq.write('sequence.seq');\n</code></pre></p>"},{"location":"mdDocs/PULSEPAL_VISION/#13-modular-building-blocks-approach-llm-examples","title":"1.3 Modular Building Blocks Approach (LLM + Examples)","text":"<p>The LLM already understands sequence building blocks conceptually. PulsePal's knowledge base provides the Pulseq-specific implementations:</p>"},{"location":"mdDocs/PULSEPAL_VISION/#core-building-blocks-llm-knows-concepts-kb-provides-code","title":"Core Building Blocks (LLM Knows Concepts, KB Provides Code)","text":""},{"location":"mdDocs/PULSEPAL_VISION/#1-echo-generation-mechanisms","title":"1. Echo Generation Mechanisms","text":"<ul> <li>Spin Echo (SE): 90\u00b0-180\u00b0 RF pulse pair</li> <li>Gradient Echo (GRE): Gradient reversal for echo formation</li> <li>Stimulated Echo: Three RF pulses with magnetization storage</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#2-magnetization-preparation-modules","title":"2. Magnetization Preparation Modules","text":"<ul> <li>Inversion Recovery (IR): 180\u00b0 inversion pulse</li> <li>Saturation: Regional or frequency-selective suppression</li> <li>Diffusion Gradients: Motion-sensitizing gradient pairs</li> <li>T2 Preparation: T2-weighting independent of readout</li> <li>Flow Encoding: Velocity/phase encoding gradients</li> <li>Magnetization Transfer: Off-resonance saturation</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#3-k-space-trajectoriesreadout-strategies","title":"3. K-space Trajectories/Readout Strategies","text":"<ul> <li>Cartesian: Line-by-line rectangular sampling</li> <li>Echo Planar Imaging (EPI): Rapid zigzag through k-space</li> <li>Spiral: Spiral in/out trajectories (clinical use in fMRI, perfusion)</li> <li>Radial: Spoke-based sampling (clinical use in motion-robust imaging)</li> <li>PROPELLER/BLADE: Rotating strips (clinical use for motion correction)</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#4-acceleration-techniques","title":"4. Acceleration Techniques","text":"<ul> <li>Echo Trains: Multiple echoes per excitation (TSE/FSE)</li> <li>Parallel Imaging: GRAPPA/SENSE undersampling</li> <li>Simultaneous Multi-Slice (SMS): Multiple slices per TR (clinical in DTI/fMRI)</li> <li>Partial Fourier: Exploiting k-space symmetry</li> <li>Compressed Sensing: Sparse sampling with reconstruction</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#5-spatial-encoding-strategies","title":"5. Spatial Encoding Strategies","text":"<ul> <li>2D Multi-slice: Sequential or interleaved slices</li> <li>3D Volume: Full volume encoding</li> <li>Multi-slab 3D: Multiple thin 3D volumes</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#common-clinical-combinations","title":"Common Clinical Combinations","text":"<p>PulsePal should know how these blocks combine into standard sequences:</p> <pre><code>% DWI = Spin Echo + Diffusion Gradients + EPI Readout\nDWI_sequence = SE_preparation() + diffusion_module(b_value) + EPI_readout();\n\n% MPRAGE = Inversion Recovery + 3D + Spoiled GRE\nMPRAGE = IR_prep(TI) + volume_encoding() + spoiled_GRE_readout();\n\n% TSE = Spin Echo + Echo Train\nTSE = spin_echo() + echo_train(ETL);\n\n% bSSFP = Gradient Echo + Balanced Gradients + Steady State\nbSSFP = gradient_echo() + balance_gradients() + steady_state();\n\n% HASTE = Single-shot TSE + Half-Fourier\nHASTE = single_shot() + TSE_train() + partial_fourier();\n</code></pre>"},{"location":"mdDocs/PULSEPAL_VISION/#modular-programming-benefits","title":"Modular Programming Benefits","text":"<p>This approach enables: - Creative combinations: DWI with spiral readout, IR-prepared EPI, etc. - Easy modifications: Swap readout modules, add preparation pulses - Clear understanding: Each block has defined inputs/outputs - Reusable code: Write once, combine many ways - Educational clarity: Learn blocks individually, then combine</p>"},{"location":"mdDocs/PULSEPAL_VISION/#14-timing-safety-calculations-llm-physics-pulseq-methods","title":"1.4 Timing &amp; Safety Calculations (LLM Physics + Pulseq Methods)","text":"<p>The LLM understands the physics; the knowledge base provides Pulseq-specific calculation methods:</p> <p>LLM Handles: - Why TE/TR matter - Gradient moment physics - SAR/PNS concepts</p> <p>Knowledge Base Provides: - <code>seq.checkTiming()</code> usage and interpretation - Pulseq's timing grid (10\u03bcs) constraints - Block duration calculation specifics - Pulseq safety check implementations</p>"},{"location":"mdDocs/PULSEPAL_VISION/#pillar-2-deploying-from-code-to-scanner","title":"PILLAR 2: DEPLOYING - From Code to Scanner","text":""},{"location":"mdDocs/PULSEPAL_VISION/#21-the-seq-file-format-knowledge-base-critical","title":"2.1 The .seq File Format (Knowledge Base Critical)","text":"<p>This is pure Pulseq-specific knowledge the LLM won't have: - Block structure and timing - Event definitions - Shape definitions - Version differences (1.4.0 vs 1.5.0) - Direct .seq file debugging</p>"},{"location":"mdDocs/PULSEPAL_VISION/#22-vendor-translation-requirements-public-knowledge-only","title":"2.2 Vendor Translation Requirements (Public Knowledge Only)","text":"<p>Critical Context: Vendor interpreters that execute Pulseq sequences on scanners are proprietary and closed-source. PulsePal cannot access the interpreter code itself, but can leverage publicly available information about vendor requirements and adaptation strategies.</p>"},{"location":"mdDocs/PULSEPAL_VISION/#what-pulsepal-can-access-public-domain","title":"What PulsePal CAN Access (Public Domain)","text":"<ul> <li>Open-source adaptation examples (e.g., HarmonizedMRI/SequenceExamples-GE)</li> <li>Published vendor requirements documented in papers and repositories</li> <li>Community-shared conversion patterns and best practices</li> <li>Hardware specifications that are publicly documented</li> <li>Timing constraints discovered through empirical testing</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#ge-scanners","title":"GE Scanners","text":"<pre><code>% What PulsePal knows from PUBLIC sources:\n- TRID labels for segment marking (from public repos)\n- 4\u03bcs gradient raster requirement (documented)\n- 2\u03bcs RF raster requirement (documented)\n- seq2ge/seq2ceq conversion tools (open-source)\n- PulCeq framework usage (published)\n- TOPPE integration options (open-source)\n\n% What PulsePal CANNOT access (proprietary):\n- GE interpreter source code\n- EPIC programming language internals\n- Internal GE reconstruction pipeline\n- Proprietary communication protocols\n- How the interpreter actually executes .seq files\n</code></pre>"},{"location":"mdDocs/PULSEPAL_VISION/#siemens-scanners","title":"Siemens Scanners","text":"<pre><code>% What PulsePal knows from PUBLIC sources:\n- Direct .seq file execution capability (documented)\n- Label extensions for reconstruction (published)\n- Minimal conversion requirements (empirically known)\n- Basic interface requirements (publicly documented)\n\n% What PulsePal CANNOT access (proprietary):\n- Siemens interpreter source code\n- ICE pipeline internals\n- IDEA framework implementation\n- Proprietary protocols\n- Internal execution mechanisms\n</code></pre>"},{"location":"mdDocs/PULSEPAL_VISION/#brukerphilips","title":"Bruker/Philips","text":"<pre><code>% What PulsePal knows from PUBLIC sources:\n- Basic interpreter requirements (documented)\n- Format conversion tools (where available)\n- Known limitations (community reported)\n\n% What PulsePal CANNOT access (proprietary):\n- Bruker/Philips interpreter source code\n- ParaVision/GyroTools internals\n- Proprietary sequence implementations\n- Internal execution details\n</code></pre>"},{"location":"mdDocs/PULSEPAL_VISION/#practical-implications","title":"Practical Implications","text":"<p>Despite not having interpreter access, PulsePal can still effectively help users by: - Providing tested adaptation patterns from public repositories - Sharing empirically-discovered timing requirements - Offering conversion workflows that are known to work - Warning about common vendor-specific pitfalls - Pointing to open-source tools and community resources</p>"},{"location":"mdDocs/PULSEPAL_VISION/#23-practical-scanner-limits-essential","title":"2.3 Practical Scanner Limits (Essential)","text":"<p>General hardware constraints (not model-specific): - Gradient strength: 40-80 mT/m (typical) - Slew rate: 100-200 T/m/s (typical) - RF amplifier: 15-35 kW (typical range) - Duty cycle limitations - NOT: Detailed specs for every scanner model</p>"},{"location":"mdDocs/PULSEPAL_VISION/#24-deployment-workflow-essential","title":"2.4 Deployment Workflow (Essential)","text":"<p>Pre-deployment checklist: 1. Timing validation (<code>checkTiming()</code>) 2. Gradient moment balance check 3. SAR/PNS prediction 4. Hardware limits verification 5. Phantom testing protocol 6. Safety parameter review</p> <p>Common deployment issues: - \"Sequence won't load\" \u2192 Version compatibility, format errors - \"No signal acquired\" \u2192 ADC timing, RF scaling - \"Unexpected artifacts\" \u2192 Gradient delays, timing errors - \"Scanner errors/warnings\" \u2192 Hardware limits, safety checks</p>"},{"location":"mdDocs/PULSEPAL_VISION/#pillar-3-debugging-the-problem-solver","title":"PILLAR 3: DEBUGGING - The Problem Solver","text":""},{"location":"mdDocs/PULSEPAL_VISION/#31-symptom-to-cause-diagnostic-map-essential","title":"3.1 Symptom-to-Cause Diagnostic Map (Essential)","text":"<pre><code>SYMPTOM                     \u2192 CHECK                      \u2192 FIX\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\"Images shifted/distorted\"  \u2192 Trajectory delays          \u2192 Add traj_recon_delay\n\"Ghosting in EPI\"           \u2192 Odd/even echo mismatch     \u2192 Phase correction\n\"No signal\"                 \u2192 RF/ADC/gradient timing     \u2192 Check each block\n\"Low SNR\"                   \u2192 Flip angle, TR/TE          \u2192 Optimize parameters\n\"Banding artifacts\"         \u2192 B0 inhomogeneity           \u2192 Increase bandwidth\n\"Flow artifacts\"            \u2192 Gradient moments           \u2192 Add flow comp\n\"Chemical shift\"            \u2192 Bandwidth too low          \u2192 Increase BW\n\"Aliasing/Wraparound\"       \u2192 FOV too small              \u2192 Increase FOV\n\"Gibbs ringing\"             \u2192 k-space truncation         \u2192 Increase resolution\n</code></pre>"},{"location":"mdDocs/PULSEPAL_VISION/#32-pulseq-specific-issues-essential","title":"3.2 Pulseq-Specific Issues (Essential)","text":"<p>Common Pulseq gotchas and solutions: - Gradient balance requirements at block boundaries - RF phase accumulation and spoiling - Block duration rounding (10\u03bcs grid) - Arbitrary gradient resampling artifacts - ADC delay requirements - Maximum block duration limits - Gradient area calculation precision</p>"},{"location":"mdDocs/PULSEPAL_VISION/#33-visualization-testing-tools-essential","title":"3.3 Visualization &amp; Testing Tools (Essential)","text":"<ul> <li>Sequence plotting (<code>seq.plot()</code>)</li> <li>K-space trajectory visualization</li> <li>Gradient moment verification</li> <li>RF pulse profile simulation</li> <li>Simple phantom protocols</li> <li>Quality metric calculations</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#division-of-responsibilities","title":"Division of Responsibilities","text":""},{"location":"mdDocs/PULSEPAL_VISION/#base-llm-gemini-handles","title":"Base LLM (Gemini) Handles","text":"<p>The LLM already excels at:</p>"},{"location":"mdDocs/PULSEPAL_VISION/#mri-domain-knowledge","title":"MRI Domain Knowledge","text":"<ul> <li>Physics principles (relaxation, precession, signal formation)</li> <li>Sequence concepts (what EPI does, why use diffusion gradients)</li> <li>Clinical applications (when to use T1 vs T2 weighting)</li> <li>Image artifacts (causes and general solutions)</li> <li>Mathematical foundations (k-space, Fourier relationships)</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#general-programming","title":"General Programming","text":"<ul> <li>MATLAB syntax and best practices</li> <li>Algorithm design and optimization</li> <li>Debugging strategies</li> <li>Code structure and organization</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#reasoning-and-problem-solving","title":"Reasoning and Problem Solving","text":"<ul> <li>Identifying sequence building blocks from descriptions</li> <li>Understanding parameter trade-offs</li> <li>Connecting symptoms to likely causes</li> <li>Suggesting creative solutions</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#pulsepal-knowledge-base-provides","title":"PulsePal Knowledge Base Provides","text":"<p>The knowledge base is essential for:</p>"},{"location":"mdDocs/PULSEPAL_VISION/#pulseq-specific-implementation","title":"Pulseq-Specific Implementation","text":"<pre><code>% CRITICAL: Exact syntax that LLM won't know\nrf = mr.makeSincPulse(flip, 'Duration', 3e-3, 'system', sys);\nseq.addBlock(rf, gz, mr.makeLabel('SET', 'LIN', 1));\n\n% NOT: General concepts like \"create a sinc pulse\"\n</code></pre>"},{"location":"mdDocs/PULSEPAL_VISION/#vendor-specific-details","title":"Vendor-Specific Details","text":"<pre><code>% CRITICAL: GE-specific requirements\nseq.setDefinition('SegmentID', 1);  % TRID label\nsys = mr.opts('gradRasterTime', 4e-6);  % GE requires 4\u03bcs\n\n% NOT: General scanner limitations\n</code></pre>"},{"location":"mdDocs/PULSEPAL_VISION/#pulseq-gotchas-and-patterns","title":"Pulseq Gotchas and Patterns","text":"<pre><code>% CRITICAL: Pulseq-specific constraints\n% Gradients must ramp to zero at block boundaries\ngx_end = mr.makeTrapezoid('x', 'Area', -gx.area);\n\n% NOT: General gradient balancing concepts\n</code></pre>"},{"location":"mdDocs/PULSEPAL_VISION/#working-examples","title":"Working Examples","text":"<pre><code>% CRITICAL: Complete, tested code that runs\n% Full DWI sequence with proper timing, not just concepts\n\n% NOT: Pseudocode or general descriptions\n</code></pre>"},{"location":"mdDocs/PULSEPAL_VISION/#the-sweet-spot","title":"The Sweet Spot","text":"<p>PulsePal adds maximum value when: 1. User knows what they want \u2192 PulsePal provides exact Pulseq code 2. User has working code with errors \u2192 PulsePal identifies Pulseq-specific issues 3. User wants to deploy \u2192 PulsePal provides vendor-specific requirements 4. User needs optimization \u2192 PulsePal provides Pulseq best practices</p>"},{"location":"mdDocs/PULSEPAL_VISION/#knowledge-scope-boundaries","title":"Knowledge Scope Boundaries","text":""},{"location":"mdDocs/PULSEPAL_VISION/#what-pulsepal-should-focus-on","title":"What PulsePal SHOULD Focus On \u2705","text":""},{"location":"mdDocs/PULSEPAL_VISION/#core-competencies","title":"Core Competencies","text":"<ul> <li>Complete Pulseq API mastery</li> <li>Practical sequence implementation</li> <li>Vendor deployment requirements</li> <li>Common debugging patterns</li> <li>Best practices and optimization</li> <li>Educational examples</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#practical-knowledge","title":"Practical Knowledge","text":"<ul> <li>Working code examples</li> <li>Real-world constraints</li> <li>Common parameter ranges</li> <li>Typical use cases</li> <li>Performance trade-offs</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#what-pulsepal-should-not-focus-on","title":"What PulsePal Should NOT Focus On \u274c","text":""},{"location":"mdDocs/PULSEPAL_VISION/#out-of-scope-vendor-internals-proprietaryinaccessible","title":"Out of Scope: Vendor Internals (Proprietary/Inaccessible)","text":"<ul> <li>Interpreter source code (GE, Siemens, Bruker, Philips - all closed-source)</li> <li>Proprietary reconstruction algorithms</li> <li>Scanner operating systems</li> <li>Hardware driver implementations</li> <li>Vendor-specific programming languages (EPIC, IDEA internals)</li> <li>Internal communication protocols</li> <li>Proprietary sequence implementations</li> <li>How interpreters actually execute .seq files (black box to PulsePal)</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#out-of-scope-deep-theory","title":"Out of Scope: Deep Theory","text":"<ul> <li>Quantum mechanical derivations</li> <li>Advanced relaxation theory</li> <li>Hardware design principles</li> <li>RF coil engineering</li> <li>Magnet design</li> <li>Cryogenics</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#out-of-scope-clinical-practice","title":"Out of Scope: Clinical Practice","text":"<ul> <li>Disease-specific protocols</li> <li>Contrast agent administration</li> <li>Patient positioning</li> <li>Clinical interpretation</li> <li>Diagnostic criteria</li> <li>Treatment planning</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#knowledge-hierarchy","title":"Knowledge Hierarchy","text":"<pre><code>Level 1: ESSENTIAL (100% coverage needed)\n\u251c\u2500\u2500 Pulseq API functions and syntax\n\u251c\u2500\u2500 Basic sequence patterns\n\u251c\u2500\u2500 Common errors and fixes\n\u251c\u2500\u2500 Deployment basics\n\u2514\u2500\u2500 File format understanding\n\nLevel 2: COMMON (80% coverage needed)\n\u251c\u2500\u2500 Acceleration techniques (GRAPPA/SENSE basics)\n\u251c\u2500\u2500 Non-Cartesian trajectories\n\u251c\u2500\u2500 Vendor-specific requirements\n\u251c\u2500\u2500 Performance optimization\n\u2514\u2500\u2500 Debugging workflows\n\nLevel 3: ADVANCED (50% coverage needed)\n\u251c\u2500\u2500 Novel sequence techniques\n\u251c\u2500\u2500 Custom trajectory design\n\u251c\u2500\u2500 Research validation methods\n\u251c\u2500\u2500 Multi-site harmonization\n\u2514\u2500\u2500 Publication requirements\n\nLevel 4: REFERENCE (20% coverage needed)\n\u251c\u2500\u2500 Historical context\n\u251c\u2500\u2500 Alternative approaches\n\u251c\u2500\u2500 Theoretical foundations\n\u251c\u2500\u2500 Future developments\n\u2514\u2500\u2500 Related technologies\n</code></pre>"},{"location":"mdDocs/PULSEPAL_VISION/#use-case-coverage","title":"Use Case Coverage","text":""},{"location":"mdDocs/PULSEPAL_VISION/#perfect-for-pulsepal","title":"\u2705 PERFECT for PulsePal","text":"<p>These queries represent PulsePal's sweet spot:</p> <ul> <li>\"How do I create a diffusion-weighted EPI sequence?\"</li> <li>\"Add GRAPPA acceleration to my gradient echo\"</li> <li>\"Calculate minimum TE for these parameters\"</li> <li>\"Convert my sequence for a GE scanner\"</li> <li>\"Why does my sequence have ghosting artifacts?\"</li> <li>\"Implement a spiral readout trajectory\"</li> <li>\"Create a TSE sequence with variable flip angles\"</li> <li>\"Debug timing errors in my sequence\"</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#partial-support","title":"\u26a0\ufe0f PARTIAL Support","text":"<p>These queries PulsePal can partially address with appropriate caveats:</p> <ul> <li>\"Implement compressed sensing\" \u2192 Basic concepts, point to external libraries</li> <li>\"Custom reconstruction pipeline\" \u2192 Sequence-side requirements only</li> <li>\"Real-time cardiac imaging\" \u2192 Sequence design, not triggering hardware</li> <li>\"Machine learning in MRI\" \u2192 Data acquisition considerations only</li> <li>\"Multi-nuclear imaging\" \u2192 Basic frequency calculations</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#out-of-scope","title":"\u274c OUT of Scope","text":"<p>These queries are beyond PulsePal's intended expertise:</p> <ul> <li>\"Fix my Siemens ICE reconstruction pipeline\"</li> <li>\"Design optimal RF coil geometry\"</li> <li>\"Interpret this brain tumor image\"</li> <li>\"Calculate specific absorption rate in tissue\"</li> <li>\"Implement ISMRMRD format converter\"</li> <li>\"Debug vendor-specific error codes\"</li> <li>\"Optimize magnet shimming procedure\"</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#knowledge-base-content-strategy","title":"Knowledge Base Content Strategy","text":""},{"location":"mdDocs/PULSEPAL_VISION/#working-examples-as-foundation","title":"Working Examples as Foundation","text":"<p>The knowledge base is built on a foundation of working, tested Pulseq sequences from the official repository. Each sequence is stored with comprehensive metadata that enables intelligent retrieval and pattern recognition.</p>"},{"location":"mdDocs/PULSEPAL_VISION/#storage-philosophy","title":"Storage Philosophy","text":"<p>Rather than decomposing sequences into rigid components, we store complete working examples with rich metadata that allows the LLM to: 1. Find relevant examples based on multiple criteria (sequence type, trajectory, features, complexity) 2. Recognize patterns across different implementations 3. Synthesize solutions by combining patterns from multiple examples</p> <p>This approach respects that sequences are contextual - a \"diffusion module\" in EPI differs from one in TSE. The LLM's intelligence handles this nuance.</p>"},{"location":"mdDocs/PULSEPAL_VISION/#metadata-categories-for-each-sequence","title":"Metadata Categories for Each Sequence","text":""},{"location":"mdDocs/PULSEPAL_VISION/#core-metadata-what-it-is-and-how-it-works","title":"Core Metadata (What it IS and HOW it works)","text":"<ul> <li>sequence_family: The named pattern (EPI, TSE, GRE, MPRAGE, bSSFP)</li> <li>trajectory_type: K-space traversal pattern (cartesian, spiral, radial, epi_zigzag)</li> <li>dimensionality: Spatial encoding strategy (2D, 3D, 2D_multislice)</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#features-everything-it-includesdoes","title":"Features (Everything it includes/does)","text":"<p>A comprehensive list that captures all techniques, optimizations, and capabilities: - Physics techniques (fat_saturation, diffusion_weighting, flow_compensation) - Acceleration methods (GRAPPA, partial_fourier, ramp_sampling) - Pulseq optimizations (split_gradients, dynamic_timing) - Vendor-specific elements (TRID_labels, softdelay) - Code characteristics (has_validation, calculates_trajectory)</p>"},{"location":"mdDocs/PULSEPAL_VISION/#practical-metadata-real-world-usage","title":"Practical Metadata (Real-world usage)","text":"<ul> <li>vendor_tested: Which scanners it works on (Siemens, GE)</li> <li>complexity_level: 1-5 scale for user guidance</li> <li>typical_parameters: Standard operating ranges (TE: 30ms, TR: 2s, flip: 15\u00b0)</li> <li>typical_use_cases: Clinical/research applications (fMRI, anatomical, diffusion)</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#retrieval-strategy","title":"Retrieval Strategy","text":"<p>The system uses simple, direct retrieval based on the query:</p>"},{"location":"mdDocs/PULSEPAL_VISION/#sequence-type-query","title":"Sequence Type Query","text":"<p>User: \"I need an EPI sequence\" Action: Return sequences where <code>sequence_family = 'EPI'</code></p>"},{"location":"mdDocs/PULSEPAL_VISION/#featuretechnique-query","title":"Feature/Technique Query","text":"<p>User: \"I need diffusion weighting\" or \"I want fat suppression\" Action: Find sequences where <code>features</code> array contains the requested technique</p>"},{"location":"mdDocs/PULSEPAL_VISION/#trajectory-query","title":"Trajectory Query","text":"<p>User: \"Show me spiral sequences\" Action: Return sequences where <code>trajectory_type = 'spiral'</code></p>"},{"location":"mdDocs/PULSEPAL_VISION/#complexity-based","title":"Complexity-Based","text":"<p>User: Beginner asking for help Action: Start with sequences where <code>complexity_level &lt;= 2</code></p>"},{"location":"mdDocs/PULSEPAL_VISION/#vendor-specific","title":"Vendor-Specific","text":"<p>User: \"I have a GE scanner\" Action: Prioritize sequences where <code>vendor_tested</code> includes 'GE'</p> <p>The LLM handles any complex pattern matching or relationship understanding beyond these simple queries.</p>"},{"location":"mdDocs/PULSEPAL_VISION/#example-based-synthesis","title":"Example-Based Synthesis","text":"<p>When users request novel combinations not in the database (e.g., \"spiral readout with diffusion\"), PulsePal:</p> <ol> <li>Identifies constituent patterns from the request</li> <li>Finds sequences with spiral trajectory</li> <li> <p>Finds sequences with diffusion preparation</p> </li> <li> <p>Shows relevant code sections from each example</p> </li> <li>\"Here's how spiral readout works in spiral_example.m\"</li> <li> <p>\"Here's how diffusion is implemented in writeEpiDiffusion.m\"</p> </li> <li> <p>Guides the combination</p> </li> <li>Explains how to extract each pattern</li> <li>Warns about integration challenges</li> <li> <p>Suggests timing adjustments needed</p> </li> <li> <p>Provides working foundation</p> </li> <li>User starts with tested code, not theory</li> <li>Modifications are grounded in proven patterns</li> </ol>"},{"location":"mdDocs/PULSEPAL_VISION/#knowledge-organization-principles","title":"Knowledge Organization Principles","text":""},{"location":"mdDocs/PULSEPAL_VISION/#keep-it-simple","title":"Keep It Simple","text":"<ul> <li>Store complete, working sequences (not fragments)</li> <li>Use straightforward metadata (type, trajectory, features)</li> <li>Trust the LLM to understand relationships and patterns</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#let-intelligence-emerge","title":"Let Intelligence Emerge","text":"<ul> <li>Don't over-specify what patterns mean</li> <li>Don't create rigid taxonomies</li> <li>The LLM can recognize patterns we haven't explicitly tagged</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#flexible-tagging","title":"Flexible Tagging","text":"<ul> <li>Sequences can have multiple features</li> <li>Features can overlap and combine</li> <li>New features can be added without restructuring</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#storage-implementation","title":"Storage Implementation","text":"<pre><code>-- Simplified metadata structure for a sequence\n{\n  \"file_name\": \"writeEpiDiffusion.m\",\n  \"sequence_family\": \"EPI\",\n  \"trajectory_type\": \"epi_zigzag\",\n  \"dimensionality\": \"2D_multislice\",\n\n  \"features\": [\n    \"diffusion_weighting\",\n    \"fat_saturation\",\n    \"ramp_sampling\",\n    \"split_gradients\",\n    \"has_validation\"\n  ],\n\n  \"vendor_tested\": [\"Siemens\", \"GE\"],\n  \"complexity_level\": 4,\n  \"typical_parameters\": {\"TE\": \"60-100ms\", \"b_value\": \"0-1000\"},\n  \"typical_use_cases\": [\"DTI\", \"DWI\", \"brain_imaging\"]\n}\n</code></pre> <p>The LLM understands that EPI with diffusion_weighting feature implies spin echo contrast mechanism. We don't need to explicitly state every relationship.</p>"},{"location":"mdDocs/PULSEPAL_VISION/#benefits-of-this-approach","title":"Benefits of This Approach","text":"<ol> <li>Simple: Minimal metadata structure that's easy to maintain</li> <li>Honest: Always provides working code, not theoretical components</li> <li>Flexible: Add new features without restructuring</li> <li>Trusts the LLM: Leverages Gemini's deep MRI understanding</li> <li>Practical: Grounded in tested, validated sequences</li> <li>Avoids Over-Engineering: No complex taxonomies or rigid patterns to maintain</li> </ol>"},{"location":"mdDocs/PULSEPAL_VISION/#target-user-profile","title":"Target User Profile","text":""},{"location":"mdDocs/PULSEPAL_VISION/#who-uses-pulsepal","title":"Who Uses PulsePal","text":"<p>PulsePal is designed for MRI researchers who: - Have MRI knowledge but need help with Pulseq syntax - Know their sequence design but struggle with implementation - Understand the physics but need coding assistance - Can describe their goals but need translation to Pulseq</p>"},{"location":"mdDocs/PULSEPAL_VISION/#typical-user-scenarios","title":"Typical User Scenarios","text":""},{"location":"mdDocs/PULSEPAL_VISION/#scenario-1-i-know-what-i-want-help-me-code-it","title":"Scenario 1: \"I know what I want, help me code it\"","text":"<p>User: \"I need a DWI sequence with b=1000, 30 directions, 2mm resolution\" PulsePal: Provides complete Pulseq implementation with proper timing</p>"},{"location":"mdDocs/PULSEPAL_VISION/#scenario-2-my-code-doesnt-work-help-me-debug","title":"Scenario 2: \"My code doesn't work, help me debug\"","text":"<p>User: \"I get timing errors when I add diffusion gradients\" PulsePal: Identifies Pulseq-specific timing constraints and solutions</p>"},{"location":"mdDocs/PULSEPAL_VISION/#scenario-3-how-do-i-deploy-this","title":"Scenario 3: \"How do I deploy this?\"","text":"<p>User: \"I have a working sequence, how do I run it on our GE scanner?\" PulsePal: Provides seq2ge conversion steps, TRID labels, timing adjustments</p>"},{"location":"mdDocs/PULSEPAL_VISION/#scenario-4-translate-this-papers-sequence","title":"Scenario 4: \"Translate this paper's sequence\"","text":"<p>User: \"This paper describes a spiral DWI, how do I implement it?\" PulsePal: Maps paper's description to Pulseq building blocks</p>"},{"location":"mdDocs/PULSEPAL_VISION/#sequence-translation-capability","title":"Sequence Translation Capability","text":""},{"location":"mdDocs/PULSEPAL_VISION/#helping-users-port-non-pulseq-sequences","title":"Helping Users Port Non-Pulseq Sequences","text":"<p>PulsePal should excel at helping researchers translate existing sequences (from papers, vendor sequences, or other frameworks) into Pulseq:</p>"},{"location":"mdDocs/PULSEPAL_VISION/#translation-workflow","title":"Translation Workflow","text":"<ol> <li>Identify the building blocks in the source sequence</li> <li>Map to Pulseq equivalents </li> <li>Handle timing conversions (vendor-specific to Pulseq timing)</li> <li>Preserve critical parameters (TE, TR, flip angles, etc.)</li> <li>Validate the translation (checkTiming, k-space trajectory)</li> </ol>"},{"location":"mdDocs/PULSEPAL_VISION/#example-translation-patterns","title":"Example Translation Patterns","text":"<pre><code>% User: \"I have this Siemens IDEA sequence, how do I convert it?\"\n% PulsePal identifies:\n- RF pulse type \u2192 mr.makeSincPulse() equivalent\n- Gradient events \u2192 mr.makeTrapezoid() with proper areas\n- ADC windows \u2192 mr.makeAdc() with correct timing\n- Spoilers \u2192 Additional gradient blocks\n\n% User: \"I want to implement this sequence from a paper\"\n% PulsePal helps:\n- Extract sequence diagram components\n- Identify preparation modules needed\n- Determine readout strategy\n- Calculate timing requirements\n- Suggest Pulseq implementation approach\n</code></pre>"},{"location":"mdDocs/PULSEPAL_VISION/#key-translation-knowledge","title":"Key Translation Knowledge","text":"<ul> <li>Common vendor terminology mappings</li> <li>Parameter conversion formulas</li> <li>Timing constraint differences</li> <li>Hardware assumption variations</li> <li>Safety calculation methods</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#pulsepals-unique-value-proposition","title":"PulsePal's Unique Value Proposition","text":"<p>\"Your Expert Pulseq Programming Partner\"</p> <p>PulsePal differentiates itself by being:</p> <ol> <li>Modular - Understands sequences as building blocks</li> <li>Practical - Focuses on working code over theory</li> <li>Translational - Helps port sequences to Pulseq</li> <li>Comprehensive - Covers the full sequence-to-scanner pipeline</li> <li>Debugging-Oriented - Excels at problem diagnosis</li> <li>Educational - Teaches while solving</li> <li>Current - Focuses on Pulseq 1.5.0 MATLAB</li> <li>Accessible - Avoids unnecessary complexity</li> </ol>"},{"location":"mdDocs/PULSEPAL_VISION/#success-metrics","title":"Success Metrics","text":"<p>PulsePal will be successful when users can:</p> <ol> <li>Build any standard MRI sequence from scratch</li> <li>Deploy sequences on their scanner successfully</li> <li>Debug issues independently using PulsePal's guidance</li> <li>Learn MRI programming principles through interaction</li> <li>Innovate by extending examples for novel applications</li> </ol>"},{"location":"mdDocs/PULSEPAL_VISION/#implementation-priorities","title":"Implementation Priorities","text":""},{"location":"mdDocs/PULSEPAL_VISION/#phase-1-foundation-immediate","title":"Phase 1: Foundation (Immediate)","text":"<ul> <li>Core Pulseq API coverage</li> <li>Basic sequence examples</li> <li>Essential debugging patterns</li> <li>GE/Siemens deployment basics</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#phase-2-expansion-months-1-3","title":"Phase 2: Expansion (Months 1-3)","text":"<ul> <li>Advanced sequences (DWI, ASL, CEST)</li> <li>Non-Cartesian trajectories</li> <li>Acceleration techniques</li> <li>Comprehensive debugging guides</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#phase-3-refinement-months-3-6","title":"Phase 3: Refinement (Months 3-6)","text":"<ul> <li>Novel sequence patterns</li> <li>Research applications</li> <li>Multi-site considerations</li> <li>Advanced optimization</li> </ul>"},{"location":"mdDocs/PULSEPAL_VISION/#maintenance-philosophy","title":"Maintenance Philosophy","text":"<p>The knowledge base should be: - Living - Updated with new Pulseq releases - Curated - Quality over quantity - Practical - Based on real use cases - Validated - Tested on actual scanners - Accessible - Clear and well-organized</p>"},{"location":"mdDocs/PULSEPAL_VISION/#conclusion","title":"Conclusion","text":"<p>PulsePal's vision is to be the indispensable partner for every Pulseq programmer - from students learning their first sequence to researchers developing novel techniques. By maintaining focus on practical sequence development while avoiding unnecessary complexity, PulsePal can provide maximum value to the MRI development community.</p> <p>This vision document should guide all development decisions, content curation, and feature prioritization for the PulsePal project.</p> <p>Document Version: 1.4 Last Updated: January 22, 2025 Status: Draft - Open for Feedback Changes: - v1.1: Updated Knowledge Base Content Strategy to emphasize working examples with metadata - v1.2: Simplified metadata structure, removed over-engineering, emphasized trusting the LLM - v1.3: Replaced prescriptive \"Six Universal Patterns\" with observational approach based on ~100 verified sequences - v1.4: Clarified that vendor interpreters are proprietary/closed-source; PulsePal relies on public knowledge only</p>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/","title":"Running Pulseq Sequences on GE Scanners: A Researcher's Guide","text":""},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#quick-answer-its-not-just-seq-scanner-scan","title":"Quick Answer: It's Not Just .seq \u2192 Scanner \u2192 Scan","text":"<p>Converting Pulseq files for GE scanners requires an intermediate conversion step and a special interpreter on the scanner. This guide explains the complete workflow and your options.</p>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#overview","title":"Overview","text":"<p>Pulseq is a vendor-neutral MRI sequence format, but GE scanners can't directly run .seq files. You need: 1. Conversion software (on your computer) to translate .seq files to GE format 2. Special interpreter (on the scanner) to execute the converted files</p>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#three-approaches-to-run-pulseq-on-ge","title":"Three Approaches to Run Pulseq on GE","text":""},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#1-pulceq-recommended-for-new-projects","title":"1. PulCeq (Recommended for New Projects)","text":"<ul> <li>Latest approach with direct Pulseq\u2192GE conversion</li> <li>Output format: <code>.pge</code> binary files</li> <li>Scanner requirement: pge2 interpreter</li> <li>Repository: https://github.com/HarmonizedMRI/PulCeq</li> </ul>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#2-pulsegeq-bridge-approach","title":"2. PulseGEq (Bridge Approach)","text":"<ul> <li>Converts Pulseq to TOPPE format</li> <li>Output format: Multiple <code>.mod</code> files + control files</li> <li>Scanner requirement: TOPPE interpreter</li> <li>Repository: https://github.com/toppeMRI/PulseGEq</li> </ul>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#3-toppe-original-ge-solution","title":"3. TOPPE (Original GE Solution)","text":"<ul> <li>Native GE sequence development platform</li> <li>Now recommends starting with Pulseq</li> <li>Repository: https://github.com/toppeMRI/toppe</li> </ul>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#complete-workflow-using-pulceq-recommended","title":"Complete Workflow Using PulCeq (Recommended)","text":""},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#step-1-setup-development-environment","title":"Step 1: Setup Development Environment","text":"<pre><code>% Install dependencies\ngit clone git@github.com:pulseq/pulseq.git\ngit clone git@github.com:HarmonizedMRI/PulCeq.git\n\n% Add to MATLAB path\naddpath pulseq/matlab\naddpath PulCeq/matlab\n</code></pre>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#step-2-create-or-load-your-pulseq-file","title":"Step 2: Create or Load Your Pulseq File","text":"<pre><code>% Option A: Load existing .seq file\nseq = mr.Sequence();\nseq.read('my_sequence.seq');\n\n% Option B: Create new sequence using Pulseq\n% ... your Pulseq code here ...\nseq.write('my_sequence.seq');\n</code></pre>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#step-3-convert-to-ge-format","title":"Step 3: Convert to GE Format","text":"<pre><code>% Convert Pulseq to PulCeq intermediate format\nceq = seq2ceq('my_sequence.seq');\n\n% Optional but recommended: Validate against hardware limits\nsys = pge2.getsys(150e-6, 100e-6, 0.25, 5, 20, 4.2576e3);\npge2.validate(ceq, sys);  % Fix any errors before proceeding\n\n% Write final scanner file\nwriteceq(ceq, 'my_sequence.pge');\n</code></pre>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#step-4-test-before-scanner-optional","title":"Step 4: Test Before Scanner (Optional)","text":"<ul> <li>Use GE's WTools simulator for comprehensive testing</li> <li>Or use basic PulCeq visualization: <pre><code>% Plot first segment\nS = pge2.constructvirtualsegment(ceq.segments(1).blockIDs, ceq.parentBlocks, sys, true);\n</code></pre></li> </ul>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#step-5-transfer-to-scanner","title":"Step 5: Transfer to Scanner","text":"<ul> <li>Copy the <code>.pge</code> file to the scanner host computer</li> <li>Location depends on your site configuration</li> </ul>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#step-6-run-on-scanner","title":"Step 6: Run on Scanner","text":"<ul> <li>Scanner must have pge2 interpreter installed</li> <li>Load and execute through the scanner interface</li> </ul>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#alternative-workflow-using-pulsegeq-for-toppe-interpreter","title":"Alternative Workflow Using PulseGEq (For TOPPE Interpreter)","text":"<p>If your scanner only has the TOPPE interpreter, use PulseGEq to convert Pulseq to TOPPE format:</p>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#step-1-setup-development-environment_1","title":"Step 1: Setup Development Environment","text":"<pre><code>% Install all three dependencies\ngit clone git@github.com:pulseq/pulseq.git\ngit clone git@github.com:toppeMRI/toppe.git\ngit clone git@github.com:toppeMRI/PulseGEq.git\n\n% Add to MATLAB path\naddpath ~/github/pulseq/matlab/     % +mr package\naddpath ~/github/toppe/              % +toppe package  \naddpath ~/github/PulseGEq/           % +pulsegeq package\n</code></pre>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#step-2-convert-pulseq-to-toppe-format","title":"Step 2: Convert Pulseq to TOPPE Format","text":"<pre><code>% Convert .seq file to TOPPE modules and control files\npulsegeq.seq2ge('my_sequence.seq', 'verbose', true);\n\n% Or from a loaded sequence object\nseq = mr.Sequence();\nseq.read('my_sequence.seq');\npulsegeq.seq2ge(seq, 'verbose', true);\n</code></pre>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#step-3-verify-generated-files","title":"Step 3: Verify Generated Files","text":"<p>The conversion creates multiple files: - <code>*.mod</code> files - Waveform modules (RF, gradients) - <code>modules.txt</code> - List of all .mod files - <code>scanloop.txt</code> - Sequence execution instructions - <code>toppe0.entry</code> - Entry point file</p>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#step-4-test-locally-optional","title":"Step 4: Test Locally (Optional)","text":"<pre><code>% Display/test sequence\nnModsPerTR = 3;  % Adjust based on your sequence\ntoppe.playseq(nModsPerTR);\n</code></pre>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#step-5-transfer-to-scanner_1","title":"Step 5: Transfer to Scanner","text":"<ul> <li>Create folder on scanner: <code>/usr/g/research/pulseq/[your_folder]/</code></li> <li>Copy all generated files to this folder</li> <li>Ensure <code>toppe0.entry</code> is in <code>/usr/g/research/pulseq/</code></li> </ul>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#step-6-run-on-scanner_1","title":"Step 6: Run on Scanner","text":"<ul> <li>Set CV1=0 on the scanner interface (or match your entry file number)</li> <li>Scanner loads sequence via TOPPE interpreter</li> </ul>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#native-toppe-workflow-without-pulseq","title":"Native TOPPE Workflow (Without Pulseq)","text":"<p>For researchers working directly with TOPPE or modifying existing TOPPE sequences:</p>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#step-1-setup-toppe-environment","title":"Step 1: Setup TOPPE Environment","text":"<pre><code>% Clone TOPPE repository\ngit clone git@github.com:toppeMRI/toppe.git\n\n% Add to path\naddpath ~/github/toppe/\n</code></pre>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#step-2-create-sequence-modules","title":"Step 2: Create Sequence Modules","text":"<pre><code>% Design individual modules (waveforms)\n% Example: Create excitation module\nrf = toppe.utils.rf.makeslr(90, 2, 4, ...);  % 90\u00b0 pulse, 2ms, TBW=4\ntoppe.writemod('rf', 'tipdown.mod', ...);\n\n% Create readout module with gradients\n[gx, gy, gz] = toppe.utils.makeepi(...);\ntoppe.writemod('gx', gx, 'gy', gy, 'gz', gz, 'readout.mod', ...);\n</code></pre>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#step-3-create-control-files","title":"Step 3: Create Control Files","text":"<pre><code>% Write modules.txt listing all .mod files\ntoppe.writemodulelistfile({'tipdown.mod', 'readout.mod'});\n\n% Create scanloop.txt defining sequence order\n% This requires careful planning of module execution order\ntoppe.loop2txt(...);  % See TOPPE documentation for details\n</code></pre>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#step-4-preflight-check","title":"Step 4: Preflight Check","text":"<pre><code>% Validate sequence and create safety file\ntoppe.preflightcheck('toppe0.entry', 'seqstamp.txt');\n</code></pre>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#step-5-create-entry-file","title":"Step 5: Create Entry File","text":"<p>Create <code>toppe0.entry</code> with paths to all files: <pre><code>/usr/g/research/pulseq/myseq/\nmodules.txt\nscanloop.txt\ntipdown.mod\nreadout.mod\nseqstamp.txt\n</code></pre></p>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#step-6-deploy-and-run","title":"Step 6: Deploy and Run","text":"<ul> <li>Transfer all files to scanner</li> <li>Execute via TOPPE interpreter with CV1=0</li> </ul>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#hardware-validation-parameters","title":"Hardware Validation Parameters","text":"<p>When using <code>pge2.validate()</code>, these are typical GE scanner limits: - RF amplitude: 0.25 Gauss maximum - Gradient amplitude: 5 Gauss/cm - Slew rate: 20 Gauss/cm/ms - RF/gradient delays: ~100-150 \u03bcs</p>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#critical-concepts-to-understand","title":"Critical Concepts to Understand","text":""},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#trid-labels","title":"TRID Labels","text":"<ul> <li>Define sequence segments and loop structure</li> <li>Required for proper sequence execution</li> <li>Automatically handled by seq2ceq conversion</li> </ul>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#ssp-lock-out-periods","title":"SSP Lock-out Periods","text":"<ul> <li>Hardware constraint where only one event type can occur</li> <li>Includes RF/ADC dead time and ringdown</li> <li>Common cause of sequence failures</li> <li>Fix by adding delays around RF/ADC events</li> </ul>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#segment-based-architecture","title":"Segment-based Architecture","text":"<ul> <li>GE uses segments (groups of blocks) vs Pulseq's individual blocks</li> <li>Conversion reorganizes sequence structure automatically</li> </ul>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#faq","title":"FAQ","text":""},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#q-which-approach-should-i-use","title":"Q: Which approach should I use?","text":"<p>A: Use PulCeq for new projects. It's the simplest and most direct path.</p>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#q-do-i-need-windows-mac-or-linux","title":"Q: Do I need Windows, Mac, or Linux?","text":"<p>A: Any OS with MATLAB works. The conversion happens on your computer; only the final file goes to the scanner.</p>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#q-can-i-use-both-approaches-on-the-same-scanner","title":"Q: Can I use both approaches on the same scanner?","text":"<p>A: Yes, if both interpreters (pge2 and TOPPE) are installed. They're separate programs.</p>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#q-what-if-my-sequence-fails-on-the-scanner","title":"Q: What if my sequence fails on the scanner?","text":"<p>A: Usually timing issues. Run <code>pge2.validate()</code> and add delays around RF/ADC events if needed.</p>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#q-where-do-i-get-the-scanner-interpreters","title":"Q: Where do I get the scanner interpreters?","text":"<p>A: Contact jfnielse@umich.edu for access to the EPIC source code repository.</p>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#q-do-i-need-to-understand-the-pge-file-format","title":"Q: Do I need to understand the .pge file format?","text":"<p>A: No, the conversion tools handle all formatting. Focus on your Pulseq sequence design.</p>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<ol> <li>\"SSP overlap\" error on scanner</li> <li>Add delays between RF/ADC events</li> <li> <p>Check with <code>pge2.validate()</code> before transfer</p> </li> <li> <p>\"Block timing violation\" during conversion</p> </li> <li>Ensure all blocks meet minimum duration (&gt;20 \u03bcs)</li> <li> <p>Check gradient/RF ramps against hardware limits</p> </li> <li> <p>Sequence looks different on scanner</p> </li> <li>Verify TRID labels are properly set</li> <li> <p>Check that all blocks in a segment have consistent timing</p> </li> <li> <p>Can't find pge2 interpreter on scanner</p> </li> <li>Contact your scanner administrator</li> <li>May need to install from EPIC source repository</li> </ol>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#getting-help","title":"Getting Help","text":"<ul> <li>PulCeq issues: https://github.com/HarmonizedMRI/PulCeq</li> <li>Pulseq questions: http://pulseq.github.io/</li> <li>Scanner interpreter access: jfnielse@umich.edu</li> <li>GE-specific documentation: https://github.com/HarmonizedMRI/SequenceExamples-GE</li> </ul>"},{"location":"mdDocs/PULSEQ_TO_GE_GUIDE/#summary","title":"Summary","text":"<p>The path from Pulseq to GE scanner is: 1. Design sequence in Pulseq (.seq file) 2. Convert using PulCeq (.seq \u2192 .pge) 3. Validate against hardware limits 4. Transfer to scanner 5. Execute with pge2 interpreter</p> <p>While not as simple as direct execution, the tools make it straightforward once you understand the workflow. The key is having the right interpreter on your scanner and validating sequences before transfer.</p> <p>Last updated: 2025 Based on PulCeq, PulseGEq, and TOPPE repositories</p>"},{"location":"mdDocs/QUICK_REFERENCE/","title":"PulsePal Quick Reference Guide","text":""},{"location":"mdDocs/QUICK_REFERENCE/#common-cli-commands","title":"Common CLI Commands","text":""},{"location":"mdDocs/QUICK_REFERENCE/#basic-usage","title":"Basic Usage","text":"<pre><code># Start interactive mode\npython run_pulsepal.py\n\n# Single query\npython run_pulsepal.py \"How do I create a spin echo sequence?\"\n\n# Continue session\npython run_pulsepal.py --session-id abc123\n\n# Get help\npython run_pulsepal.py --help\n</code></pre>"},{"location":"mdDocs/QUICK_REFERENCE/#session-management","title":"Session Management","text":"<pre><code># Clean up old sessions\npython -c \"from pulsepal.dependencies import SessionManager; SessionManager().cleanup_old_sessions()\"\n\n# List sessions (if CLI extensions installed)\npython -m pulsepal.cli sessions list\n\n# Export session history\npython -m pulsepal.cli sessions export &lt;session_id&gt; --output history.json\n</code></pre>"},{"location":"mdDocs/QUICK_REFERENCE/#web-interface","title":"Web Interface","text":"<pre><code># Start Chainlit UI (not on WSL2)\nchainlit run chainlit_app.py\n\n# With custom port\nchainlit run chainlit_app.py --port 8080\n</code></pre>"},{"location":"mdDocs/QUICK_REFERENCE/#frequent-api-calls","title":"Frequent API Calls","text":""},{"location":"mdDocs/QUICK_REFERENCE/#basic-query","title":"Basic Query","text":"<pre><code>from pulsepal.main_agent import run_pulsepal\n\n# Simple query\nsession_id, response = await run_pulsepal(\"What is T1 relaxation?\")\n\n# Follow-up question\n_, response = await run_pulsepal(\"How does it affect contrast?\", session_id)\n</code></pre>"},{"location":"mdDocs/QUICK_REFERENCE/#rag-search","title":"RAG Search","text":"<pre><code>from pulsepal.rag_service import ModernPulseqRAG\n\nrag = ModernPulseqRAG()\n\n# Auto search (intelligent routing)\nresults = await rag.search_pulseq_knowledge(\"gradient echo\")\n\n# Specific search types\ndocs = await rag.search_pulseq_knowledge(query, search_type=\"documentation\")\nfuncs = await rag.search_pulseq_knowledge(query, search_type=\"functions\")\nexamples = await rag.search_pulseq_knowledge(query, search_type=\"examples\")\n</code></pre>"},{"location":"mdDocs/QUICK_REFERENCE/#session-management_1","title":"Session Management","text":"<pre><code>from pulsepal.dependencies import SessionManager\n\nmanager = SessionManager()\n\n# Create session\nsession_id = manager.create_session()\n\n# Get session\ncontext = manager.get_session(session_id)\n\n# Clean old sessions\nmanager.cleanup_old_sessions()\n</code></pre>"},{"location":"mdDocs/QUICK_REFERENCE/#debugging-tips","title":"Debugging Tips","text":""},{"location":"mdDocs/QUICK_REFERENCE/#check-environment","title":"Check Environment","text":"<pre><code># Verify environment variables\npython -c \"from pulsepal.settings import get_settings; print(get_settings())\"\n\n# Test imports\npython -c \"import pulsepal.main_agent; print('\u2713 Imports work')\"\n</code></pre>"},{"location":"mdDocs/QUICK_REFERENCE/#debug-logging","title":"Debug Logging","text":"<pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Now run your code - will show detailed logs\n</code></pre>"},{"location":"mdDocs/QUICK_REFERENCE/#common-issues","title":"Common Issues","text":"Issue Solution Import error <code>pip install -r requirements.txt</code> API key missing Check <code>.env</code> file has <code>GOOGLE_API_KEY</code> Supabase error Verify <code>SUPABASE_URL</code> and <code>SUPABASE_KEY</code> Session not found Session expired, create new one Rate limit Add delay between requests Memory error Reduce <code>MAX_CONVERSATION_HISTORY</code>"},{"location":"mdDocs/QUICK_REFERENCE/#test-connection","title":"Test Connection","text":"<pre><code># Test Gemini connection\nfrom pulsepal.settings import get_llm_model\nmodel = get_llm_model()\nprint(\"\u2713 Gemini connected\")\n\n# Test Supabase\nfrom pulsepal.rag_service import get_supabase_client\nclient = get_supabase_client()\nprint(\"\u2713 Supabase connected\")\n</code></pre>"},{"location":"mdDocs/QUICK_REFERENCE/#performance-optimization-hints","title":"Performance Optimization Hints","text":""},{"location":"mdDocs/QUICK_REFERENCE/#speed-tips","title":"Speed Tips","text":"<ol> <li>Use session IDs - Maintains context, avoids re-initialization</li> <li>Specific search types - Faster than auto-detection</li> <li>Limit conversation history - Set <code>MAX_CONVERSATION_HISTORY=50</code></li> <li>Enable caching - RAG results are cached automatically</li> </ol>"},{"location":"mdDocs/QUICK_REFERENCE/#memory-management","title":"Memory Management","text":"<pre><code># Clear old sessions regularly\nfrom pulsepal.dependencies import SessionManager\nSessionManager().cleanup_old_sessions(max_age_hours=12)\n\n# Limit session history\nsettings.max_conversation_history = 50\n</code></pre>"},{"location":"mdDocs/QUICK_REFERENCE/#batch-processing","title":"Batch Processing","text":"<pre><code># Process multiple queries efficiently\nasync def batch_process(queries):\n    session_id = None\n    results = []\n\n    for query in queries:\n        session_id, response = await run_pulsepal(query, session_id)\n        results.append(response)\n\n    return results\n</code></pre>"},{"location":"mdDocs/QUICK_REFERENCE/#troubleshooting-checklist","title":"Troubleshooting Checklist","text":""},{"location":"mdDocs/QUICK_REFERENCE/#initial-setup","title":"Initial Setup","text":"<ul> <li>[ ] Python 3.8+ installed</li> <li>[ ] Virtual environment created</li> <li>[ ] Dependencies installed (<code>pip install -r requirements.txt</code>)</li> <li>[ ] <code>.env</code> file created from <code>.env.example</code></li> <li>[ ] API keys configured</li> </ul>"},{"location":"mdDocs/QUICK_REFERENCE/#not-working","title":"Not Working?","text":"<ol> <li>Check logs: Look in <code>conversationLogs/</code> directory</li> <li>Verify settings: <code>python -c \"from pulsepal.settings import get_settings; get_settings()\"</code></li> <li>Test modules: <code>python -c \"import pulsepal.main_agent\"</code></li> <li>Check services: Ensure Gemini and Supabase are accessible</li> <li>Review session: Sessions expire after 24 hours by default</li> </ol>"},{"location":"mdDocs/QUICK_REFERENCE/#error-messages","title":"Error Messages","text":"Error Meaning Fix <code>ConfigurationError</code> Missing env vars Check <code>.env</code> file <code>SessionNotFoundError</code> Session expired Create new session <code>RAGServiceError</code> Search failed Check Supabase connection <code>RateLimitError</code> Too many requests Add delays or upgrade API <code>TimeoutError</code> Request too slow Retry or simplify query"},{"location":"mdDocs/QUICK_REFERENCE/#contactsupport-information","title":"Contact/Support Information","text":""},{"location":"mdDocs/QUICK_REFERENCE/#getting-help","title":"Getting Help","text":"<ul> <li>Email: rmoskwa@wisc.edu</li> <li>GitHub Issues: https://github.com/rmoskwa/Pulsepal/issues</li> <li>Documentation: See <code>/docs</code> directory</li> </ul>"},{"location":"mdDocs/QUICK_REFERENCE/#reporting-bugs","title":"Reporting Bugs","text":"<p>Include: 1. Error message 2. Python version (<code>python --version</code>) 3. PulsePal version 4. Steps to reproduce 5. Session ID if applicable</p>"},{"location":"mdDocs/QUICK_REFERENCE/#feature-requests","title":"Feature Requests","text":"<p>Submit via GitHub Issues with: - Use case description - Expected behavior - Current workaround (if any)</p>"},{"location":"mdDocs/QUICK_REFERENCE/#common-pulseq-questions","title":"Common Pulseq Questions","text":""},{"location":"mdDocs/QUICK_REFERENCE/#quick-answers","title":"Quick Answers","text":"<p>Q: How do I create a basic gradient? <pre><code>gx = mr.makeTrapezoid('x', lims, 'Amplitude', 1000, 'FlatTime', 3e-3);\n</code></pre></p> <p>Q: What's the difference between <code>mr.*</code> and <code>seq.*</code>? - <code>mr.*</code> - Sequence building functions (makeTrapezoid, makeBlockPulse) - <code>seq.*</code> - Sequence object methods (addBlock, write)</p> <p>Q: How do I check my sequence? <pre><code>[ok, error_report] = seq.checkTiming();\nseq.plot();  % Visualize\n</code></pre></p> <p>Q: Common parameter mistakes? - Using <code>mr.write()</code> instead of <code>seq.write()</code> - Missing required parameters in <code>make*</code> functions - Wrong units (Hz vs rad/s, seconds vs milliseconds)</p>"},{"location":"mdDocs/QUICK_REFERENCE/#useful-code-snippets","title":"Useful Code Snippets","text":""},{"location":"mdDocs/QUICK_REFERENCE/#initialize-sequence","title":"Initialize Sequence","text":"<pre><code>% MATLAB\nseq = mr.Sequence();\nlims = mr.opts('MaxGrad', 32, 'GradUnit', 'mT/m', ...\n               'MaxSlew', 130, 'SlewUnit', 'T/m/s');\n</code></pre> <pre><code># Python (pypulseq)\nimport pypulseq as pp\nseq = pp.Sequence()\nlims = pp.Opts(max_grad=32, grad_unit='mT/m',\n               max_slew=130, slew_unit='T/m/s')\n</code></pre>"},{"location":"mdDocs/QUICK_REFERENCE/#create-rf-pulse","title":"Create RF Pulse","text":"<pre><code>% MATLAB\nrf = mr.makeBlockPulse(flip_angle*pi/180, lims, ...\n                       'Duration', 2e-3, 'system', lims);\n</code></pre>"},{"location":"mdDocs/QUICK_REFERENCE/#add-gradient","title":"Add Gradient","text":"<pre><code>% MATLAB\ngx = mr.makeTrapezoid('x', lims, 'Area', area);\nseq.addBlock(gx);\n</code></pre>"},{"location":"mdDocs/QUICK_REFERENCE/#write-sequence","title":"Write Sequence","text":"<pre><code>% MATLAB\nseq.write('my_sequence.seq');\n</code></pre>"},{"location":"mdDocs/QUICK_REFERENCE/#environment-variables-reference","title":"Environment Variables Reference","text":"<pre><code># Required\nGOOGLE_API_KEY=            # Google Gemini API key\nSUPABASE_URL=              # Supabase project URL\nSUPABASE_KEY=              # Supabase anon key\n\n# Optional\nLLM_MODEL=gemini-2.5-flash # Model selection\nMAX_SESSION_DURATION_HOURS=24\nMAX_CONVERSATION_HISTORY=100\nUSE_HYBRID_SEARCH=true\nSESSION_STORAGE_PATH=./sessions\nGOOGLE_API_KEY_EMBEDDING=   # For embeddings\n\n# Logging\nLOG_LEVEL=INFO             # DEBUG, INFO, WARNING, ERROR\nLOG_FILE=pulsepal.log      # Log file path\n</code></pre>"},{"location":"mdDocs/QUICK_REFERENCE/#quick-testing","title":"Quick Testing","text":"<pre><code># Test everything works\npython -c \"\nfrom pulsepal.main_agent import run_pulsepal\nimport asyncio\nresult = asyncio.run(run_pulsepal('test'))\nprint('\u2713 All systems operational')\n\"\n</code></pre>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/","title":"PulsePal Sequence Storage Guide","text":""},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#overview","title":"Overview","text":"<p>This guide explains how to store Pulseq sequences in the PulsePal database for optimal retrieval and search functionality. The storage system uses a multi-table architecture designed for efficient RAG (Retrieval-Augmented Generation) queries.</p>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#database-architecture","title":"Database Architecture","text":""},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#table-structure","title":"Table Structure","text":"<ol> <li>pulseq_sequences_test - Main sequence metadata</li> <li>sequence_chunks_test - Code segments for granular search</li> <li>crawled_code_test - Code dependencies (main sequences, helpers, reconstruction)</li> <li>crawled_docs_test - Documentation and data files</li> </ol>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#key-design-principles","title":"Key Design Principles","text":"<ul> <li>Flat JSON structure at root level (no nested metadata objects)</li> <li>Intelligent classification by Claude for all semantic fields</li> <li>Programmatic extraction for technical fields (line counts, file sizes)</li> <li>Foreign key relationships ensure data integrity</li> </ul>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#storage-workflow","title":"Storage Workflow","text":""},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#step-1-initial-discovery","title":"Step 1: Initial Discovery","text":"<pre><code># Navigate to repository\ncd /path/to/pulseq-explorer/sequences/XXX-sequence-name\n\n# Check for metadata\nls metadata.json notes.md\n\n# Navigate to profiles\ncd sequence-profiles/[sequence-name]\n\n# List all dependencies\nls -la\n</code></pre>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#step-2-context-gathering","title":"Step 2: Context Gathering","text":"<ol> <li>Read README.md for context (DO NOT store)</li> <li>Identify main sequence file (.m or .py)</li> <li>List all dependency files (excluding README.md)</li> <li>Explore cloned repository if needed:    <pre><code>/pulseq-explorer/clonedDirectories/[repo-name]\n</code></pre></li> </ol>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#step-3-intelligent-analysis","title":"Step 3: Intelligent Analysis","text":""},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#sequence-classification","title":"Sequence Classification","text":"<p>Sequence Family Decision Tree: <pre><code>1. Is it a quantitative mapping protocol?\n   \u2192 QALAS, MOLLI, MP2RAGE, etc.\n\n2. Is it a clinical architecture?\n   \u2192 MPRAGE, DIFFUSION, ASL, PRESS, STEAM\n\n3. Is it a novel technique?\n   \u2192 Create new family (e.g., WAVE-CAIPI, SMS-EPI)\n\n4. Is it a basic readout?\n   \u2192 FLASH, bSSFP, TSE, EPI, GRE, SE, FID\n</code></pre></p> <p>Vendor Features Detection: <pre><code>vendor_features = []\n\n# GE-specific\nif \"TRID\" in code:\n    vendor_features.append(\"TRID_segments\")\nif \"pislquant\" in code:\n    vendor_features.append(\"pislquant\")\nif \"seq2ceq\" or \"writeceq\" in code:\n    vendor_features.append(\"pge2_conversion\")\n\n# Siemens-specific\nif \"ICE\" in code:\n    vendor_features.append(\"ICE_reconstruction\")\nif \"registerGradEvent\" in code:\n    vendor_features.append(\"pre_registration\")\n\n# Empty array = pure Pulseq\n</code></pre></p>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#step-4-template-creation","title":"Step 4: Template Creation","text":""},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#main-sequence-template-table-1","title":"Main Sequence Template (Table 1)","text":"<pre><code>{\n  \"file_name\": \"writeEpi.m\",\n  \"repository\": \"github.com/pulseq/pulseq\",\n  \"language\": \"matlab\",\n  \"sequence_family\": \"EPI\",\n  \"contrast_mechanism\": \"gradient_echo\",\n  \"trajectory_type\": \"epi_cartesian\",\n  \"dimensionality\": \"2D_multislice\",\n  \"architecture_type\": \"single-file\",\n  \"complexity_level\": 3,\n  \"educational_value\": \"high\",\n  \"dependencies\": {\n    \"local_dependencies\": [\"rf90.txt\", \"trajectory.mat\"],\n    \"external_dependencies\": [\"Pulseq MATLAB\"],\n    \"package_dependencies\": [],\n    \"sequence_dependencies\": []\n  },\n  \"external_requirements\": [],\n  \"preparation_techniques\": [\"fat_saturation\"],\n  \"acceleration_methods\": [\"GRAPPA\"],\n  \"advanced_features\": [\"navigator_echoes\"],\n  \"vendor_features\": [],\n  \"has_reconstruction_code\": false,\n  \"reconstruction_type\": null,\n  \"typical_applications\": [\"brain_imaging\", \"fMRI\"],\n  \"typical_scan_time\": \"30 seconds\",\n  \"content_summary\": \"EPI sequence for functional MRI brain imaging. Implements echo-planar imaging with GRAPPA acceleration and fat saturation. Built using the Pulseq framework for vendor-neutral sequence programming.\"\n}\n</code></pre>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#chunks-template-table-2","title":"Chunks Template (Table 2)","text":"<pre><code>\"sequence_chunks\": [\n  {\n    \"chunk_type\": \"parameter_definition\",\n    \"chunk_order\": 1,\n    \"start_line\": 1,\n    \"end_line\": 50,\n    \"key_concepts\": [\"FOV\", \"matrix_size\", \"TE\", \"TR\"],\n    \"complexity_level\": 2,\n    \"mri_concept\": \"Setting up imaging parameters that define spatial resolution and contrast.\",\n    \"description\": \"Defines all user-configurable parameters for the EPI sequence.\"\n  },\n  {\n    \"chunk_type\": \"rf_gradient_creation\",\n    \"chunk_order\": 2,\n    \"start_line\": 51,\n    \"end_line\": 150,\n    \"key_concepts\": [\"excitation_pulse\", \"slice_selection\"],\n    \"complexity_level\": 3,\n    \"mri_concept\": \"RF excitation with simultaneous slice-selective gradients for spatial encoding.\",\n    \"description\": \"Creates RF pulses and gradient waveforms for slice selection.\"\n  }\n]\n</code></pre>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#dependencies-template-table-3","title":"Dependencies Template (Table 3)","text":"<pre><code>\"dependency_files\": [\n  {\n    \"file_name\": \"writeEpi.m\",\n    \"content_type\": \"main_sequence\",\n    \"dependency_type\": \"required\",\n    \"content_summary\": \"AUTO-COPIED from Table 1\",\n    \"metadata\": {\n      \"sequence_type\": \"EPI\",\n      \"complexity_level\": 3,\n      \"estimated_scan_time\": \"30 seconds\",\n      \"vendor_features\": [],\n      \"key_parameters\": {\n        \"FOV\": \"220mm\",\n        \"matrix\": \"96x96\"\n      },\n      \"features\": [\"navigator_echoes\"],\n      \"generates_seq_file\": true,\n      \"has_reconstruction\": false\n    }\n  },\n  {\n    \"file_name\": \"calcGradMoments.m\",\n    \"content_type\": \"helper_function\",\n    \"dependency_type\": \"required\",\n    \"content_summary\": \"Calculates gradient moments for diffusion encoding and k-space trajectory optimization. Essential for ensuring proper gradient balancing in EPI sequences.\",\n    \"metadata\": {\n      \"purpose\": \"Calculate gradient moments\",\n      \"function_category\": \"gradient_calculation\",\n      \"main_functions\": [\"calcMoment\"],\n      \"dependencies\": [\"Pulseq MATLAB\"],\n      \"used_by_sequences\": [\"writeEpi.m\"],\n      \"complexity_level\": 2,\n      \"documented\": true\n    }\n  }\n]\n</code></pre>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#documentation-template-table-4","title":"Documentation Template (Table 4)","text":"<pre><code>\"documentation_files\": [\n  {\n    \"file_name\": \"csv_imports/rf90.txt\",\n    \"doc_type\": \"data_file\"\n  },\n  {\n    \"file_name\": \"config/epi_params.json\",\n    \"doc_type\": \"configuration\"\n  },\n  {\n    \"file_name\": \"docs/tutorial.pdf\",\n    \"doc_type\": \"tutorial\"\n  }\n]\n</code></pre>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#step-5-storage-execution","title":"Step 5: Storage Execution","text":"<pre><code># Run storage script with template\npython sequenceDocs/storedSequences/sequence_to_database_storage.py \\\n  --sequence-path /path/to/sequence \\\n  --template-json filled_template.json\n</code></pre>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#critical-rules","title":"Critical Rules","text":""},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#file-placement-rules","title":"File Placement Rules","text":"File Type Table Content Types Main sequence crawled_code_test <code>main_sequence</code> only Helper functions crawled_code_test <code>helper_function</code> only Reconstruction crawled_code_test <code>reconstruction</code> only Data files crawled_docs_test <code>data_file</code> Config files crawled_docs_test <code>configuration</code> Documentation crawled_docs_test Various doc_types"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#path-specifications","title":"Path Specifications","text":"<pre><code># Dependencies list (for RAG search)\n\"local_dependencies\": [\"rf90.txt\", \"trajectory.mat\"]  # Filenames only\n\n# Documentation files (for storage)\n\"file_name\": \"csv_imports/rf90.txt\"  # Relative path from sequence dir\n</code></pre>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#readmemd-handling","title":"README.md Handling","text":"<ul> <li>Inside sequence-profiles/: READ for context, DO NOT store</li> <li>Outside sequence-profiles/: Can be stored as documentation</li> </ul>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#common-patterns","title":"Common Patterns","text":""},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#6-section-template-85-of-sequences","title":"6-Section Template (85% of sequences)","text":"<ol> <li>Parameter Definition</li> <li>System Configuration</li> <li>RF/Gradient Creation</li> <li>Timing Calculations</li> <li>Sequence Assembly</li> <li>Validation/Output</li> </ol>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#vendor-detection-examples","title":"Vendor Detection Examples","text":"<pre><code>% GE-specific\nseq.addBlock(mr.makeLabel('SET', 'TRID', 1));  % TRID segments\n\n% Siemens-specific\nseq.registerGradEvent(gx);  % Pre-registration\n\n% Pure Pulseq (no vendor features)\nseq.addBlock(mr.makeDelay(1e-3));\n</code></pre>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#issue-missing-dependencies","title":"Issue: Missing Dependencies","text":"<p>Solution: Check cloned repository for additional context: <pre><code>find /pulseq-explorer/clonedDirectories/[repo] -name \"*.m\" -o -name \"*.py\"\n</code></pre></p>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#issue-unknown-sequence-family","title":"Issue: Unknown Sequence Family","text":"<p>Solution: Create new classification if sequence is novel: - Novel k-space sampling \u2192 New family - Unique preparation \u2192 New family - Hybrid approach \u2192 New family</p>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#issue-vendor-feature-uncertainty","title":"Issue: Vendor Feature Uncertainty","text":"<p>Solution: Look for these patterns: <pre><code>% Vendor-specific = beyond standard mr.* functions\nseq.addBlock(mr.makeLabel('SET', 'TRID', 1));  % GE vendor feature\nseq.registerGradEvent(gx);  % Siemens vendor feature\nseq.addBlock(mr.makeDelay(1));  % Pure Pulseq (no vendor)\n</code></pre></p>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#issue-file-classification","title":"Issue: File Classification","text":"<p>Decision tree: <pre><code>Is it executable code?\n  \u2514\u2500 Yes \u2192 Table 3 (crawled_code_test)\n      \u2514\u2500 Main sequence? \u2192 content_type: \"main_sequence\"\n      \u2514\u2500 Helper? \u2192 content_type: \"helper_function\"\n      \u2514\u2500 Reconstruction? \u2192 content_type: \"reconstruction\"\n  \u2514\u2500 No \u2192 Table 4 (crawled_docs_test)\n      \u2514\u2500 Data file? \u2192 doc_type: \"data_file\"\n      \u2514\u2500 Config? \u2192 doc_type: \"configuration\"\n      \u2514\u2500 Documentation? \u2192 doc_type: appropriate type\n</code></pre></p>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#validation-checklist","title":"Validation Checklist","text":""},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#pre-storage","title":"Pre-Storage","text":"<ul> <li>[ ] All files identified (except README.md in sequence-profiles)</li> <li>[ ] Main sequence file located</li> <li>[ ] Dependencies listed (filenames only)</li> <li>[ ] Vendor features detected</li> <li>[ ] Sequence family determined</li> </ul>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#post-storage","title":"Post-Storage","text":"<ul> <li>[ ] Table 1: Main sequence stored</li> <li>[ ] Table 2: All chunks stored</li> <li>[ ] Table 3: All code dependencies stored</li> <li>[ ] Table 4: All documentation stored</li> <li>[ ] Checklist updated</li> </ul>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#quick-reference","title":"Quick Reference","text":""},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#content-type-matrix","title":"Content Type Matrix","text":"Content Type Table Required Metadata Main .m/.py <code>main_sequence</code> 3 sequence_type, complexity, scan_time Helper code <code>helper_function</code> 3 purpose, category, functions Recon code <code>reconstruction</code> 3 recon_type, input/output format CSV/MAT/TXT <code>data_file</code> 4 None (auto-generated) Config files <code>configuration</code> 4 None (auto-generated)"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#complexity-levels","title":"Complexity Levels","text":"<ol> <li>Level 1: Basic demos, simple concepts</li> <li>Level 2: Standard clinical sequences</li> <li>Level 3: Advanced features, acceleration</li> <li>Level 4: Research sequences, novel methods</li> <li>Level 5: Highly complex, multiple advanced features</li> </ol>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#storage-command-examples","title":"Storage Command Examples","text":""},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#basic-storage","title":"Basic Storage","text":"<pre><code># Store a single sequence\npython sequence_to_database_storage.py \\\n  --sequence-path /sequences/001-diffusion/dti-sequence \\\n  --template-json dti_template.json\n</code></pre>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#batch-storage","title":"Batch Storage","text":"<pre><code># Store multiple sequences\nfor seq in /sequences/*/sequence-profiles/*; do\n  python sequence_to_database_storage.py \\\n    --sequence-path \"$seq\" \\\n    --template-json \"${seq##*/}_template.json\"\ndone\n</code></pre>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#verification-query","title":"Verification Query","text":"<pre><code>-- Check storage completeness\nSELECT \n  s.file_name,\n  COUNT(DISTINCT c.id) as chunk_count,\n  COUNT(DISTINCT d.id) as dep_count,\n  COUNT(DISTINCT doc.id) as doc_count\nFROM pulseq_sequences_test s\nLEFT JOIN sequence_chunks_test c ON s.id = c.sequence_id\nLEFT JOIN crawled_code_test d ON s.id = d.coupled_sequences[1]\nLEFT JOIN crawled_docs_test doc ON s.id = doc.coupled_sequences[1]\nGROUP BY s.id, s.file_name;\n</code></pre>"},{"location":"mdDocs/SEQUENCE_STORAGE_GUIDE/#contact-support","title":"Contact &amp; Support","text":"<p>For questions about sequence storage: 1. Check existing stored sequences in MASTER-SEQUENCE-LIST.md 2. Review insights.md for patterns 3. Consult sequence_analysis_checklist.md for pending items</p> <p>Remember: The goal is accurate, searchable storage that enables intelligent RAG retrieval for MRI researchers using PulsePal.</p>"},{"location":"mdDocs/SESSION_MANAGEMENT/","title":"PulsePal Session Management","text":""},{"location":"mdDocs/SESSION_MANAGEMENT/#overview","title":"Overview","text":"<p>PulsePal implements sophisticated session management to maintain conversation context, track user preferences, and provide a seamless experience across interactions. Sessions are automatically created and managed to optimize both performance and user experience.</p>"},{"location":"mdDocs/SESSION_MANAGEMENT/#session-architecture","title":"Session Architecture","text":""},{"location":"mdDocs/SESSION_MANAGEMENT/#core-components","title":"Core Components","text":"<ol> <li>SessionManager (<code>dependencies.py</code>)</li> <li>Creates and manages session lifecycles</li> <li>Handles session rotation and cleanup</li> <li> <p>Maintains session persistence</p> </li> <li> <p>ConversationContext</p> </li> <li>Stores conversation history</li> <li>Tracks language preferences (MATLAB/Python)</li> <li>Maintains code examples within session</li> <li> <p>Records session metadata</p> </li> <li> <p>Session Storage</p> </li> <li>File-based storage in <code>sessions/</code> directory</li> <li>JSON format for easy debugging</li> <li>Automatic archival of old sessions</li> </ol>"},{"location":"mdDocs/SESSION_MANAGEMENT/#session-lifecycle","title":"Session Lifecycle","text":""},{"location":"mdDocs/SESSION_MANAGEMENT/#session-creation","title":"Session Creation","text":"<p>Sessions are created automatically when: - A new user starts a conversation (CLI or web) - No session ID is provided - An expired session ID is used</p> <pre><code># Automatic session creation\nfrom pulsepal.main_agent import run_pulsepal\nsession_id, response = await run_pulsepal(\"Your query here\")\n\n# Manual session creation\nfrom pulsepal.dependencies import SessionManager\nsession_manager = SessionManager()\nsession_id = session_manager.create_session()\n</code></pre>"},{"location":"mdDocs/SESSION_MANAGEMENT/#session-persistence","title":"Session Persistence","text":"<p>Sessions persist for: - Default Duration: 24 hours (configurable) - Maximum History: 100 messages (configurable) - Inactive Timeout: 2 hours of inactivity</p>"},{"location":"mdDocs/SESSION_MANAGEMENT/#session-rotation-policy","title":"Session Rotation Policy","text":"<p>The rotation policy ensures optimal performance:</p> <ol> <li>Active Sessions (&lt; 24 hours old)</li> <li>Kept in <code>sessions/active/</code></li> <li>Fast access for ongoing conversations</li> <li> <p>Automatically loaded on request</p> </li> <li> <p>Archived Sessions (&gt; 24 hours old)</p> </li> <li>Moved to <code>sessions/archive/</code></li> <li>Compressed for storage efficiency</li> <li> <p>Available for historical reference</p> </li> <li> <p>Cleanup Process</p> </li> <li>Runs automatically every hour</li> <li>Archives expired sessions</li> <li>Removes sessions older than 7 days (configurable)</li> </ol>"},{"location":"mdDocs/SESSION_MANAGEMENT/#configuration-options","title":"Configuration Options","text":""},{"location":"mdDocs/SESSION_MANAGEMENT/#environment-variables","title":"Environment Variables","text":"<p>Configure session behavior in <code>.env</code>:</p> <pre><code># Session Duration\nMAX_SESSION_DURATION_HOURS=24      # How long sessions remain active\nSESSION_INACTIVE_TIMEOUT_HOURS=2   # Timeout for inactive sessions\n\n# Session Limits\nMAX_CONVERSATION_HISTORY=100       # Maximum messages per session\nMAX_ACTIVE_SESSIONS=1000          # Maximum concurrent active sessions\n\n# Archive Settings\nSESSION_ARCHIVE_DAYS=7             # Days to keep archived sessions\nSESSION_COMPRESSION=true           # Compress archived sessions\n\n# Session Storage\nSESSION_STORAGE_PATH=./sessions    # Where to store session files\n</code></pre>"},{"location":"mdDocs/SESSION_MANAGEMENT/#programmatic-configuration","title":"Programmatic Configuration","text":"<pre><code>from pulsepal.settings import Settings\n\nsettings = Settings(\n    max_session_duration_hours=48,\n    max_conversation_history=200,\n    session_storage_path=\"/custom/path\"\n)\n</code></pre>"},{"location":"mdDocs/SESSION_MANAGEMENT/#archive-process","title":"Archive Process","text":""},{"location":"mdDocs/SESSION_MANAGEMENT/#automatic-archival","title":"Automatic Archival","text":"<p>Sessions are automatically archived when: - They exceed the maximum duration - The cleanup process runs (hourly) - Manual cleanup is triggered</p>"},{"location":"mdDocs/SESSION_MANAGEMENT/#archive-structure","title":"Archive Structure","text":"<pre><code>sessions/\n\u251c\u2500\u2500 active/                 # Current sessions\n\u2502   \u251c\u2500\u2500 session_abc123.json\n\u2502   \u2514\u2500\u2500 session_def456.json\n\u251c\u2500\u2500 archive/               # Archived sessions\n\u2502   \u251c\u2500\u2500 2025-01-18/       # Organized by date\n\u2502   \u2502   \u251c\u2500\u2500 session_old1.json.gz\n\u2502   \u2502   \u2514\u2500\u2500 session_old2.json.gz\n\u2502   \u2514\u2500\u2500 2025-01-17/\n\u2514\u2500\u2500 metadata.json          # Session index\n</code></pre>"},{"location":"mdDocs/SESSION_MANAGEMENT/#manual-archive-management","title":"Manual Archive Management","text":"<pre><code># Archive all expired sessions\npython -c \"from pulsepal.dependencies import SessionManager; SessionManager().archive_expired_sessions()\"\n\n# Archive specific session\npython -c \"from pulsepal.dependencies import SessionManager; SessionManager().archive_session('session_id')\"\n\n# List archived sessions\npython -c \"from pulsepal.dependencies import SessionManager; SessionManager().list_archived_sessions()\"\n</code></pre>"},{"location":"mdDocs/SESSION_MANAGEMENT/#cli-commands-for-cleanup","title":"CLI Commands for Cleanup","text":""},{"location":"mdDocs/SESSION_MANAGEMENT/#basic-cleanup-commands","title":"Basic Cleanup Commands","text":"<pre><code># Clean up old sessions (removes &gt; 7 days)\npython scripts/cleanup_sessions.py\n\n# Clean up with custom retention\npython scripts/cleanup_sessions.py --days 30\n\n# Dry run (show what would be deleted)\npython scripts/cleanup_sessions.py --dry-run\n\n# Force cleanup of all sessions\npython scripts/cleanup_sessions.py --force --all\n</code></pre>"},{"location":"mdDocs/SESSION_MANAGEMENT/#session-management-cli","title":"Session Management CLI","text":"<pre><code># List active sessions\npython -m pulsepal.cli sessions list\n\n# Show session details\npython -m pulsepal.cli sessions show &lt;session_id&gt;\n\n# Delete specific session\npython -m pulsepal.cli sessions delete &lt;session_id&gt;\n\n# Export session history\npython -m pulsepal.cli sessions export &lt;session_id&gt; --output history.json\n\n# Import session (restore)\npython -m pulsepal.cli sessions import history.json\n</code></pre>"},{"location":"mdDocs/SESSION_MANAGEMENT/#scheduled-cleanup","title":"Scheduled Cleanup","text":"<p>For production environments, schedule cleanup with cron:</p> <pre><code># Add to crontab\n0 * * * * python /path/to/pulsepal/scripts/cleanup_sessions.py\n\n# Or use systemd timer\n[Unit]\nDescription=PulsePal Session Cleanup\n\n[Timer]\nOnCalendar=hourly\nPersistent=true\n\n[Install]\nWantedBy=timers.target\n</code></pre>"},{"location":"mdDocs/SESSION_MANAGEMENT/#monitoring-guidelines","title":"Monitoring Guidelines","text":""},{"location":"mdDocs/SESSION_MANAGEMENT/#health-metrics","title":"Health Metrics","text":"<p>Monitor these session metrics:</p> <ol> <li> <p>Active Session Count <pre><code>session_manager.get_active_session_count()\n</code></pre></p> </li> <li> <p>Session Age Distribution <pre><code>session_manager.get_session_age_stats()\n</code></pre></p> </li> <li> <p>Storage Usage <pre><code>session_manager.get_storage_usage()\n</code></pre></p> </li> <li> <p>Session Activity <pre><code>session_manager.get_activity_metrics()\n</code></pre></p> </li> </ol>"},{"location":"mdDocs/SESSION_MANAGEMENT/#monitoring-dashboard","title":"Monitoring Dashboard","text":"<pre><code># Simple monitoring script\nfrom pulsepal.dependencies import SessionManager\n\nsm = SessionManager()\nstats = sm.get_session_stats()\n\nprint(f\"Active Sessions: {stats['active_count']}\")\nprint(f\"Archived Sessions: {stats['archived_count']}\")\nprint(f\"Storage Used: {stats['storage_mb']} MB\")\nprint(f\"Avg Session Age: {stats['avg_age_hours']} hours\")\nprint(f\"Oldest Session: {stats['oldest_session_id']}\")\n</code></pre>"},{"location":"mdDocs/SESSION_MANAGEMENT/#alerts","title":"Alerts","text":"<p>Set up alerts for: - High active session count (&gt; 900) - Storage usage exceeding limits - Failed cleanup processes - Corrupted session files</p>"},{"location":"mdDocs/SESSION_MANAGEMENT/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"mdDocs/SESSION_MANAGEMENT/#session-recovery","title":"Session Recovery","text":"<p>If sessions are corrupted or lost:</p> <ol> <li> <p>Check Backups <pre><code>ls sessions/archive/backups/\n</code></pre></p> </li> <li> <p>Restore from Archive <pre><code>python scripts/restore_session.py --session-id &lt;id&gt; --date 2025-01-18\n</code></pre></p> </li> <li> <p>Rebuild from Logs <pre><code>python scripts/rebuild_sessions.py --from-logs conversationLogs/\n</code></pre></p> </li> </ol>"},{"location":"mdDocs/SESSION_MANAGEMENT/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<ol> <li>Session Not Found</li> <li>Check if archived: <code>ls sessions/archive/*/session_*.json.gz</code></li> <li> <p>Restore if needed: <code>gunzip &lt; session.json.gz &gt; sessions/active/session.json</code></p> </li> <li> <p>Session Corruption</p> </li> <li>Validate JSON: <code>python -m json.tool session.json</code></li> <li>Remove corrupted: <code>rm sessions/active/corrupted_session.json</code></li> <li> <p>Recreate: User starts new conversation</p> </li> <li> <p>Storage Full</p> </li> <li>Run immediate cleanup: <code>python scripts/cleanup_sessions.py --force</code></li> <li>Reduce retention: <code>--days 3</code></li> <li> <p>Move archives: <code>mv sessions/archive /backup/location/</code></p> </li> <li> <p>Performance Issues</p> </li> <li>Check session count: Too many active sessions</li> <li>Archive old sessions: <code>python scripts/cleanup_sessions.py</code></li> <li>Optimize storage: Enable compression</li> </ol>"},{"location":"mdDocs/SESSION_MANAGEMENT/#best-practices","title":"Best Practices","text":""},{"location":"mdDocs/SESSION_MANAGEMENT/#session-management","title":"Session Management","text":"<ol> <li>Regular Cleanup - Schedule hourly cleanup in production</li> <li>Monitor Storage - Set up disk usage alerts</li> <li>Backup Archives - Keep backups of important sessions</li> <li>Test Recovery - Regularly test recovery procedures</li> <li>Document Sessions - Keep metadata about important sessions</li> </ol>"},{"location":"mdDocs/SESSION_MANAGEMENT/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Limit History - Keep conversation history reasonable (100-200 messages)</li> <li>Archive Promptly - Don't keep old sessions active</li> <li>Compress Archives - Enable compression for archived sessions</li> <li>Clean Storage - Remove very old archives periodically</li> </ol>"},{"location":"mdDocs/SESSION_MANAGEMENT/#security-considerations","title":"Security Considerations","text":"<ol> <li>Sanitize Sessions - Remove sensitive data before archiving</li> <li>Encrypt Archives - Consider encrypting archived sessions</li> <li>Access Control - Limit access to session storage</li> <li>Audit Logs - Log session access and modifications</li> </ol>"},{"location":"mdDocs/SESSION_MANAGEMENT/#integration-examples","title":"Integration Examples","text":""},{"location":"mdDocs/SESSION_MANAGEMENT/#web-interface-chainlit","title":"Web Interface (Chainlit)","text":"<pre><code># Chainlit automatically manages sessions\n@cl.on_chat_start\nasync def start():\n    session_id = cl.user_session.get(\"session_id\")\n    if not session_id:\n        session_id = str(uuid.uuid4())\n        cl.user_session.set(\"session_id\", session_id)\n</code></pre>"},{"location":"mdDocs/SESSION_MANAGEMENT/#cli-interface","title":"CLI Interface","text":"<pre><code># CLI with persistent session\nimport argparse\nfrom pulsepal.main_agent import run_pulsepal\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--session-id\", help=\"Continue existing session\")\nargs = parser.parse_args()\n\nsession_id, response = await run_pulsepal(\n    query=\"Your query\",\n    session_id=args.session_id\n)\nprint(f\"Session: {session_id}\")\nprint(f\"Response: {response}\")\n</code></pre>"},{"location":"mdDocs/SESSION_MANAGEMENT/#api-integration","title":"API Integration","text":"<pre><code># REST API with session support\nfrom fastapi import FastAPI, Header\nfrom typing import Optional\n\napp = FastAPI()\n\n@app.post(\"/query\")\nasync def query(\n    text: str,\n    session_id: Optional[str] = Header(None)\n):\n    session_id, response = await run_pulsepal(text, session_id)\n    return {\n        \"session_id\": session_id,\n        \"response\": response\n    }\n</code></pre>"},{"location":"mdDocs/SESSION_MANAGEMENT/#troubleshooting","title":"Troubleshooting","text":"<p>For session-related issues, check:</p> <ol> <li>Session storage permissions</li> <li>Disk space availability</li> <li>Session file validity (valid JSON)</li> <li>Environment variable configuration</li> <li>Cleanup process logs</li> </ol> <p>For additional support, contact: rmoskwa@wisc.edu</p>"}]}