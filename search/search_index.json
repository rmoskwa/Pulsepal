{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PulsePal Documentation","text":"<p>Welcome to the PulsePal documentation site.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>MATLAB API Reference - Complete MATLAB function reference</li> <li>GitHub Repository</li> </ul>"},{"location":"#about-pulsepal","title":"About PulsePal","text":"<p>PulsePal is an intelligent MRI programming assistant that helps researchers and engineers work with the Pulseq framework for MRI sequence development.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Comprehensive MATLAB API for Pulseq</li> <li>Built-in MRI physics knowledge</li> <li>Code generation and validation</li> <li>Educational support for researchers</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Browse the MATLAB API Reference to explore available functions.</p>"},{"location":"matlab_api/","title":"MATLAB API Reference","text":"<p>Complete reference for PulsePal MATLAB functions.</p>"},{"location":"matlab_api/#a","title":"A","text":"<ul> <li>addBlock - Adds a new block of events to a Pulseq sequence.  It offers three ways to add a block: 1) using a...</li> <li>addGradients - This function superposes multiple gradient waveforms. It takes a cell array of gradient waveforms...</li> <li>addRamps - This function adds ramp segments to a k-space trajectory to ensure smooth transitions between zer...</li> <li>align - This function aligns the objects within a Pulseq block based on a specified alignment type ('left...</li> <li>applySoftDelay - This function adjusts the durations of blocks within a Pulseq sequence based on user-specified so...</li> <li>applyToBlock - This helper function processes a sequence of Pulseq events (potentially within a block) and conve...</li> <li>applyToSeq - This helper function applies a transformation defined by an object <code>obj</code> to a Pulseq sequence `se...</li> </ul>"},{"location":"matlab_api/#c","title":"C","text":"<ul> <li>calcAdcSeg - This function calculates the optimal splitting of an ADC (Analog-to-Digital Converter) signal int...</li> <li>calcDuration - Calculates the duration of a Pulseq event, a sequence of events, or a block structure.  It iterat...</li> <li>calcMomentsBtensor - Calculates the magnetic field (B) and its first three moments (m1, m2, m3) from a Pulseq sequence...</li> <li>calcPNS - Calculates peripheral nerve stimulation (PNS) levels using the safe model implementation by Szcze...</li> <li>calcRamp - Calculates a k-space trajectory connecting two given points (k0 and kend) while adhering to gradi...</li> <li>calcRfBandwidth - Calculates the bandwidth of an RF pulse using a Fast Fourier Transform (FFT).  It assumes a low-a...</li> <li>calcRfCenter - Calculates the effective center time point of an RF pulse. For shaped pulses, it determines the t...</li> <li>calcRfPower - Calculates the relative power of an RF pulse.  It returns the relative energy of the pulse in uni...</li> <li>calculateKspacePP - Calculates the k-space trajectory of a Pulseq sequence using a piecewise-polynomial gradient wave...</li> <li>checkTiming - This function checks the timing and other parameters of all blocks and objects within a Pulseq se...</li> <li>compressShape - Compresses a gradient or pulse waveform using a run-length encoding scheme applied to its derivat...</li> <li>compressShape_mat - Compresses a gradient or pulse waveform using a run-length encoding scheme applied to its derivat...</li> <li>conjugate - This function computes the conjugate of a quaternion or a collection of quaternions.  A quaternio...</li> <li>convert - Converts numerical data between different units used in magnetic resonance imaging (MRI) gradient...</li> </ul>"},{"location":"matlab_api/#d","title":"D","text":"<ul> <li>decompressShape - Decompresses a gradient or pulse shape that has been compressed using a run-length encoding schem...</li> <li>duration - Calculates the total duration of a Pulseq sequence and optionally returns the number of blocks an...</li> </ul>"},{"location":"matlab_api/#e","title":"E","text":"<ul> <li>evalLabels - This function evaluates the values of labels used within a Pulseq sequence. It can calculate the ...</li> <li>EventLibrary - Internal library class for storing and managing MRI sequence events (RF pulses, gradients, ADC ev...</li> </ul>"},{"location":"matlab_api/#f","title":"F","text":"<ul> <li>findBlockByTime - This helper function finds the index of the block in a Pulseq sequence that contains a given time...</li> <li>findFlank - This function finds the x-coordinate of the left flank of a given function f. It determines the f...</li> <li>flipGradAxis - This helper function inverts all gradients along a specified axis or channel within a Pulseq sequ...</li> <li>fromRotMat - This function converts a 3x3 rotation matrix into a normalized quaternion.  It handles potential ...</li> </ul>"},{"location":"matlab_api/#g","title":"G","text":"<ul> <li>gauss - This function calculates the Gaussian function, defined as exp(-pi*x^2). It serves as a convenien...</li> <li>getBlock - Retrieves a specific block from a Pulseq sequence object.  The function decompresses all events a...</li> <li>getDefinition - Retrieves the value associated with a specified key from a custom definitions structure within a ...</li> <li>getSupportedLabels - This function returns a cell array of strings representing supported labels for Pulseq sequence p...</li> <li>getSupportedRfUse - This function returns a cell array containing strings representing the supported RF pulse uses in...</li> </ul>"},{"location":"matlab_api/#i","title":"I","text":"<ul> <li>init - mrMusic.init : create frequency and note variables creates global Matlab variables named after no...</li> <li>install - Installs a Pulseq sequence onto a Siemens MRI system.  The function detects the scanner environme...</li> <li>isOctave - This function checks if the code is running within the Octave environment. It uses a persistent v...</li> </ul>"},{"location":"matlab_api/#m","title":"M","text":"<ul> <li>makeAdc - Creates an ADC readout event for Pulseq sequence design.  It defines parameters for the analog-to...</li> <li>makeAdiabaticPulse - Generates adiabatic inversion pulses of type 'hypsec' (hyperbolic secant) or 'wurst' (wideband, u...</li> <li>makeArbitraryGrad - Creates a gradient event with an arbitrary waveform.  The function ensures the waveform adheres t...</li> <li>makeArbitraryRf - Creates an arbitrary RF pulse with a specified shape and parameters.  The function takes a comple...</li> <li>makeBlockPulse - Generates a block RF pulse with optional slice-selective capabilities.  The function creates a Pu...</li> <li>makeDelay - Creates a delay event for use in a Pulseq sequence.  This function generates a structure represen...</li> <li>makeDigitalOutputPulse - Creates a digital output pulse event, also known as a trigger, for a specified channel.  This fun...</li> <li>makeExtendedTrapezoid - Creates an extended trapezoid gradient waveform.  This function allows the definition of a gradie...</li> <li>makeExtendedTrapezoidArea - Generates the shortest possible extended trapezoid gradient waveform with a specified area, start...</li> <li>makeGaussPulse - Generates a Gaussian RF pulse, optionally with slice-selective gradients.  The function creates a...</li> <li>makeLabel - Creates a label event for use in Pulseq sequences.  This function generates a structure defining ...</li> <li>makeSincPulse - Generates a slice-selective sinc pulse and optionally its corresponding slice selection and refoc...</li> <li>makeSLRpulse - Generates a selective excitation RF pulse using the Shinnar-Le Roux (SLR) algorithm. This functio...</li> <li>makeSoftDelay - Creates a soft delay event for use with Pulseq sequences. This event modifies the duration of an ...</li> <li>makeTrapezoid - Generates a trapezoidal gradient waveform for a specified channel in a Pulseq sequence.  The func...</li> <li>makeTrigger - Creates a trigger event for synchronization with an external signal.  This function generates a s...</li> <li>md5 - digest = md5(message) Compute the MD5 digest of the message, as a hexadecimal digest. based on th...</li> <li>melodyToPitchesAndDurations - mrMusic.melodyToPitchesAdnDurations : convert melody to the channel-pitch-duration tables</li> <li>melodyToScale - mrMusic.melodyToPitchesAdnDurations : convert melody to another melody object that consists o...</li> <li>modGradAxis - This function modifies the amplitude of gradient events along a specified axis ('x', 'y', or 'z')...</li> <li>multiply - This function calculates the product of two quaternions.  A quaternion is represented as a 1x4 ve...</li> <li>musicToSequence - populate the Pulseq sequence baased on the provided pitches and durations</li> </ul>"},{"location":"matlab_api/#n","title":"N","text":"<ul> <li>normalize - This function normalizes a quaternion or an array of quaternions.  It scales each quaternion to h...</li> </ul>"},{"location":"matlab_api/#o","title":"O","text":"<ul> <li>opts - Sets gradient limits and other system properties of the MR system.  It allows users to define or ...</li> </ul>"},{"location":"matlab_api/#p","title":"P","text":"<ul> <li>paperPlot - This helper function generates a plot of a Pulseq sequence in a style suitable for scientific pub...</li> <li>parsemr - PARSEMR Load a sequence file and display a summary of the sequence events PARSEMR(filename) Load ...</li> <li>plot - This function plots a Pulseq sequence object in a new figure.  It offers various options to contr...</li> <li>pts2waveform - This function interpolates a set of points (times, amplitudes) to generate a waveform with a spec...</li> </ul>"},{"location":"matlab_api/#r","title":"R","text":"<ul> <li>read - Loads a Pulseq sequence from a specified file into a sequence object.  The function reads definit...</li> <li>readasc - Reads Siemens ASC ASCII-formatted text files and returns a MATLAB structure containing the data. ...</li> <li>readBinary - Loads a Pulseq sequence from a binary file.  This function reads a binary file containing a Pulse...</li> <li>restoreAdditionalShapeSamples - This function post-processes a gradient waveform, specifically addressing issues that can arise w...</li> <li>rotate - Rotates a 3D vector by a given unit quaternion.  The function efficiently implements quaternion r...</li> <li>rotate3D - Rotates gradient objects within a Pulseq block using a provided rotation matrix or quaternion.  N...</li> </ul>"},{"location":"matlab_api/#s","title":"S","text":"<ul> <li>scaleGrad - Scales a gradient waveform by a given scalar value.  It handles both trapezoidal and arbitrary wa...</li> <li>SeqPlot - This function generates a plot visualizing different aspects of a Pulseq sequence.  It displays t...</li> <li>Sequence - This function is a constructor for the Sequence object in the Pulseq toolbox. It initializes a se...</li> <li>setBlock - This function adds or replaces a block of events within a Pulseq sequence. It accepts events in u...</li> <li>setDefinition - This function modifies or creates a custom definition within a Pulseq sequence object.  It allows...</li> <li>simRf - Simulates the effect of an RF pulse on nuclear magnetization using a quaternion-based rotation fo...</li> <li>sinc - This function calculates the sinc function: sinc(x) = sin(\u03c0x)/(\u03c0x). It handles the case where x i...</li> <li>sound - Plays the sequence waveforms through the system speaker.  It processes the waveforms from the Pul...</li> <li>splitGradient - This function decomposes a trapezoidal gradient into its constituent parts: slew-up, flat-top, an...</li> <li>splitGradientAt - Splits a trapezoidal or arbitrary gradient into two parts at a specified time point.  The functio...</li> </ul>"},{"location":"matlab_api/#t","title":"T","text":"<ul> <li>testReport - Analyzes a Pulseq sequence object and generates a text report summarizing key sequence parameters...</li> <li>toRotMat - This function converts a normalized quaternion into its corresponding 3x3 rotation matrix.  The q...</li> <li>traj2grad - Converts a k-space trajectory into gradient waveforms using finite differences.  The input trajec...</li> <li>transform - Creates a transformed copy of a Pulseq sequence by applying a rotation, translation, or a 4x4 hom...</li> <li>TransformFOV - This function transforms the field of view (FOV) of a Pulseq sequence by applying rotation, trans...</li> </ul>"},{"location":"matlab_api/#v","title":"V","text":"<ul> <li>version - Returns the version information for the Pulseq Matlab package.  The specific version information ...</li> </ul>"},{"location":"matlab_api/#w","title":"W","text":"<ul> <li>waveforms_and_times - This function extracts and organizes waveform data from a Pulseq sequence object. It decompresses...</li> <li>write - Writes a Pulseq sequence object to a file in the Pulseq open file format.  This function serializ...</li> <li>write_v141 - Writes a Pulseq sequence object to a file in version 1.4.1 format.  This function takes a Pulseq ...</li> <li>writeBinary - Writes a Pulseq sequence object to a file in binary format, using the Pulseq open file format spe...</li> </ul>"},{"location":"matlab_api/EventLibrary/","title":"EventLibrary","text":"<p>Internal library class for storing and managing MRI sequence events (RF pulses, gradients, ADC events). Used by the Sequence class to efficiently store and retrieve events with deduplication.</p>"},{"location":"matlab_api/EventLibrary/#syntax","title":"Syntax","text":"<pre><code>function eventLib = mr.EventLibrary()\n</code></pre>"},{"location":"matlab_api/EventLibrary/#calling-pattern","title":"Calling Pattern","text":"<pre><code>eventLib = mr.EventLibrary()\n</code></pre>"},{"location":"matlab_api/EventLibrary/#parameters","title":"Parameters","text":"<p>No parameters</p>"},{"location":"matlab_api/EventLibrary/#returns","title":"Returns","text":"Output Type Description <code>obj</code> unknown"},{"location":"matlab_api/SeqPlot/","title":"SeqPlot","text":"<p>This function generates a plot visualizing different aspects of a Pulseq sequence.  It displays the ADC/labels, RF magnitude, RF/ADC phase, and gradient waveforms (Gx, Gy, Gz) over time.  The plot can be customized using various optional parameters to control the time range, block range, time units, labels to display, whether to stack plots, show blocks, and display guides.</p>"},{"location":"matlab_api/SeqPlot/#syntax","title":"Syntax","text":"<pre><code>function obj = SeqPlot(seq, varargin)\n</code></pre>"},{"location":"matlab_api/SeqPlot/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq = mr.aux.SeqPlot(...)\n</code></pre>"},{"location":"matlab_api/SeqPlot/#parameters","title":"Parameters","text":""},{"location":"matlab_api/SeqPlot/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>seq</code> struct A Pulseq sequence object containing the data to be plotted. <code>myPulseqSequence</code>"},{"location":"matlab_api/SeqPlot/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>showBlocks</code> logical <code>false</code> Specifies whether to show block boundaries on the plot.  Accepts logical true/false or numeric 1/0. Valid values: true/false or 1/0 <code>true</code> <code>timeRange</code> double <code>[0 inf]</code> Defines the time range to display on the plot.  Must be a 2-element vector [start_time end_time]. Valid values: 2-element numeric vector (Units: seconds) <code>[0 0.1]</code> <code>blockRange</code> double <code>[1 inf]</code> Defines the range of blocks from the sequence to include in the plot. Must be a 2-element vector [start_block end_block]. Valid values: 2-element numeric vector <code>[1 10]</code> <code>timeDisp</code> char <code>validTimeUnits{1}</code> Specifies the units for the time axis of the plot. Valid values: 's', 'ms', 'us' <code>'ms'</code> <code>label</code> char <code>[]</code> Specifies which labels to display on the plot.  Accepts a string or array of strings. Valid values: mr.getSupportedLabels() <code>'excitation'</code> <code>hide</code> logical <code>false</code> Specifies whether to hide the generated figure. Accepts logical true/false or numeric 1/0. Valid values: true/false or 1/0 <code>false</code> <code>stacked</code> logical <code>false</code> Specifies whether to stack the plots vertically. Only works in MATLAB, not Octave. Valid values: true/false or 1/0 <code>true</code> <code>showGuides</code> logical <code>true</code> Specifies whether to show guides on the plot. Valid values: true/false or 1/0 <code>true</code>"},{"location":"matlab_api/SeqPlot/#returns","title":"Returns","text":"Output Type Description <code>obj</code> struct A structure containing handles to the generated figure and axes."},{"location":"matlab_api/SeqPlot/#examples","title":"Examples","text":"<pre><code>seq = mr.SeqPlot(mySequence, 'timeRange', [0, 0.05], 'timeDisp', 'ms', 'label', 'excitation')\n</code></pre>"},{"location":"matlab_api/SeqPlot/#see-also","title":"See Also","text":"<p>mr.getSupportedLabels</p>"},{"location":"matlab_api/Sequence/","title":"Sequence","text":"<p>This function is a constructor for the Sequence object in the Pulseq toolbox. It initializes a sequence object with default parameters and libraries for storing different types of events (RF pulses, gradients, ADC events, etc.).  It also sets up default raster times and provides methods for reading and writing sequence files in different formats (v1.4.1 and binary).  Additional methods are included for calculating pulse-related parameters such as PNS (peak-to-null ratio) and gradient moments.</p>"},{"location":"matlab_api/Sequence/#syntax","title":"Syntax","text":"<pre><code>function obj = Sequence(varargin)\n</code></pre>"},{"location":"matlab_api/Sequence/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq = mr.Sequence(...)\n</code></pre>"},{"location":"matlab_api/Sequence/#parameters","title":"Parameters","text":""},{"location":"matlab_api/Sequence/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>trajectory_delay</code> double <code>0</code> This parameter likely controls a delay in the sequence trajectory.  It represents the time offset applied before the beginning of the trajectory. (Units: seconds) <code>0.001</code>"},{"location":"matlab_api/Sequence/#returns","title":"Returns","text":"Output Type Description <code>obj</code> struct A Sequence object containing all the initialized parameters, libraries, and methods for manipulating and storing the MRI sequence information."},{"location":"matlab_api/Sequence/#examples","title":"Examples","text":"<pre><code>seq = seq = mr.Sequence(); % Creates a sequence object with default settings\nseq = seq = mr.Sequence(mr.opts()); % Creates a sequence object using custom system options from mr.opts()\nseq = seq = mr.Sequence('trajectory_delay',0.002); % Creates a sequence object with a 2ms trajectory delay\n</code></pre>"},{"location":"matlab_api/Sequence/#see-also","title":"See Also","text":"<p>mr.opts, Sequence.read, Sequence.write, Sequence.write_v141, Sequence.readBinary, Sequence.writeBinary, Sequence.calcPNS, Sequence.calcMomentsBtensor, Sequence.testReport</p>"},{"location":"matlab_api/TransformFOV/","title":"TransformFOV","text":"<p>This function transforms the field of view (FOV) of a Pulseq sequence by applying rotation, translation, and scaling operations.  It takes as input a set of Pulseq events (e.g., RF pulses, gradients, ADC events) and modifies their spatial coordinates according to the specified transformations. The function also handles an optional prior phase cycle and system parameters.</p>"},{"location":"matlab_api/TransformFOV/#syntax","title":"Syntax","text":"<pre><code>function obj = TransformFOV(varargin)\n</code></pre>"},{"location":"matlab_api/TransformFOV/#calling-pattern","title":"Calling Pattern","text":"<pre><code>tra = mr.TransformFOV(...)\n</code></pre>"},{"location":"matlab_api/TransformFOV/#parameters","title":"Parameters","text":""},{"location":"matlab_api/TransformFOV/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>rotation</code> double <code>[]</code> A 3x3 rotation matrix defining the rotation of the FOV.  An empty matrix indicates no rotation. (Units: radians) <code>[1 0 0; 0 1 0; 0 0 1]</code> <code>translation</code> double <code>[]</code> A 1x3 vector representing the translation of the FOV. An empty matrix indicates no translation. (Units: meters) <code>[0.01 0 0]</code> <code>scale</code> double <code>[]</code> A 1x3 vector defining scaling factors along each axis. An empty matrix indicates no scaling. <code>[1 1 1]</code> <code>prior_phase_cycle</code> double <code>0</code> An integer representing a prior phase cycle to be applied before the transformation. Typically used for k-space trajectory calculations. <code>0</code> <code>high_accuracy</code> logical <code>false</code> A logical flag indicating whether to use a high-accuracy transformation algorithm (currently commented out). <code>true</code> <code>system</code> struct <code>[]</code> A structure containing system parameters (e.g., gradient limits, slew rates). If empty, default system parameters are used. <code>mr.opts()</code>"},{"location":"matlab_api/TransformFOV/#returns","title":"Returns","text":"Output Type Description <code>obj</code> struct A structure containing the transformation parameters and possibly the transformed sequence data."},{"location":"matlab_api/TransformFOV/#examples","title":"Examples","text":"<pre><code>obj = tra = mr.TransformFOV('rotation', [0 1; -1 0], 'translation', [0.01, 0, 0]);\nobj = tra = mr.TransformFOV('scale', [1.1 0.9 1], 'system', mr.opts('maxGrad', 40));\n</code></pre>"},{"location":"matlab_api/TransformFOV/#see-also","title":"See Also","text":"<p>mr.opts</p>"},{"location":"matlab_api/addBlock/","title":"addBlock","text":"<p>Adds a new block of events to a Pulseq sequence.  It offers three ways to add a block: 1) using a pre-defined block structure; 2) specifying individual events; 3) specifying a duration and then populating the block with events, up to that duration.</p>"},{"location":"matlab_api/addBlock/#syntax","title":"Syntax","text":"<pre><code>function addBlock(obj,varargin)\n</code></pre>"},{"location":"matlab_api/addBlock/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.addBlock(...)\n</code></pre>"},{"location":"matlab_api/addBlock/#parameters","title":"Parameters","text":""},{"location":"matlab_api/addBlock/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> object The Pulseq sequence object to which the block will be added. <code>mySequence</code>"},{"location":"matlab_api/addBlock/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>trajectory_delay</code> double <code>0</code> Delay before starting the trajectory.  Only applicable if the input block events include a gradient event (Units: seconds) <code>0.001</code>"},{"location":"matlab_api/addBlock/#returns","title":"Returns","text":"Output Type Description <code>none</code> none This function modifies the Pulseq sequence object in place. It does not return any value."},{"location":"matlab_api/addBlock/#examples","title":"Examples","text":"<pre><code>seq.addBlock(mySequence, struct('type', 'adc', 'duration', 0.001));\nseq.addBlock(mySequence, makeTrapezoid('x', 100, 0.001));\nseq.addBlock(mySequence, 0.01, makeTrapezoid('x', 100, 0.001), makeAdc(0.005))\nseq.addBlock(mySequence, makeTrapezoid('x', 100, 0.001), trajectory_delay = 0.002)\n</code></pre>"},{"location":"matlab_api/addBlock/#see-also","title":"See Also","text":"<p>setBlock, makeAdc, makeTrapezoid, makeSincPulse</p>"},{"location":"matlab_api/addGradients/","title":"addGradients","text":"<p>This function superposes multiple gradient waveforms. It takes a cell array of gradient waveforms as input and returns a single gradient waveform representing their sum.  The function handles different gradient types (trapezoids and arbitrary waveforms), checks for consistency in channel and timing, and applies system limits (maxGrad and maxSlew). If all input gradients are trapezoids with identical timing, the function efficiently sums their amplitudes.</p>"},{"location":"matlab_api/addGradients/#syntax","title":"Syntax","text":"<pre><code>function grad = addGradients(grads, varargin)\n</code></pre>"},{"location":"matlab_api/addGradients/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.addGradients(...)\n</code></pre>"},{"location":"matlab_api/addGradients/#parameters","title":"Parameters","text":""},{"location":"matlab_api/addGradients/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>grads</code> cell A cell array containing multiple gradient waveforms. Each element of the cell array should be a structure representing a single gradient waveform (e.g., as created by <code>makeTrapezoid</code>).  These structures must have at least 'channel', 'delay', and 'type' fields. <code>{g1, g2, g3}</code>"},{"location":"matlab_api/addGradients/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> A structure containing system parameters, typically obtained from <code>mr.opts()</code>.  If not provided, <code>mr.opts()</code> is used to get default system parameters.  Relevant fields include <code>maxSlew</code> and <code>maxGrad</code>. <code>mr.opts()</code> <code>maxGrad</code> double <code>0</code> Maximum gradient amplitude. If set to a value greater than 0, it overrides the <code>maxGrad</code> value from the <code>system</code> parameter. (Units: Hz/m) <code>400</code> <code>maxSlew</code> double <code>0</code> Maximum gradient slew rate. If set to a value greater than 0, it overrides the <code>maxSlew</code> value from the <code>system</code> parameter. (Units: Hz/m/s) <code>20000</code>"},{"location":"matlab_api/addGradients/#returns","title":"Returns","text":"Output Type Description <code>grad</code> struct A structure representing the resulting superimposed gradient waveform."},{"location":"matlab_api/addGradients/#examples","title":"Examples","text":"<pre><code>[grad] = mr.addGradients({g1, g2}, mr.opts(), 'maxGrad', 500, 'maxSlew', 30000)\n</code></pre>"},{"location":"matlab_api/addGradients/#see-also","title":"See Also","text":"<p>Sequence.addBlock, mr.opts, makeTrapezoid</p>"},{"location":"matlab_api/addRamps/","title":"addRamps","text":"<p>This function adds ramp segments to a k-space trajectory to ensure smooth transitions between zero and the desired trajectory. It prevents violations of gradient and slew rate limits.  It can handle single or multiple k-space trajectories (provided as a cell array or matrix). It can also add corresponding zero-filled segments to an accompanying RF pulse.</p>"},{"location":"matlab_api/addRamps/#syntax","title":"Syntax","text":"<pre><code>function varargout=addRamps(k,varargin)\n</code></pre>"},{"location":"matlab_api/addRamps/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.addRamps(...)\n</code></pre>"},{"location":"matlab_api/addRamps/#parameters","title":"Parameters","text":""},{"location":"matlab_api/addRamps/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>k</code> double cell The k-space trajectory.  Can be a numeric array (single trajectory) or a cell array of numeric arrays (multiple trajectories). Each column represents a time point. <code>[1;2;3]</code>"},{"location":"matlab_api/addRamps/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> A structure containing system limits (e.g., maxGrad, maxSlew). If empty, defaults to mr.opts(). <code>mr.opts()</code> <code>rf</code> double <code>[]</code> An RF pulse shape. If provided, segments of zeros are added to match the duration of the added ramps. <code>[0.5 0.5 0.5]</code> <code>maxGrad</code> double <code>0</code> Maximum gradient amplitude. Overrides the value in the 'system' structure if greater than 0. (Units: Hz/m) <code>30e6</code> <code>maxSlew</code> double <code>0</code> Maximum gradient slew rate. Overrides the value in the 'system' structure if greater than 0. (Units: Hz/m/s) <code>100e6</code> <code>gradOversampling</code> logical <code>false</code> Logical flag indicating whether gradient oversampling is used during ramp calculation. <code>true</code>"},{"location":"matlab_api/addRamps/#returns","title":"Returns","text":"Output Type Description <code>varargout</code> double cell"},{"location":"matlab_api/addRamps/#examples","title":"Examples","text":"<pre><code>k_space = [1;2;3];\n[k_space_with_ramps] = mr.addRamps(k_space, 'maxGrad', 30e6, 'maxSlew', 100e6);\nk_space = {[1;2;3],[4;5;6]};\n[k_space_with_ramps1, k_space_with_ramps2] = mr.addRamps(k_space, 'maxGrad', 30e6, 'maxSlew', 100e6);\nk_space = [1;2;3]; rf_pulse = [0.5 0.5 0.5];\n[k_space_with_ramps, rf_with_zeros] = mr.addRamps(k_space, 'rf', rf_pulse, 'maxGrad', 30e6, 'maxSlew', 100e6);\n</code></pre>"},{"location":"matlab_api/addRamps/#see-also","title":"See Also","text":"<p>mr.opts, mr.calcRamp, Sequence.makeArbitraryGrad</p>"},{"location":"matlab_api/align/","title":"align","text":"<p>This function aligns the objects within a Pulseq block based on a specified alignment type ('left', 'center', or 'right').  It considers pre-existing delays within the objects, calculates the total block duration, and then adjusts object delays to achieve the desired alignment.  Optionally, a predefined block duration can be provided as input; the function will then check if the total object duration exceeds this limit and raise an error if it does.</p>"},{"location":"matlab_api/align/#syntax","title":"Syntax","text":"<pre><code>function [varargout] = align(varargin)\n</code></pre>"},{"location":"matlab_api/align/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.align(...)\n</code></pre>"},{"location":"matlab_api/align/#parameters","title":"Parameters","text":""},{"location":"matlab_api/align/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>align_spec</code> char Specifies the alignment of objects within the block.  Possible values are 'left', 'center', and 'right'. Valid values: 'left', 'center', 'right' <code>'left'</code> <code>obj</code> struct Pulseq object to be aligned. Multiple objects can be specified. Valid values: Pulseq object <code>myPulseqObject</code> <code>required_duration</code> double Optional. Specifies the desired duration of the block. If provided, the function will check if the total duration of the objects exceeds this value. Valid values: positive number (Units: seconds) <code>0.01</code>"},{"location":"matlab_api/align/#returns","title":"Returns","text":"Output Type Description <code>objects</code> cell Cell array containing the aligned Pulseq objects. <code>required_duration</code> double Optional return value.  Returns the required duration of the block (if this was specified as an input)."},{"location":"matlab_api/align/#examples","title":"Examples","text":"<pre><code>mr.align('left', obj1, obj2);\nmr.align('center', obj1, obj2, obj3);\nmr.align('right', obj1, 0.02, obj2);\nalignedObjects = mr.align('left', obj1, obj2);\n</code></pre>"},{"location":"matlab_api/align/#see-also","title":"See Also","text":"<p>Sequence.addBlock</p>"},{"location":"matlab_api/applySoftDelay/","title":"applySoftDelay","text":"<p>This function adjusts the durations of blocks within a Pulseq sequence based on user-specified soft delays.  It takes key-value pairs as input, where the keys are string identifiers (hints) for soft delays (e.g., 'TE', 'TR') and the values are the desired durations in seconds.  The function iterates through the sequence's blocks, identifying those with matching soft delay hints. It then updates the block durations accordingly, ensuring consistency between the numeric and string IDs associated with each soft delay.  Soft delays not specified in the input are left unchanged.</p>"},{"location":"matlab_api/applySoftDelay/#syntax","title":"Syntax","text":"<pre><code>function applySoftDelay(obj, varargin)\n</code></pre>"},{"location":"matlab_api/applySoftDelay/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.applySoftDelay(...)\n</code></pre>"},{"location":"matlab_api/applySoftDelay/#parameters","title":"Parameters","text":""},{"location":"matlab_api/applySoftDelay/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>blockRange</code> double <code>[1 inf]</code> Specifies the range of blocks to modify. Defaults to applying soft delays to all blocks. Valid values: A two-element vector defining the start and end indices of the blocks to process.  Must contain positive integers. <code>[5 10]</code> <code>channelWeights</code> double <code>[1 1 1]</code> A vector of weights applied to the soft delays on different channels.  Not directly used in the provided excerpt but likely intended for applying different delays to different channels. Valid values: A three-element vector representing weights for x, y, and z channels. <code>[0.8 1 1.2]</code> <code>onlyProduceSoundData</code> logical <code>false</code> A flag indicating whether to only produce sound data. Not directly used in the provided excerpt, but likely related to optional data generation. Valid values: true or false <code>true</code>"},{"location":"matlab_api/applySoftDelay/#examples","title":"Examples","text":"<pre><code>seq.applySoftDelay('TE', 40e-3);\nseq.applySoftDelay('TE', 50e-3, 'TR', 2);\n</code></pre>"},{"location":"matlab_api/applyToBlock/","title":"applyToBlock","text":"<p>This helper function processes a sequence of Pulseq events (potentially within a block) and converts it into a standardized cell array.  It separates the events into different categories: RF pulses, ADC events, gradient events (x, y, z), and other miscellaneous events. It also handles the case where the input is a single structure representing a block of events or a cell array containing such structures.  The function updates the object's label settings based on 'NOPOS', 'NOROT', and 'NOSCL' labels present in the input events.</p>"},{"location":"matlab_api/applyToBlock/#syntax","title":"Syntax","text":"<pre><code>function out=applyToBlock(obj, varargin)\n</code></pre>"},{"location":"matlab_api/applyToBlock/#calling-pattern","title":"Calling Pattern","text":"<pre><code>tra.applyToBlock(...)\n</code></pre>"},{"location":"matlab_api/applyToBlock/#parameters","title":"Parameters","text":""},{"location":"matlab_api/applyToBlock/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> struct The Pulseq sequence object (likely a mr.Sequence object) to which the events will be applied.  This object holds the sequence information and allows for modification of labels. <code>seq</code>"},{"location":"matlab_api/applyToBlock/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>sameSeq</code> logical <code>false</code> A boolean flag indicating whether to assume the input events belong to the same sequence as the object. This parameter is likely used for internal optimization and may influence how the function processes the events. Valid values: true, false <code>true</code> <code>blockRange</code> numeric <code>[1 inf]</code> A two-element vector specifying the range of events to process.  Defaults to processing all events. It can be used to select a subset of events from a longer sequence. Valid values: A 1x2 vector with positive integers [start_index end_index] <code>[10 20]</code>"},{"location":"matlab_api/applyToBlock/#returns","title":"Returns","text":"Output Type Description <code>out</code> cell A cell array containing the processed Pulseq events. The structure of this cell array is not explicitly defined but likely follows a format consistent with Pulseq's internal representation of sequence events. The exact structure depends on the content of the input 'varargin'."},{"location":"matlab_api/applyToBlock/#examples","title":"Examples","text":"<pre><code>out = tra.applyToBlock(seq, rf_event, grad_event, adc_event);\n</code></pre>"},{"location":"matlab_api/applyToSeq/","title":"applyToSeq","text":"<p>This helper function applies a transformation defined by an object <code>obj</code> to a Pulseq sequence <code>seq</code>. It iterates through blocks of the sequence within a specified range and applies the transformation defined in <code>obj.applyToBlock</code> to each block.  It offers the option to modify the input sequence (<code>sameSeq = false</code>) or to perform the transformation in-place (<code>sameSeq = true</code>).</p>"},{"location":"matlab_api/applyToSeq/#syntax","title":"Syntax","text":"<pre><code>function seq2 = applyToSeq(obj, seq, varargin)\n</code></pre>"},{"location":"matlab_api/applyToSeq/#calling-pattern","title":"Calling Pattern","text":"<pre><code>tra.applyToSeq(...)\n</code></pre>"},{"location":"matlab_api/applyToSeq/#parameters","title":"Parameters","text":""},{"location":"matlab_api/applyToSeq/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> struct An object containing a method <code>applyToBlock</code> that defines the transformation to be applied to each block of the sequence. This method should accept a Pulseq block as input and return a transformed Pulseq block. <code>myTransformationObject</code>"},{"location":"matlab_api/applyToSeq/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>sameSeq</code> logical <code>false</code> Specifies whether to modify the input sequence in-place. If true, the transformation is applied directly to the input sequence <code>seq</code>. If false (default), a new sequence <code>seq2</code> is created and the transformation is applied to this new sequence. Valid values: true, false <code>true</code> <code>blockRange</code> numeric array <code>[1 inf]</code> A two-element array specifying the range of blocks to process. The first element is the starting block index, and the second element is the ending block index.  If the second element is Inf, all blocks from the starting index to the end of the sequence are processed. Valid values: [startIndex, endIndex] where startIndex and endIndex are positive integers, and endIndex can be Inf <code>[5, 10]</code>"},{"location":"matlab_api/applyToSeq/#returns","title":"Returns","text":"Output Type Description <code>seq2</code> struct A Pulseq sequence. If <code>sameSeq</code> is true, this is the same as the input <code>seq</code>, but modified in place. If <code>sameSeq</code> is false, this is a new Pulseq sequence containing the transformed blocks."},{"location":"matlab_api/applyToSeq/#examples","title":"Examples","text":"<pre><code>seq2 = tra.applyToSeq(myTransformationObject, mySequence);\nseq2 = tra.applyToSeq(myTransformationObject, mySequence, 'sameSeq', true, 'blockRange', [1, 10]);\n</code></pre>"},{"location":"matlab_api/applyToSeq/#see-also","title":"See Also","text":"<p>applyToBlock, getBlock</p>"},{"location":"matlab_api/calcAdcSeg/","title":"calcAdcSeg","text":"<p>This function calculates the optimal splitting of an ADC (Analog-to-Digital Converter) signal into segments for compatibility with specific MRI scanner hardware, particularly Siemens scanners.  Scanners may have limitations on the maximum number of samples in a single ADC object. This function determines the number of segments and samples per segment, ensuring that each segment's length adheres to the scanner's constraints while minimizing the total number of segments.  The function considers the gradient raster time and dwell time to align segments with the gradient waveform.  It offers two modes: 'shorten' (reducing the total number of samples if necessary) and 'lengthen' (increasing the number of samples to satisfy constraints).</p>"},{"location":"matlab_api/calcAdcSeg/#syntax","title":"Syntax","text":"<pre><code>function [adcSegments,adcSamplesPerSegment] = calcAdcSeg(numSamples,dwell,system,mode)\n</code></pre>"},{"location":"matlab_api/calcAdcSeg/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.calcAdcSeg(...)\n</code></pre>"},{"location":"matlab_api/calcAdcSeg/#parameters","title":"Parameters","text":""},{"location":"matlab_api/calcAdcSeg/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>numSamples</code> double The total number of ADC samples. <code>16384</code> <code>dwell</code> double The dwell time (sampling interval) in seconds. <code>4e-6</code> seconds <code>system</code> struct A structure containing system parameters.  It must include fields like 'adcSamplesLimit' (maximum number of samples per ADC segment), 'adcSamplesDivisor' (divisor for the number of samples per segment), 'gradRasterTime' (gradient raster time), and 'adcRasterTime' (ADC raster time). <code>mr.opts()</code> <code>mode</code> char Specifies how to handle the number of samples if the initial configuration does not satisfy constraints.  'shorten' reduces the number of samples to meet constraints; 'lengthen' increases the number of samples. <code>'shorten'</code>"},{"location":"matlab_api/calcAdcSeg/#returns","title":"Returns","text":"Output Type Description <code>adcSegments</code> double The optimal number of ADC segments. <code>adcSamplesPerSegment</code> double The number of samples per ADC segment."},{"location":"matlab_api/calcAdcSeg/#examples","title":"Examples","text":"<pre><code>[adcSegments, adcSamplesPerSegment] = mr.calcAdcSeg(16384, 4e-6, mr.opts(), 'shorten')\n</code></pre>"},{"location":"matlab_api/calcAdcSeg/#see-also","title":"See Also","text":"<p>mr.opts</p>"},{"location":"matlab_api/calcDuration/","title":"calcDuration","text":"<p>Calculates the duration of a Pulseq event, a sequence of events, or a block structure.  It iterates through the events (delays, RF pulses, gradients, ADCs, traps, outputs, and triggers), determining the maximum duration among them.  The function handles both individual events and block structures, converting the latter into a cell array of events before processing.</p>"},{"location":"matlab_api/calcDuration/#syntax","title":"Syntax","text":"<pre><code>function duration=calcDuration(varargin)\n</code></pre>"},{"location":"matlab_api/calcDuration/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.calcDuration(...)\n</code></pre>"},{"location":"matlab_api/calcDuration/#parameters","title":"Parameters","text":""},{"location":"matlab_api/calcDuration/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>delay</code> struct <code>N/A</code> A Pulseq delay event structure. Contains at least a 'delay' field specifying the delay duration in seconds. (Units: seconds) <code>{type: 'delay', delay: 0.001}</code> <code>rf</code> struct <code>N/A</code> A Pulseq RF pulse event structure.  Contains 'delay', 'shape_dur' (pulse duration), and 'ringdownTime' fields specifying durations in seconds. (Units: seconds) <code>{type: 'rf', delay: 0.0001, shape_dur: 0.0005, ringdownTime: 0.0001}</code> <code>grad</code> struct <code>N/A</code> A Pulseq gradient event structure.  Contains 'delay' and 'shape_dur' fields specifying durations in seconds. (Units: seconds) <code>{type: 'grad', delay: 0.0002, shape_dur: 0.001}</code> <code>adc</code> struct <code>N/A</code> A Pulseq ADC event structure. Contains 'delay', 'numSamples', 'dwell', and 'deadTime' fields.  'delay' and 'deadTime' are in seconds, 'dwell' is the sampling time in seconds. (Units: seconds) <code>{type: 'adc', delay: 0.0001, numSamples: 128, dwell: 0.000001, deadTime: 0.00005}</code> <code>trap</code> struct <code>N/A</code> A Pulseq trapezoidal gradient event structure. Contains 'delay', 'riseTime', 'flatTime', and 'fallTime' fields specifying durations in seconds. (Units: seconds) <code>{type: 'trap', delay: 0.0001, riseTime: 0.0002, flatTime: 0.001, fallTime: 0.0002}</code>"},{"location":"matlab_api/calcDuration/#returns","title":"Returns","text":"Output Type Description <code>duration</code> double The maximum duration (in seconds) among all provided events or within the block structure."},{"location":"matlab_api/calcDuration/#examples","title":"Examples","text":"<pre><code>duration = mr.calcDuration({type: 'delay', delay: 0.002}, {type: 'rf', delay: 0.001, shape_dur: 0.0005, ringdownTime: 0.0001});\nduration = mr.calcDuration(block); % where 'block' is a Pulseq block structure\n</code></pre>"},{"location":"matlab_api/calcMomentsBtensor/","title":"calcMomentsBtensor","text":"<p>Calculates the magnetic field (B) and its first three moments (m1, m2, m3) from a Pulseq sequence object.  The function processes gradient waveforms to compute these values, which are useful for characterizing the magnetic field variations in MRI experiments. It handles multiple repetitions (readouts) and allows for skipping initial dummy scans.</p>"},{"location":"matlab_api/calcMomentsBtensor/#syntax","title":"Syntax","text":"<pre><code>function [B, m1, m2, m3] = calcMomentsBtensor(obj, varargin)\n</code></pre>"},{"location":"matlab_api/calcMomentsBtensor/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.calcMomentsBtensor(...)\n</code></pre>"},{"location":"matlab_api/calcMomentsBtensor/#parameters","title":"Parameters","text":""},{"location":"matlab_api/calcMomentsBtensor/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> Pulseq sequence object A Pulseq sequence object containing the gradient waveforms and timing information. <code>mySequence</code>"},{"location":"matlab_api/calcMomentsBtensor/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>calcB</code> boolean <code>true</code> Flag to calculate the magnetic field B tensor. If false, B will not be computed and returned. Valid values: true, false <code>true</code> <code>calcm1</code> boolean <code>false</code> Flag to calculate the first moment (m1) of the magnetic field. If false, m1 will not be computed and returned. Valid values: true, false <code>true</code> <code>calcm2</code> boolean <code>false</code> Flag to calculate the second moment (m2) of the magnetic field. If false, m2 will not be computed and returned. Valid values: true, false <code>true</code> <code>calcm3</code> boolean <code>false</code> Flag to calculate the third moment (m3) of the magnetic field. If false, m3 will not be computed and returned. Valid values: true, false <code>true</code> <code>Ndummy</code> integer <code>0</code> The number of dummy scans (initial scans to skip) in the sequence. Valid values: 0, 1, 2, ... <code>2</code>"},{"location":"matlab_api/calcMomentsBtensor/#returns","title":"Returns","text":"Output Type Description <code>B</code> 3D array A 3D array representing the magnetic field tensor. Dimensions are [repetition, 3, 3].  Returned only if calcB is true. <code>m1</code> 2D array A 2D array representing the first moment of the magnetic field. Dimensions are [repetition, 3]. Returned only if calcm1 is true. <code>m2</code> 2D array A 2D array representing the second moment of the magnetic field. Dimensions are [repetition, 3]. Returned only if calcm2 is true. <code>m3</code> 2D array A 2D array representing the third moment of the magnetic field. Dimensions are [repetition, 3]. Returned only if calcm3 is true."},{"location":"matlab_api/calcMomentsBtensor/#examples","title":"Examples","text":"<pre><code>[B, m1, m2, m3] = seq.calcMomentsBtensor(mySeq, 'calcm1', true, 'Ndummy', 2);\n</code></pre>"},{"location":"matlab_api/calcPNS/","title":"calcPNS","text":"<p>Calculates peripheral nerve stimulation (PNS) levels using the safe model implementation by Szczepankiewicz and Witzel.  The function takes hardware specifications and gradient waveforms as input and returns normalized PNS levels for each axis.  It optionally plots the gradient waveforms and can calculate cardiac nerve stimulation (CNS) levels if the hardware data supports it.</p>"},{"location":"matlab_api/calcPNS/#syntax","title":"Syntax","text":"<pre><code>function [ok, pns_norm, pns_comp, t_axis]=calcPNS(obj,hardware,doPlots,calcCNS)\n</code></pre>"},{"location":"matlab_api/calcPNS/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.calcPNS(...)\n</code></pre>"},{"location":"matlab_api/calcPNS/#parameters","title":"Parameters","text":""},{"location":"matlab_api/calcPNS/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> struct Pulseq object containing gradient waveform data.  This object should have a <code>waveforms_and_times()</code> method that returns gradient waveforms and their corresponding times, and properties such as <code>gradRasterTime</code>, <code>sys</code>, and <code>gamma</code>. <code>A Pulseq object with gradient waveforms loaded</code> <code>hardware</code> string struct Hardware specifications.  Can be either a structure generated by <code>safe_example_hw()</code> from the <code>safe_pns_prediction</code> package or a path to a Siemens .asc file (e.g., MP_GPA_K2309_2250V_951A_AS82.asc) containing hardware parameters. <code>path/to/MP_GPA_K2309_2250V_951A_AS82.asc or safe_example_hw()</code>"},{"location":"matlab_api/calcPNS/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>doPlots</code> logical <code>true</code> Boolean flag to control whether to plot the gradient waveforms. Defaults to true. Valid values: true, false <code>false</code> <code>calcCNS</code> logical array <code>false</code> Boolean flag or array to control whether to calculate cardiac nerve stimulation (CNS) instead of or in addition to PNS. If the hardware data supports CNS and this parameter is not provided, it defaults to calculating both PNS and CNS. Defaults to false if CNS data is not available. Valid values: true, false, [false, true]"},{"location":"matlab_api/calcPNS/#returns","title":"Returns","text":"Output Type Description <code>ok</code> logical Logical indicating success or failure of the calculation <code>pns_norm</code> double Normalized PNS levels (normalized to 1, not 100%). Not explicitly defined in the excerpt but implied by the code <code>pns_comp</code> double PNS levels for each axis <code>t_axis</code> double Time axis for the PNS levels"},{"location":"matlab_api/calcPNS/#examples","title":"Examples","text":"<pre><code>[ok, pns_norm, pns_comp, t_axis] = seq.calcPNS(myPulseqObj, 'path/to/hardware.asc', false);\n</code></pre>"},{"location":"matlab_api/calcPNS/#see-also","title":"See Also","text":"<p>mr.Siemens.readasc</p>"},{"location":"matlab_api/calcRamp/","title":"calcRamp","text":"<p>Calculates a k-space trajectory connecting two given points (k0 and kend) while adhering to gradient and slew rate limits.  The function iteratively tries to find a solution with an increasing number of intermediate points until it finds a trajectory satisfying the constraints, or until a maximum number of points is reached. The resulting trajectory is not guaranteed to be the absolute shortest, but it's a reasonably short connection.</p>"},{"location":"matlab_api/calcRamp/#syntax","title":"Syntax","text":"<pre><code>function [kout, success] = calcRamp(k0,kend,varargin)\n</code></pre>"},{"location":"matlab_api/calcRamp/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.calcRamp(...)\n</code></pre>"},{"location":"matlab_api/calcRamp/#parameters","title":"Parameters","text":""},{"location":"matlab_api/calcRamp/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>k0</code> double Two preceding points in k-space.  Size is [3,2], representing the x, y, and z components of the two points. <code>[ [0;0;0], [1;1;1] ]</code> 1/m <code>kend</code> double Two following points in k-space. Size is [3,2], representing the x, y, and z components of the two points. <code>[ [2;2;2], [3;3;3] ]</code> 1/m"},{"location":"matlab_api/calcRamp/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> A structure containing system parameters. If empty, default system parameters are used.  Should contain fields like maxGrad and maxSlew. <code>mr.opts()</code> <code>MaxPoints</code> double <code>500</code> Maximum number of k-space points allowed in the connecting trajectory. Limits the computation time. Valid values: &gt;0 <code>1000</code> <code>maxGrad</code> double <code>0</code> Maximum gradient strength. Can be a scalar (total vector gradient) or a 3x1 vector (per-coordinate limits). If 0, the value from the 'system' parameter is used. (Units: Hz/m) <code>40e6</code> <code>maxSlew</code> double <code>0</code> Maximum slew rate. Can be a scalar (total vector slew rate) or a 3x1 vector (per-coordinate limits). If 0, the value from the 'system' parameter is used. (Units: Hz/(m*s)) <code>200e6</code> <code>gradOversampling</code> logical <code>false</code> If true, the gradient raster time is halved. Affects the gradient discretization. <code>true</code>"},{"location":"matlab_api/calcRamp/#returns","title":"Returns","text":"Output Type Description <code>kout</code> double Connecting k-space points (excluding k0 and kend). Size is [3, Nt], where Nt is the number of steps between k0 and kend. Units are 1/m. <code>success</code> logical A flag indicating whether a solution was found (1) or not (0)."},{"location":"matlab_api/calcRamp/#examples","title":"Examples","text":"<pre><code>[kout, success] = mr.calcRamp([ [0;0;0], [1;1;1] ], [ [2;2;2], [3;3;3] ], 'maxGrad', 40e6, 'maxSlew', 200e6)\n</code></pre>"},{"location":"matlab_api/calcRfBandwidth/","title":"calcRfBandwidth","text":"<p>Calculates the bandwidth of an RF pulse using a Fast Fourier Transform (FFT).  It assumes a low-angle approximation. The function returns the bandwidth, center frequency, and optionally the spectrum and frequency axis of the RF pulse.  It handles frequency offsets and resamples the pulse to a specified resolution before performing the FFT.</p>"},{"location":"matlab_api/calcRfBandwidth/#syntax","title":"Syntax","text":"<pre><code>function [bw,fc,spectrum,f,rfs,t]=calcRfBandwidth(rf, cutoff, df, dt)\n</code></pre>"},{"location":"matlab_api/calcRfBandwidth/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.calcRfBandwidth(...)\n</code></pre>"},{"location":"matlab_api/calcRfBandwidth/#parameters","title":"Parameters","text":""},{"location":"matlab_api/calcRfBandwidth/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>rf</code> struct Structure containing the RF pulse information.  This struct must include fields 't' (time vector), 'signal' (complex amplitude of the RF pulse), 'freqOffset' (frequency offset in Hz), 'freqPPM' (frequency offset in ppm), and 'phaseOffset' (phase offset in radians).  It also needs 'center', which represents a central point of the RF pulse used in resampling. <code>{t=[0:1e-6:1e-3]; signal=exp(-(t-0.5e-3).^2/2e-6); freqOffset=0; freqPPM=0; phaseOffset=0; center=0.5e-3;}</code>"},{"location":"matlab_api/calcRfBandwidth/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>cutoff</code> double <code>0.5</code> Fraction of the maximum amplitude used to define the bandwidth.  The bandwidth is determined by the points where the spectrum falls to this fraction of its maximum value. Valid values: [0, 1] <code>0.1</code> <code>df</code> double <code>10</code> Frequency resolution of the FFT (spectral resolution). (Units: Hz) <code>1</code> <code>dt</code> double <code>1e-6</code> Time resolution of the resampled RF pulse. (Units: seconds) <code>5e-7</code>"},{"location":"matlab_api/calcRfBandwidth/#returns","title":"Returns","text":"Output Type Description <code>bw</code> double Bandwidth of the RF pulse in Hz. <code>fc</code> double Center frequency of the RF pulse in Hz. <code>spectrum</code> double Complex spectrum of the RF pulse. <code>f</code> double Frequency axis corresponding to the spectrum. <code>rfs</code> double Resampled RF pulse signal. <code>t</code> double Time axis corresponding to the resampled RF pulse."},{"location":"matlab_api/calcRfBandwidth/#examples","title":"Examples","text":"<pre><code>  [bw, fc, spectrum, f, rfs, t] = mr.calcRfBandwidth(rf_pulse_struct, 0.2, 5, 1e-6);\n</code></pre>"},{"location":"matlab_api/calcRfBandwidth/#see-also","title":"See Also","text":"<p>mr.aux.findFlank</p>"},{"location":"matlab_api/calcRfCenter/","title":"calcRfCenter","text":"<p>Calculates the effective center time point of an RF pulse. For shaped pulses, it determines the time point corresponding to the peak RF amplitude.  For block pulses, it calculates the center of the pulse.  Zeropadding is included in the calculation, but the RF pulse's delay field is ignored.</p>"},{"location":"matlab_api/calcRfCenter/#syntax","title":"Syntax","text":"<pre><code>function [tc ic]=calcRfCenter(rf)\n</code></pre>"},{"location":"matlab_api/calcRfCenter/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.calcRfCenter(...)\n</code></pre>"},{"location":"matlab_api/calcRfCenter/#parameters","title":"Parameters","text":""},{"location":"matlab_api/calcRfCenter/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>rf</code> struct A structure representing the RF pulse.  It must contain at least the 'signal' field (containing the RF amplitude values) and the 't' field (containing the corresponding time points). It may also contain a 'center' field. <code>{signal: [0, 0.5, 1, 0.5, 0], t: [0, 1e-6, 2e-6, 3e-6, 4e-6]}</code>"},{"location":"matlab_api/calcRfCenter/#returns","title":"Returns","text":"Output Type Description <code>tc</code> double The time point (in seconds) of the calculated RF pulse center. <code>ic</code> double The index of the calculated RF pulse center within the rf.signal array."},{"location":"matlab_api/calcRfCenter/#examples","title":"Examples","text":"<pre><code>[tc, ic] = mr.calcRfCenter(rfPulse);\n</code></pre>"},{"location":"matlab_api/calcRfPower/","title":"calcRfPower","text":"<p>Calculates the relative power of an RF pulse.  It returns the relative energy of the pulse in units of Hz^2s (which simplifies to Hz), where the units represent RF amplitude squared multiplied by time.  The <code>mean_pwr</code> output is closely related to relative SAR.  The function also returns the peak power (in Hz^2) and the RMS B1 amplitude (in Hz).  The power and amplitude values are relative; to convert the RF amplitude to Tesla (T), divide by the gyromagnetic ratio (\u03b3).  Similarly, to convert the power to mT^2s, divide by \u03b3^2. Note that absolute SAR calculation requires additional coil and subject-dependent scaling factors.</p>"},{"location":"matlab_api/calcRfPower/#syntax","title":"Syntax","text":"<pre><code>function [mean_pwr, peak_pwr, rf_rms, total_energy]=calcRfPower(obj, varargin)\n</code></pre>"},{"location":"matlab_api/calcRfPower/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.calcRfPower(...)\n</code></pre>"},{"location":"matlab_api/calcRfPower/#parameters","title":"Parameters","text":""},{"location":"matlab_api/calcRfPower/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> struct Pulseq sequence object containing RF pulse information. <code>mySequence</code>"},{"location":"matlab_api/calcRfPower/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>blockRange</code> double <code>[1 inf]</code> Specifies the range of blocks in the sequence for which to calculate the power.  Defaults to the entire sequence. Valid values: A two-element numeric vector [start_block, end_block] <code>[10, 20]</code> <code>windowDuration</code> double <code>NaN</code> Specifies the time window for calculating total_energy, mean_pwr, and rf_rms. If provided, the function returns the maximum values over all time windows. The window duration is rounded up to a certain number of complete blocks. Valid values: A positive numeric scalar (Units: seconds) <code>0.005</code>"},{"location":"matlab_api/calcRfPower/#returns","title":"Returns","text":"Output Type Description <code>mean_pwr</code> double Mean power of the RF pulse (relative, in Hz). <code>peak_pwr</code> double Peak power of the RF pulse (relative, in Hz^2). <code>rf_rms</code> double RMS B1 amplitude of the RF pulse (relative, in Hz). <code>total_energy</code> double Total energy of the RF pulse (relative, in Hz)."},{"location":"matlab_api/calcRfPower/#examples","title":"Examples","text":"<pre><code>seq.calcRfPower(mySequence)\nseq.calcRfPower(mySequence, 'blockRange', [10, 20])\nseq.calcRfPower(mySequence, 'windowDuration', 0.01)\n</code></pre>"},{"location":"matlab_api/calcRfPower/#see-also","title":"See Also","text":"<p>mr.calcRfPower</p>"},{"location":"matlab_api/calculateKspacePP/","title":"calculateKspacePP","text":"<p>Calculates the k-space trajectory of a Pulseq sequence using a piecewise-polynomial gradient wave representation. This method is efficient for sequences with simple gradient shapes and long delays.  It considers optional parameters for compensating ADC and gradient timing mismatches and simulating background gradients.</p>"},{"location":"matlab_api/calculateKspacePP/#syntax","title":"Syntax","text":"<pre><code>function [ktraj_adc, t_adc, ktraj, t_ktraj, t_excitation, t_refocusing, slicepos, t_slicepos, gw_pp, pm_adc] = calculateKspacePP(obj, varargin)\n</code></pre>"},{"location":"matlab_api/calculateKspacePP/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.calculateKspacePP(...)\n</code></pre>"},{"location":"matlab_api/calculateKspacePP/#parameters","title":"Parameters","text":""},{"location":"matlab_api/calculateKspacePP/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> PulseqSequence object The Pulseq sequence object containing the gradient waveforms and timing information. <code>mySequenceObject</code>"},{"location":"matlab_api/calculateKspacePP/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>trajectory_delay</code> double <code>0</code> A compensation factor to align the ADC and gradient timings in k-space reconstruction.  Positive values delay the gradient relative to the ADC. Valid values: Any numeric value (Units: seconds) <code>0.000001</code> <code>gradient_offset</code> double <code>0</code> Simulates background gradients or helps verify spin-echo conditions by adding a constant offset to the gradient waveforms. Valid values: Any numeric value (Units: Hz/m) <code>10</code> <code>blockRange</code> double <code>[1 inf]</code> Specifies a range of blocks within the sequence to consider for k-space trajectory calculation. Valid values: A two-element numeric array [start_block end_block], where end_block can be Inf to include all blocks from start_block to the end of the sequence.  start_block must be &gt;=1 <code>[5,10]</code> <code>externalWaveformsAndTimes</code> struct <code>struct([])</code> Allows supplying external gradient waveforms and timing information instead of using those from the Pulseq sequence object.  The struct should contain fields 'gw_data', 'tfp_excitation', 'tfp_refocusing', and 't_adc'.  It may optionally include 'pm_adc'. Valid values: A struct with fields: gw_data (gradient waveforms), tfp_excitation (excitation pulse timings), tfp_refocusing (refocusing pulse timings), t_adc (ADC timings), optionally pm_adc (phase modulation for ADC). <code>{gw_data: myGradientData, tfp_excitation: myExcitationTimes, tfp_refocusing: myRefocusingTimes, t_adc: myADCtimes}</code>"},{"location":"matlab_api/calculateKspacePP/#returns","title":"Returns","text":"Output Type Description <code>ktraj_adc</code> double k-space trajectory corresponding to ADC sampling times. <code>t_adc</code> double Time points corresponding to ADC samples. <code>ktraj</code> double Complete k-space trajectory. <code>t_ktraj</code> double Time points corresponding to the complete k-space trajectory. <code>t_excitation</code> double Time points of excitation pulses. <code>t_refocusing</code> double Time points of refocusing pulses. <code>slicepos</code> double Slice position information. <code>t_slicepos</code> double Time points corresponding to slice positions. <code>gw_pp</code> double Piecewise polynomial representation of gradient waveforms (optional output). <code>pm_adc</code> double Phase modulation for ADC (optional output)."},{"location":"matlab_api/calculateKspacePP/#examples","title":"Examples","text":"<pre><code>[ktraj_adc, t_adc] = seq.calculateKspacePP(mySequence, 'trajectory_delay', 1e-6);\n</code></pre>"},{"location":"matlab_api/calculateKspacePP/#see-also","title":"See Also","text":"<p>waveforms_and_times</p>"},{"location":"matlab_api/checkTiming/","title":"checkTiming","text":"<p>This function checks the timing and other parameters of all blocks and objects within a Pulseq sequence.  It verifies consistency between stored block durations and calculated durations, ensures alignment with the blockDurationRaster, and checks for dead times in RF and ADC events. The function modifies the sequence object by adding a 'TotalDuration' field and returns a boolean indicating whether all checks passed, along with a detailed error report if any checks failed.</p>"},{"location":"matlab_api/checkTiming/#syntax","title":"Syntax","text":"<pre><code>function [is_ok, errorReport]=checkTiming(obj)\n</code></pre>"},{"location":"matlab_api/checkTiming/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.checkTiming(...)\n</code></pre>"},{"location":"matlab_api/checkTiming/#parameters","title":"Parameters","text":""},{"location":"matlab_api/checkTiming/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> struct The Pulseq sequence object whose timing needs to be checked. This object contains all information about the sequence, including RF pulses, gradients, ADC events, and delays. <code>mySequence</code>"},{"location":"matlab_api/checkTiming/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>trajectory_delay</code> double <code>0</code> Optional parameter that seems to be unused in the provided code excerpt.  It might be related to trajectory delays but its usage is not apparent here. Valid values: &gt;= 0 (Units: seconds) <code>0.001</code>"},{"location":"matlab_api/checkTiming/#returns","title":"Returns","text":"Output Type Description <code>is_ok</code> logical A boolean value indicating whether all timing checks passed (true) or not (false). <code>errorReport</code> cell A cell array of strings containing detailed error messages if any timing checks failed.  If all checks pass, this will be an empty cell array."},{"location":"matlab_api/checkTiming/#examples","title":"Examples","text":"<pre><code>[is_ok, errorReport] = seq.checkTiming(mySequence);\n</code></pre>"},{"location":"matlab_api/checkTiming/#see-also","title":"See Also","text":"<p>mr.checkTiming, Sequence.getBlock</p>"},{"location":"matlab_api/compressShape/","title":"compressShape","text":"<p>Compresses a gradient or pulse waveform using a run-length encoding scheme applied to its derivative.  This efficiently represents waveforms with constant or linearly changing segments using significantly fewer samples. The function returns a structure containing the compressed waveform and the original number of samples.</p>"},{"location":"matlab_api/compressShape/#syntax","title":"Syntax","text":"<pre><code>function s=compressShape(w, forceCompression)\n</code></pre>"},{"location":"matlab_api/compressShape/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.compressShape(...)\n</code></pre>"},{"location":"matlab_api/compressShape/#parameters","title":"Parameters","text":""},{"location":"matlab_api/compressShape/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>w</code> double The input waveform (gradient or pulse shape) to be compressed.  This is a vector of waveform amplitude values. <code>[1, 1, 1, 2, 2, 3, 3, 3, 3]</code>"},{"location":"matlab_api/compressShape/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>forceCompression</code> logical <code>false</code> A flag indicating whether to force compression even if the input waveform is short. If false, waveforms with 4 or fewer samples are returned uncompressed. Valid values: true, false <code>true</code>"},{"location":"matlab_api/compressShape/#returns","title":"Returns","text":"Output Type Description <code>s</code> struct A structure containing the compressed waveform data.  The structure has two fields: - <code>num_samples</code>: The number of samples in the original, uncompressed waveform. - <code>data</code>: A vector containing the compressed waveform data in a format suitable for Pulseq."},{"location":"matlab_api/compressShape/#examples","title":"Examples","text":"<pre><code>s = mr.compressShape([1 1 1 2 2 3 3 3 3]);\n% Compress a sample waveform\ns = mr.compressShape([1 2 3 4], true);\n</code></pre>"},{"location":"matlab_api/compressShape/#see-also","title":"See Also","text":"<p>decompressShape</p>"},{"location":"matlab_api/compressShape_mat/","title":"compressShape_mat","text":"<p>Compresses a gradient or pulse waveform using a run-length encoding scheme applied to its derivative.  This efficiently represents constant and linear segments of the waveform, reducing storage requirements. The function returns a structure containing the compressed waveform data and the number of samples in the original uncompressed waveform.</p>"},{"location":"matlab_api/compressShape_mat/#syntax","title":"Syntax","text":"<pre><code>function s=compressShape_mat(w, forceCompression)\n</code></pre>"},{"location":"matlab_api/compressShape_mat/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.compressShape_mat(...)\n</code></pre>"},{"location":"matlab_api/compressShape_mat/#parameters","title":"Parameters","text":""},{"location":"matlab_api/compressShape_mat/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>w</code> double The uncompressed waveform data (gradient or pulse shape).  This is a vector of amplitude values. <code>[1, 1, 1, 2, 2, 3, 3, 3, 2, 2, 1, 1]</code>"},{"location":"matlab_api/compressShape_mat/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>forceCompression</code> logical <code>false</code> A logical flag indicating whether to force compression even if it doesn't significantly reduce the waveform size.  If false, the function will only compress the waveform if a size reduction is achieved. Valid values: true or false <code>true</code>"},{"location":"matlab_api/compressShape_mat/#returns","title":"Returns","text":"Output Type Description <code>s</code> struct A structure containing the compressed waveform data.  It has two fields: - <code>num_samples</code>: The number of samples in the original uncompressed waveform <code>w</code>. - <code>data</code>: The compressed waveform data."},{"location":"matlab_api/compressShape_mat/#examples","title":"Examples","text":"<pre><code>s = mr.compressShape_mat([1, 1, 1, 2, 2, 3, 3, 3, 2, 2, 1, 1]);\ns = mr.compressShape_mat(myWaveform, true);\n</code></pre>"},{"location":"matlab_api/compressShape_mat/#see-also","title":"See Also","text":"<p>decompressShape</p>"},{"location":"matlab_api/conjugate/","title":"conjugate","text":"<p>This function computes the conjugate of a quaternion or a collection of quaternions.  A quaternion is represented as a 1x4 vector [real, i, j, k], where the first element is the real part and the remaining three elements represent the imaginary components. The function handles single quaternions (1x4 vectors) and collections of quaternions (Nx4 matrices).</p>"},{"location":"matlab_api/conjugate/#syntax","title":"Syntax","text":"<pre><code>function q = conjugate(q)\n</code></pre>"},{"location":"matlab_api/conjugate/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.aux.quat.conjugate(...)\n</code></pre>"},{"location":"matlab_api/conjugate/#parameters","title":"Parameters","text":""},{"location":"matlab_api/conjugate/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>q</code> double A single quaternion (1x4 vector) or a collection of quaternions (Nx4 matrix). <code>[1, 2, 3, 4]</code>"},{"location":"matlab_api/conjugate/#returns","title":"Returns","text":"Output Type Description <code>q</code> double The conjugate of the input quaternion or quaternions.  For a single quaternion, this is a 1x4 vector. For a collection of quaternions, this is an Nx4 matrix."},{"location":"matlab_api/conjugate/#examples","title":"Examples","text":"<pre><code>q_conj = mr.conjugate([1, 2, 3, 4]);\nq_conj_matrix = mr.conjugate([[1, 2, 3, 4]; [5, 6, 7, 8]]);\n</code></pre>"},{"location":"matlab_api/convert/","title":"convert","text":"<p>Converts numerical data between different units used in magnetic resonance imaging (MRI) gradient and RF pulse design.  It handles units for magnetic field strength (B1), gradient strength, and gradient slew rate.  The function utilizes a pre-defined set of valid units and converts the input data to a standard unit before converting it to the desired output unit. The gyromagnetic ratio (gamma) is used for conversions involving magnetic field strength.</p>"},{"location":"matlab_api/convert/#syntax","title":"Syntax","text":"<pre><code>function out=convert(in,varargin)\n</code></pre>"},{"location":"matlab_api/convert/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.convert(...)\n</code></pre>"},{"location":"matlab_api/convert/#parameters","title":"Parameters","text":""},{"location":"matlab_api/convert/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>in</code> double The numerical data to be converted. The units of this data are specified by the 'fromUnit' parameter. <code>1000</code> varies <code>fromUnit</code> char A string specifying the units of the input data 'in'. <code>'mT/m'</code>"},{"location":"matlab_api/convert/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>toUnit</code> char <code>[]</code> A string specifying the desired units for the output data. If omitted, a default unit is chosen based on 'fromUnit'. Valid values: 'Hz', 'T', 'mT', 'uT', 'Hz/m', 'mT/m', 'rad/ms/mm', 'Hz/m/s', 'mT/m/ms', 'T/m/s', 'rad/ms/mm/ms' <code>'Hz/m'</code> <code>gamma</code> double <code>42.576e6</code> The gyromagnetic ratio, used for conversions involving magnetic field strength. Defaults to 42.576 MHz/T (for protons). (Units: Hz/T) <code>42.577e6</code>"},{"location":"matlab_api/convert/#returns","title":"Returns","text":"Output Type Description <code>out</code> double The converted numerical data in the specified 'toUnit' units."},{"location":"matlab_api/convert/#examples","title":"Examples","text":"<pre><code>out = mr.convert(1000,'mT/m','Hz/m');\nout = mr.convert(500,'rad/ms/mm','mT/m');\nout = mr.convert(200,'Hz',[], 42.58e6);\n</code></pre>"},{"location":"matlab_api/decompressShape/","title":"decompressShape","text":"<p>Decompresses a gradient or pulse shape that has been compressed using a run-length encoding scheme on its derivative.  The input shape is a structure containing the compressed waveform and the number of samples in the uncompressed waveform. The function reconstructs the original waveform by iteratively expanding the run-length encoded segments.</p>"},{"location":"matlab_api/decompressShape/#syntax","title":"Syntax","text":"<pre><code>function w = decompressShape(shape, forceDecompression)\n</code></pre>"},{"location":"matlab_api/decompressShape/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.decompressShape(...)\n</code></pre>"},{"location":"matlab_api/decompressShape/#parameters","title":"Parameters","text":""},{"location":"matlab_api/decompressShape/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>shape</code> struct Structure containing the compressed waveform data.  Must have fields 'num_samples' (number of samples in the uncompressed waveform) and 'data' (the compressed waveform data). <code>{ 'num_samples': 1000, 'data': [1, 0, 2, 0, 0, 3, ... ] }</code>"},{"location":"matlab_api/decompressShape/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>forceDecompression</code> logical <code>false</code> If true, forces decompression even if the input shape appears to be already uncompressed (i.e., the number of samples matches the length of the compressed data). Valid values: true, false <code>true</code>"},{"location":"matlab_api/decompressShape/#returns","title":"Returns","text":"Output Type Description <code>w</code> double A vector containing the decompressed waveform."},{"location":"matlab_api/decompressShape/#examples","title":"Examples","text":"<pre><code>w = mr.decompressShape(shape);\nw = mr.decompressShape(shape, true);\n</code></pre>"},{"location":"matlab_api/decompressShape/#see-also","title":"See Also","text":"<p>compressShape</p>"},{"location":"matlab_api/duration/","title":"duration","text":"<p>Calculates the total duration of a Pulseq sequence and optionally returns the number of blocks and a count of events within each block.</p>"},{"location":"matlab_api/duration/#syntax","title":"Syntax","text":"<pre><code>function [duration, numBlocks, eventCount]=duration(obj)\n</code></pre>"},{"location":"matlab_api/duration/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.duration(...)\n</code></pre>"},{"location":"matlab_api/duration/#parameters","title":"Parameters","text":""},{"location":"matlab_api/duration/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> struct A Pulseq sequence object containing block events and durations.  This object must contain fields 'blockEvents' (a cell array of event vectors) and 'blockDurations' (a vector of durations for each block). <code>mySequenceObject</code>"},{"location":"matlab_api/duration/#returns","title":"Returns","text":"Output Type Description <code>duration</code> double The total duration of the sequence in seconds. <code>numBlocks</code> double The number of blocks in the sequence. <code>eventCount</code> double A vector representing the count of events (where an event is considered to be greater than 0 in the blockEvents) in each block. Only returned if requested (nargout &gt; 2)."},{"location":"matlab_api/duration/#examples","title":"Examples","text":"<pre><code>[totalDuration, numberOfBlocks] = seq.duration(mySequence);\n</code></pre>"},{"location":"matlab_api/duration/#see-also","title":"See Also","text":"<p>checkTiming</p>"},{"location":"matlab_api/evalLabels/","title":"evalLabels","text":"<p>This function evaluates the values of labels used within a Pulseq sequence. It can calculate the final label values at the end of the sequence or track their evolution across specified blocks.  It supports initializing label values and selectively evaluating labels based on the presence of ADCs or label manipulations.</p>"},{"location":"matlab_api/evalLabels/#syntax","title":"Syntax","text":"<pre><code>function labels = evalLabels(obj, varargin)\n</code></pre>"},{"location":"matlab_api/evalLabels/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.evalLabels(...)\n</code></pre>"},{"location":"matlab_api/evalLabels/#parameters","title":"Parameters","text":""},{"location":"matlab_api/evalLabels/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> object A Pulseq sequence object containing blocks and label definitions. <code>seqObj</code>"},{"location":"matlab_api/evalLabels/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>blockRange</code> double <code>[1 inf]</code> Specifies the range of blocks to evaluate labels for.  The default evaluates all blocks. Valid values: A two-element numeric vector [first last], where 'first' and 'last' are the indices of the starting and ending blocks respectively. 'inf' can be used for the last element to denote the last block. <code>[5 10]</code> <code>init</code> struct <code>struct([])</code> Provides initial values for labels. Useful for evaluating labels block-by-block, where results from the previous block are used as inputs for the next. <code>struct('label1',10, 'label2',0)</code> <code>evolution</code> char <code>'none'</code> Specifies the level of detail for the label evolution output. Valid values: 'none', 'adc', 'label', 'blocks' <code>'blocks'</code>"},{"location":"matlab_api/evalLabels/#returns","title":"Returns","text":"Output Type Description <code>labels</code> struct A structure containing the evaluated label values. Field names correspond to the label names used in the sequence."},{"location":"matlab_api/evalLabels/#examples","title":"Examples","text":"<pre><code>labels = seq.evalLabels(seqObj);\nlabels = seq.evalLabels(seqObj, 'blockRange', [10 20], 'evolution', 'adc');\nlabels = seq.evalLabels(seqObj, 'init', struct('phase', pi/2));\n</code></pre>"},{"location":"matlab_api/evalLabels/#see-also","title":"See Also","text":"<p>getBlock</p>"},{"location":"matlab_api/findBlockByTime/","title":"findBlockByTime","text":"<p>This helper function finds the index of the block in a Pulseq sequence that contains a given time point.  It takes a sequence object and a time value as input and returns the index of the block that encompasses that time. The function iterates through the cumulative sum of block durations until it finds the block containing the specified time.  It handles cases where the time is beyond the sequence duration by returning an empty array.</p>"},{"location":"matlab_api/findBlockByTime/#syntax","title":"Syntax","text":"<pre><code>function iB=findBlockByTime(obj,t)\n</code></pre>"},{"location":"matlab_api/findBlockByTime/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.findBlockByTime(...)\n</code></pre>"},{"location":"matlab_api/findBlockByTime/#parameters","title":"Parameters","text":""},{"location":"matlab_api/findBlockByTime/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> struct A Pulseq sequence object containing block durations.  This object is expected to have a field named 'blockDurations' which is a vector of durations for each block in the sequence. <code>mySequence</code> <code>t</code> double The time point (in seconds) to search for within the sequence blocks. <code>0.015</code> seconds"},{"location":"matlab_api/findBlockByTime/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>trajectory_delay</code> double <code>0</code> This parameter appears in the original code but is not used in the provided excerpt.  It's likely intended to account for delays in trajectory calculation but is unused in this version of the function. (Units: seconds) <code>0.001</code>"},{"location":"matlab_api/findBlockByTime/#returns","title":"Returns","text":"Output Type Description <code>iB</code> double The index of the block in the sequence object (obj.blockDurations) that contains the specified time point 't'. Returns an empty array if 't' is beyond the sequence duration."},{"location":"matlab_api/findBlockByTime/#examples","title":"Examples","text":"<pre><code>iB = seq.findBlockByTime(mySequence, 0.010);\n</code></pre>"},{"location":"matlab_api/findBlockByTime/#see-also","title":"See Also","text":"<p>Sequence</p>"},{"location":"matlab_api/findFlank/","title":"findFlank","text":"<p>This function finds the x-coordinate of the left flank of a given function f. It determines the first x value where the absolute value of f exceeds a specified fraction (c) of the maximum absolute value of f.  Linear interpolation is used if the identified point is not the first element in the x vector.</p>"},{"location":"matlab_api/findFlank/#syntax","title":"Syntax","text":"<pre><code>function xf=findFlank(x,f,c)\n</code></pre>"},{"location":"matlab_api/findFlank/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.aux.findFlank(...)\n</code></pre>"},{"location":"matlab_api/findFlank/#parameters","title":"Parameters","text":""},{"location":"matlab_api/findFlank/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>x</code> double A vector of x-coordinates corresponding to the function values in f. <code>[0:0.01:1]</code> <code>f</code> double A vector of function values corresponding to the x-coordinates in x. <code>sin(2*pi*x)</code> <code>c</code> double A scaling factor (0 &lt; c &lt; 1) that determines the threshold for identifying the flank. The threshold is c * max(abs(f)). <code>0.1</code>"},{"location":"matlab_api/findFlank/#returns","title":"Returns","text":"Output Type Description <code>xf</code> double The x-coordinate of the left flank of the function f. This is the first x value where abs(f) &gt; c * max(abs(f)). Linear interpolation is used to refine the result if necessary."},{"location":"matlab_api/findFlank/#examples","title":"Examples","text":"<pre><code>xf = mr.findFlank([0:0.01:1], sin(2*pi*[0:0.01:1]), 0.5);\n</code></pre>"},{"location":"matlab_api/flipGradAxis/","title":"flipGradAxis","text":"<p>This helper function inverts all gradients along a specified axis or channel within a Pulseq sequence object.  It modifies existing gradient objects that have already been added to the sequence.</p>"},{"location":"matlab_api/flipGradAxis/#syntax","title":"Syntax","text":"<pre><code>function flipGradAxis(obj, axis)\n</code></pre>"},{"location":"matlab_api/flipGradAxis/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.flipGradAxis(...)\n</code></pre>"},{"location":"matlab_api/flipGradAxis/#parameters","title":"Parameters","text":""},{"location":"matlab_api/flipGradAxis/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> struct The Pulseq sequence object containing the gradients to be inverted. <code>seq</code> <code>axis</code> char The axis along which to invert the gradients ('x', 'y', or 'z'). <code>'x'</code>"},{"location":"matlab_api/flipGradAxis/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>trajectory_delay</code> double <code>0</code> This parameter is not used in the provided code snippet. It's likely an optional parameter intended for other functionality within the larger <code>Sequence</code> class. Valid values: &gt;= 0 (Units: seconds) <code>0.001</code>"},{"location":"matlab_api/flipGradAxis/#returns","title":"Returns","text":"Output Type Description <code>None</code> None This function modifies the sequence object in place and does not return any values."},{"location":"matlab_api/flipGradAxis/#examples","title":"Examples","text":"<pre><code>seq.flipGradAxis(seq, 'x');\n</code></pre>"},{"location":"matlab_api/flipGradAxis/#see-also","title":"See Also","text":"<p>modGradAxis</p>"},{"location":"matlab_api/fromRotMat/","title":"fromRotMat","text":"<p>This function converts a 3x3 rotation matrix into a normalized quaternion.  It handles potential rounding errors and cases where the rotation matrix might be close to a zero or identity matrix.</p>"},{"location":"matlab_api/fromRotMat/#syntax","title":"Syntax","text":"<pre><code>function q = fromRotMat(R)\n</code></pre>"},{"location":"matlab_api/fromRotMat/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.aux.quat.fromRotMat(...)\n</code></pre>"},{"location":"matlab_api/fromRotMat/#parameters","title":"Parameters","text":""},{"location":"matlab_api/fromRotMat/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>R</code> double A 3x3 rotation matrix. <code>[1 0 0; 0 1 0; 0 0 1]</code>"},{"location":"matlab_api/fromRotMat/#returns","title":"Returns","text":"Output Type Description <code>q</code> double A 4-element normalized quaternion representing the rotation. The order is [qs, qx, qy, qz]."},{"location":"matlab_api/fromRotMat/#examples","title":"Examples","text":"<pre><code>q = mr.fromRotMat([1 0 0; 0 1 0; 0 0 1]);\n</code></pre>"},{"location":"matlab_api/fromRotMat/#see-also","title":"See Also","text":"<p>mr.aux.quat.normalize</p>"},{"location":"matlab_api/gauss/","title":"gauss","text":"<p>This function calculates the Gaussian function, defined as exp(-pi*x^2). It serves as a convenient alternative for users who do not have access to the signal processing toolbox.</p>"},{"location":"matlab_api/gauss/#syntax","title":"Syntax","text":"<pre><code>function y = gauss(x)\n</code></pre>"},{"location":"matlab_api/gauss/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.gauss(...)\n</code></pre>"},{"location":"matlab_api/gauss/#parameters","title":"Parameters","text":""},{"location":"matlab_api/gauss/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>x</code> double The input value(s) at which to evaluate the Gaussian function.  Can be a scalar, vector, or matrix. <code>0</code>"},{"location":"matlab_api/gauss/#returns","title":"Returns","text":"Output Type Description <code>y</code> double The result of the Gaussian function evaluation at the input value(s) x.  Will be of the same size and shape as x."},{"location":"matlab_api/gauss/#examples","title":"Examples","text":"<pre><code>y = mr.gauss(0); % Returns 1\ny = mr.gauss([-1 0 1]); % Returns [0.1353 1 0.1353]\ny = mr.gauss(linspace(-2,2,100)); % Returns a vector of Gaussian values\n</code></pre>"},{"location":"matlab_api/gauss/#see-also","title":"See Also","text":"<p>makeGaussPulse</p>"},{"location":"matlab_api/getBlock/","title":"getBlock","text":"<p>Retrieves a specific block from a Pulseq sequence object.  The function decompresses all events and shapes within the requested block and returns it as a structure. It also handles the extraction and unpacking of optional extensions like triggers and labels associated with the block.</p>"},{"location":"matlab_api/getBlock/#syntax","title":"Syntax","text":"<pre><code>function block = getBlock(obj, index, addIDs)\n</code></pre>"},{"location":"matlab_api/getBlock/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.getBlock(...)\n</code></pre>"},{"location":"matlab_api/getBlock/#parameters","title":"Parameters","text":""},{"location":"matlab_api/getBlock/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> struct A Pulseq sequence object containing the sequence data. <code>Sequence()</code> <code>index</code> double The index (integer) of the block to retrieve (1-based indexing). <code>1</code> <code>addIDs</code> logical A boolean flag indicating whether to include IDs for triggers and labels in the returned block structure. If true, the 'id' field will be added to trigger and label data. <code>true</code>"},{"location":"matlab_api/getBlock/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>trajectory_delay</code> double <code>0</code> This parameter is not explicitly used in the provided code excerpt, and its purpose is unclear from this context. It might be related to a feature not shown in the provided code snippet. Valid values: Non-negative scalar (Units: seconds) <code>0.001</code>"},{"location":"matlab_api/getBlock/#returns","title":"Returns","text":"Output Type Description <code>block</code> struct A structure containing the block's data.  This includes fields such as 'blockDuration', 'rf', 'gx', 'gy', 'gz', 'adc', and potentially 'trig' (for triggers) and other fields related to labels and other extensions if present in the raw block data."},{"location":"matlab_api/getBlock/#examples","title":"Examples","text":"<pre><code>block = seq.getBlock(mySequence, 2, true);\nblock = seq.getBlock(mySequence, 5);\n</code></pre>"},{"location":"matlab_api/getBlock/#see-also","title":"See Also","text":"<p>setBlock, addBlock</p>"},{"location":"matlab_api/getDefinition/","title":"getDefinition","text":"<p>Retrieves the value associated with a specified key from a custom definitions structure within a Pulseq sequence object.  This function allows access to user-defined parameters stored in the sequence object.</p>"},{"location":"matlab_api/getDefinition/#syntax","title":"Syntax","text":"<pre><code>function value=getDefinition(obj,key)\n</code></pre>"},{"location":"matlab_api/getDefinition/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.getDefinition(...)\n</code></pre>"},{"location":"matlab_api/getDefinition/#parameters","title":"Parameters","text":""},{"location":"matlab_api/getDefinition/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> struct The Pulseq sequence object containing the definitions. <code>seqObj</code> <code>key</code> char The key string identifying the desired definition. <code>'FOV'</code>"},{"location":"matlab_api/getDefinition/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>trajectory_delay</code> double <code>0</code> This parameter is not used in the provided code snippet. Valid values: any non-negative number (Units: seconds) <code>0.001</code>"},{"location":"matlab_api/getDefinition/#returns","title":"Returns","text":"Output Type Description <code>value</code> any The value associated with the specified key. Returns an empty array if the key is not found."},{"location":"matlab_api/getDefinition/#examples","title":"Examples","text":"<pre><code>value = seq.getDefinition(seqObj, 'FOV');\nmyValue = seq.getDefinition(mySequence, 'myCustomParam');\n</code></pre>"},{"location":"matlab_api/getDefinition/#see-also","title":"See Also","text":"<p>setDefinition</p>"},{"location":"matlab_api/getSupportedLabels/","title":"getSupportedLabels","text":"<p>This function returns a cell array of strings representing supported labels for Pulseq sequence parameters.  These labels are used to map sequence parameters to specific fields in the scanner's data handling system (MDH), particularly for Siemens scanners.  The labels cover various aspects of pulse sequence design, including repetition, averaging, phase cycling, parallel imaging, motion correction, and execution control.</p>"},{"location":"matlab_api/getSupportedLabels/#syntax","title":"Syntax","text":"<pre><code>function supported_labels = getSupportedLabels()\n</code></pre>"},{"location":"matlab_api/getSupportedLabels/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.getSupportedLabels(...)\n</code></pre>"},{"location":"matlab_api/getSupportedLabels/#parameters","title":"Parameters","text":"<p>No parameters</p>"},{"location":"matlab_api/getSupportedLabels/#returns","title":"Returns","text":"Output Type Description <code>supported_labels</code> cell A cell array of strings containing the supported labels.  Each string represents a specific label used in Pulseq sequence design and mapping to scanner parameters."},{"location":"matlab_api/getSupportedLabels/#examples","title":"Examples","text":"<pre><code>supportedLabels = mr.getSupportedLabels();\n</code></pre>"},{"location":"matlab_api/getSupportedRfUse/","title":"getSupportedRfUse","text":"<p>This function returns a cell array containing strings representing the supported RF pulse uses in Pulseq, and optionally a corresponding array of single-character abbreviations.</p>"},{"location":"matlab_api/getSupportedRfUse/#syntax","title":"Syntax","text":"<pre><code>function [supported_rf_use, short_rf_use] = getSupportedRfUse()\n</code></pre>"},{"location":"matlab_api/getSupportedRfUse/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.getSupportedRfUse(...)\n</code></pre>"},{"location":"matlab_api/getSupportedRfUse/#parameters","title":"Parameters","text":"<p>No parameters</p>"},{"location":"matlab_api/getSupportedRfUse/#returns","title":"Returns","text":"Output Type Description <code>supported_rf_use</code> cell A cell array of strings representing the supported RF pulse uses.  The strings are: 'excitation', 'refocusing', 'inversion', 'saturation', 'preparation', 'other', 'undefined'. <code>short_rf_use</code> char An array of single characters representing abbreviated forms of the supported RF pulse uses. This is only returned if a second output argument is requested.  It contains the first letter of each string in <code>supported_rf_use</code>."},{"location":"matlab_api/getSupportedRfUse/#examples","title":"Examples","text":"<pre><code>[supportedUses] = mr.getSupportedRfUse();\n[supportedUses, shortUses] = mr.getSupportedRfUse();\n</code></pre>"},{"location":"matlab_api/init/","title":"init","text":"<p>mrMusic.init : create frequency and note variables creates global Matlab variables named after notes and octaves, for example c1, e2, etc; five octaves are created. The middle C is c1, the higher octaves are nubered 2 and 3; left of the first octave is a small (suffix b) andd further left is bid (suffix bb). Sufixes 'is' and 'es' are added for 'sharp' and 'flat', respectively, eg. cis1, mes2, etc. The symbol 'o' is a delay. These variables are then used to create a melody in a humal-like notation. The melody is created bar-by-bar for the three voices corresponding to the three gradient channels, with the duration specified by dividing the desired note by a number, e.g. a1/16 is middle A with the duration of 1/16.</p> <p>Internally this syntax is achieved by defining the note variables as complex numbers, where the complex part encodes the duration and the ratio of the real to the complex parts the pitch.</p> <p>It is possible to create non-standard tuning by setting the global Matlab variable 'a_init' to a custom value (other than 440 Hz) prior to calling this script for avoiding mechanicaal resonances for specific scanners</p>"},{"location":"matlab_api/init/#syntax","title":"Syntax","text":"<pre><code>function init(varargin)\n</code></pre>"},{"location":"matlab_api/init/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.init(...)\n</code></pre>"},{"location":"matlab_api/init/#parameters","title":"Parameters","text":"<p>No parameters</p>"},{"location":"matlab_api/install/","title":"install","text":"<p>Installs a Pulseq sequence onto a Siemens MRI system.  The function detects the scanner environment (Numaris4 or NumarisX) or allows the user to specify it. It copies the sequence files to the appropriate location on the system, creating necessary subdirectories as needed. The sequence is installed as an 'external.seq' file.</p>"},{"location":"matlab_api/install/#syntax","title":"Syntax","text":"<pre><code>function ok=install(seq,param1,param2)\n</code></pre>"},{"location":"matlab_api/install/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.install(...)\n</code></pre>"},{"location":"matlab_api/install/#parameters","title":"Parameters","text":""},{"location":"matlab_api/install/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>seq</code> struct The Pulseq sequence object to be installed. <code>mr.Sequence()</code> <code>param1</code> string Specifies the installation destination or method. Can be 'siemens', 'siemensNX', or a file path/name. <code>'siemens'</code> <code>param2</code> string Optional parameter; specifies the file path and name when installing to a Siemens system (used with 'siemens' or 'siemensNX' as param1). <code>'path/to/my/sequence.seq'</code>"},{"location":"matlab_api/install/#returns","title":"Returns","text":"Output Type Description <code>ok</code> logical A boolean value indicating success (true) or failure (false) of the installation."},{"location":"matlab_api/install/#examples","title":"Examples","text":"<pre><code>seq.install(seq)\nseq.install(seq, 'mySequence.seq')\nseq.install(seq, 'siemens', 'path/to/my/sequence')\nseq.install(seq, 'siemensNX', 'mySequence')\n</code></pre>"},{"location":"matlab_api/install/#see-also","title":"See Also","text":"<p>Sequence.write</p>"},{"location":"matlab_api/isOctave/","title":"isOctave","text":"<p>This function checks if the code is running within the Octave environment. It uses a persistent variable to store the result of the check, avoiding repeated calls to the <code>exist</code> function.</p>"},{"location":"matlab_api/isOctave/#syntax","title":"Syntax","text":"<pre><code>function OUT = isOctave ()\n</code></pre>"},{"location":"matlab_api/isOctave/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.aux.isOctave(...)\n</code></pre>"},{"location":"matlab_api/isOctave/#parameters","title":"Parameters","text":"<p>No parameters</p>"},{"location":"matlab_api/isOctave/#returns","title":"Returns","text":"Output Type Description <code>OUT</code> double A logical value (1 or 0) indicating whether the code is running in Octave (1 for Octave, 0 for MATLAB)."},{"location":"matlab_api/isOctave/#examples","title":"Examples","text":"<pre><code>mr.isOctave()\n</code></pre>"},{"location":"matlab_api/makeAdc/","title":"makeAdc","text":"<p>Creates an ADC readout event for Pulseq sequence design.  It defines parameters for the analog-to-digital conversion process, including the number of samples, dwell time, duration, delay, and frequency and phase offsets.  It can account for system-specific dead times.</p>"},{"location":"matlab_api/makeAdc/#syntax","title":"Syntax","text":"<pre><code>function adc=makeAdc(num,varargin)\n</code></pre>"},{"location":"matlab_api/makeAdc/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeAdc(...)\n</code></pre>"},{"location":"matlab_api/makeAdc/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeAdc/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>num</code> double The number of samples to be acquired by the ADC. <code>1024</code>"},{"location":"matlab_api/makeAdc/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> A structure containing system parameters.  If not provided, default system parameters are used.  Should contain the field <code>adcDeadTime</code> (in seconds). <code>mr.opts()</code> <code>dwell</code> double <code>0</code> The dwell time (sampling interval) in seconds.  Must be specified if <code>duration</code> is not. Valid values: dwell &gt; 0 (Units: seconds) <code>0.000004</code> <code>duration</code> double <code>0</code> The total duration of the ADC readout in seconds. Must be specified if <code>dwell</code> is not. Valid values: duration &gt; 0 (Units: seconds) <code>0.004</code> <code>delay</code> double <code>0</code> The delay before the ADC readout begins in seconds. (Units: seconds) <code>0.001</code> <code>freqOffset</code> double <code>0</code> Frequency offset of the ADC readout in Hz. (Units: Hz) <code>100</code> <code>phaseOffset</code> double <code>0</code> Phase offset of the ADC readout in radians. (Units: radians) <code>pi/2</code> <code>freqPPM</code> double <code>0</code> Frequency offset in parts per million (ppm). (Units: ppm) <code>10</code> <code>phasePPM</code> double <code>0</code> Phase offset in parts per million (ppm). (Units: ppm) <code>5</code> <code>phaseModulation</code> double <code>[]</code> A vector of phase modulation values for each sample in radians. Must be the same length as <code>num</code>. (Units: radians) <code>[0, pi/4, pi/2, 3*pi/4, pi]</code>"},{"location":"matlab_api/makeAdc/#returns","title":"Returns","text":"Output Type Description <code>adc</code> struct A structure containing the ADC readout parameters.  Fields include: <code>type</code>, <code>numSamples</code>, <code>dwell</code>, <code>delay</code>, <code>freqOffset</code>, <code>phaseOffset</code>, <code>freqPPM</code>, <code>phasePPM</code>, <code>deadTime</code>, <code>duration</code>, and <code>phaseModulation</code>."},{"location":"matlab_api/makeAdc/#examples","title":"Examples","text":"<pre><code>adc = mr.makeAdc(1024, 'dwell', 0.000004);\nadc = mr.makeAdc(2048, 'duration', 0.008);\nadc = mr.makeAdc(1024, mr.opts(), 'delay', 0.001, 'phaseModulation', linspace(0, 2*pi, 1024));\n</code></pre>"},{"location":"matlab_api/makeAdc/#see-also","title":"See Also","text":"<p>Sequence.addBlock</p>"},{"location":"matlab_api/makeAdiabaticPulse/","title":"makeAdiabaticPulse","text":"<p>Generates adiabatic inversion pulses of type 'hypsec' (hyperbolic secant) or 'wurst' (wideband, uniform rate, smooth truncation).  It acts as a wrapper for a Python function (requiring the 'sigpy' library), creating RF and gradient waveforms. Note that this function is likely to only work on Linux systems.</p>"},{"location":"matlab_api/makeAdiabaticPulse/#syntax","title":"Syntax","text":"<pre><code>function [rf, gz, gzr, delay] = makeAdiabaticPulse(type,varargin)\n</code></pre>"},{"location":"matlab_api/makeAdiabaticPulse/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeAdiabaticPulse(...)\n</code></pre>"},{"location":"matlab_api/makeAdiabaticPulse/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeAdiabaticPulse/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>type</code> string Specifies the type of adiabatic pulse to generate.  Must be either 'hypsec' or 'wurst'. <code>'hypsec'</code>"},{"location":"matlab_api/makeAdiabaticPulse/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> System parameters (e.g., from mr.opts()).  Provides system limits for gradient waveforms (if maxGrad and maxSlew are not specified). <code>mr.opts()</code> <code>duration</code> double <code>10e-3</code> Total duration of the pulse. (Units: seconds) <code>0.01</code> <code>freqOffset</code> double <code>0</code> Frequency offset of the pulse. (Units: Hz) <code>100</code> <code>phaseOffset</code> double <code>0</code> Phase offset of the pulse. (Units: radians) <code>pi/2</code> <code>freqPPM</code> double <code>0</code> Frequency offset in parts per million. (Units: ppm) <code>0.1</code> <code>phasePPM</code> double <code>0</code> Phase offset in parts per million. (Units: ppm) <code>0.1</code> <code>beta</code> double <code>800</code> AM waveform parameter (relevant for 'hypsec' pulse). <code>1000</code> <code>mu</code> double <code>4.9</code> Constant determining the amplitude of the frequency sweep (relevant for 'hypsec' pulse). <code>5.0</code> <code>n_fac</code> double <code>40</code> Power to exponentiate within the AM term (relevant for 'wurst' pulse). <code>30</code> <code>bandwidth</code> double <code>40000</code> Pulse bandwidth (relevant for 'wurst' pulse). (Units: Hz) <code>20000</code> <code>adiabaticity</code> double <code>4</code> Adiabaticity factor. <code>5</code> <code>maxGrad</code> double <code>0</code> Maximum gradient amplitude. (Units: Hz/m) <code>1000</code> <code>maxSlew</code> double <code>0</code> Maximum gradient slew rate. (Units: Hz/m/s) <code>100000</code> <code>sliceThickness</code> double <code>0</code> Slice thickness. (Units: meters) <code>0.005</code> <code>delay</code> double <code>0</code> Delay after the pulse. (Units: seconds) <code>0.001</code> <code>dwell</code> double <code>0</code> Dwell time. (Units: seconds) <code>1e-6</code> <code>use</code> string <code>'u'</code> Specifies how the pulse will be used.  See mr.getSupportedRfUse() for options. <code>'excitation'</code> <code>pythonCmd</code> string <code>''</code> Command to execute the Python function (for advanced use cases). <code>''</code>"},{"location":"matlab_api/makeAdiabaticPulse/#returns","title":"Returns","text":"Output Type Description <code>rf</code> struct Pulseq RF waveform structure. <code>gz</code> struct Pulseq slice-select gradient waveform structure. <code>gzr</code> struct Pulseq refocusing gradient waveform structure (if applicable). <code>delay</code> double Delay time (seconds)."},{"location":"matlab_api/makeAdiabaticPulse/#examples","title":"Examples","text":"<pre><code>[rf, gz, gzr, delay] = mr.makeAdiabaticPulse('hypsec', 'duration', 0.01, 'beta', 1000, 'mu', 5);\n[rf, gz, gzr, delay] = mr.makeAdiabaticPulse('wurst', 'duration', 0.005, 'bandwidth', 20000, 'n_fac', 30);\n</code></pre>"},{"location":"matlab_api/makeAdiabaticPulse/#see-also","title":"See Also","text":"<p>mr.opts, mr.makeExtendedTrapezoid, mr.getSupportedRfUse</p>"},{"location":"matlab_api/makeArbitraryGrad/","title":"makeArbitraryGrad","text":"<p>Creates a gradient event with an arbitrary waveform.  The function ensures the waveform adheres to the specified gradient hardware constraints (maximum slew rate and amplitude). It allows for oversampling and extrapolation to handle waveform edges.</p>"},{"location":"matlab_api/makeArbitraryGrad/#syntax","title":"Syntax","text":"<pre><code>function grad=makeArbitraryGrad(channel,varargin)\n</code></pre>"},{"location":"matlab_api/makeArbitraryGrad/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeArbitraryGrad(...)\n</code></pre>"},{"location":"matlab_api/makeArbitraryGrad/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeArbitraryGrad/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>channel</code> char The gradient channel ('x', 'y', or 'z') for the waveform. <code>'x'</code> <code>waveform</code> double A vector representing the desired gradient waveform amplitude at each time point. <code>[0.1, 0.2, 0.3, 0.2, 0.1]</code> Hz/m"},{"location":"matlab_api/makeArbitraryGrad/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> A structure containing system parameters (e.g., maxSlew, maxGrad, gradRasterTime). If empty, defaults to mr.opts(). <code>mr.opts()</code> <code>oversampling</code> logical <code>false</code> Specifies whether oversampling is used. If true, the waveform is sampled at twice the resolution. <code>true</code> <code>maxGrad</code> double <code>0</code> The maximum allowed gradient amplitude. If 0, the system's maxGrad is used. (Units: Hz/m) <code>1000</code> <code>maxSlew</code> double <code>0</code> The maximum allowed gradient slew rate. If 0, the system's maxSlew is used. (Units: Hz/m/s) <code>100000</code> <code>delay</code> double <code>0</code> Delay before the gradient waveform starts. (Units: seconds) <code>0.001</code> <code>first</code> double <code>NaN</code> The gradient amplitude at the very beginning (before the first sample in 'waveform'). If NaN, it's extrapolated. (Units: Hz/m) <code>0</code> <code>last</code> double <code>NaN</code> The gradient amplitude at the very end (after the last sample in 'waveform'). If NaN, it's extrapolated. (Units: Hz/m) <code>0</code>"},{"location":"matlab_api/makeArbitraryGrad/#returns","title":"Returns","text":"Output Type Description <code>grad</code> struct A structure containing the gradient event details: type, channel, waveform, delay, area, and tt (time points)."},{"location":"matlab_api/makeArbitraryGrad/#examples","title":"Examples","text":"<pre><code>g = mr.makeArbitraryGrad('x', [0 1 0], 'maxGrad', 2000, 'maxSlew', 200000);\ng = mr.makeArbitraryGrad('y', [0:0.1:1 1:-0.1:0], mr.opts(), true);\n</code></pre>"},{"location":"matlab_api/makeArbitraryGrad/#see-also","title":"See Also","text":"<p>Sequence.addBlock, mr.opts</p>"},{"location":"matlab_api/makeArbitraryRf/","title":"makeArbitraryRf","text":"<p>Creates an arbitrary RF pulse with a specified shape and parameters.  The function takes a complex signal representing the desired pulse shape and calculates the corresponding RF pulse parameters, including frequency and phase offsets, and optionally generates a slice-selective gradient.</p>"},{"location":"matlab_api/makeArbitraryRf/#syntax","title":"Syntax","text":"<pre><code>function [rf, gz, gzr, delay] = makeArbitraryRf(signal,flip,varargin)\n</code></pre>"},{"location":"matlab_api/makeArbitraryRf/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeArbitraryRf(...)\n</code></pre>"},{"location":"matlab_api/makeArbitraryRf/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeArbitraryRf/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>signal</code> double A complex-valued vector representing the desired RF pulse shape.  The amplitude of each element corresponds to the RF amplitude at a specific time point. The length of the vector determines the number of time points. <code>[1+1i, 0.5+0.5i, 0, -0.5-0.5i, -1-1i]</code> <code>flip</code> double The desired flip angle of the RF pulse in radians. <code>pi/2</code> radians"},{"location":"matlab_api/makeArbitraryRf/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> A structure containing system parameters (e.g., from mr.opts()). If empty, default system parameters are used. <code>mr.opts()</code> <code>freqOffset</code> double <code>0</code> Frequency offset of the RF pulse in Hz. (Units: Hz) <code>100</code> <code>phaseOffset</code> double <code>0</code> Phase offset of the RF pulse in radians. (Units: radians) <code>pi/4</code> <code>freqPPM</code> double <code>0</code> Frequency offset specified in parts per million (ppm) relative to the Larmor frequency.  Can be combined with 'freqOffset'. (Units: ppm) <code>10</code> <code>phasePPM</code> double <code>0</code> Phase offset specified in ppm relative to the Larmor frequency. Can be combined with 'phaseOffset'. (Units: ppm) <code>5</code> <code>timeBwProduct</code> double <code>0</code> Time-bandwidth product of the pulse. (Relationship to pulse duration and bandwidth depends on pulse shape) (Units: seconds) <code>4</code> <code>bandwidth</code> double <code>0</code> Bandwidth of the RF pulse in Hz. Required for slice-selective gradient calculation. (Units: Hz) <code>10000</code> <code>center</code> double <code>NaN</code> Time point at which pulse is centered. If NaN, pulse is centered at its midpoint. (Units: seconds) <code>0.002</code> <code>maxGrad</code> double <code>0</code> Maximum gradient amplitude in Hz/m.  Used for gradient calculation. (Units: Hz/m) <code>1000</code> <code>maxSlew</code> double <code>0</code> Maximum gradient slew rate in Hz/m/s. Used for gradient calculation. (Units: Hz/m/s) <code>100000</code> <code>sliceThickness</code> double <code>0</code> Thickness of the slice to be excited in meters. Used for gradient calculation. (Units: meters) <code>0.005</code> <code>delay</code> double <code>0</code> Delay before the start of the RF pulse in seconds. (Units: seconds) <code>0.001</code> <code>dwell</code> double <code>0</code> Time resolution (dwell time) of the RF pulse.  If 0, the system's default rfRasterTime is used. (Units: seconds) <code>4e-6</code> <code>use</code> char <code>'u'</code> Specifies the purpose of the pulse ('excitation', 'refocusing', etc.). Valid values: mr.getSupportedRfUse() <code>'excitation'</code>"},{"location":"matlab_api/makeArbitraryRf/#returns","title":"Returns","text":"Output Type Description <code>rf</code> struct A structure containing the RF pulse parameters (signal, timing, frequency/phase offsets, deadtime, ringdownTime, delay, and use). <code>gz</code> struct A structure containing the slice-selective gradient waveform (if bandwidth and sliceThickness are specified). <code>gzr</code> struct Reserved for future use. <code>delay</code> double Delay before the start of the RF pulse in seconds."},{"location":"matlab_api/makeArbitraryRf/#examples","title":"Examples","text":"<pre><code>rf = mr.makeArbitraryRf([1+1i, 0, -1-1i], pi/2, 'bandwidth', 10000, 'sliceThickness', 0.005);\nrf = mr.makeArbitraryRf(sinc_pulse, pi/2, 'freqOffset', 100, 'phaseOffset', pi/4);\n</code></pre>"},{"location":"matlab_api/makeArbitraryRf/#see-also","title":"See Also","text":"<p>Sequence.makeSincPulse, Sequence.addBlock, mr.opts</p>"},{"location":"matlab_api/makeBlockPulse/","title":"makeBlockPulse","text":"<p>Generates a block RF pulse with optional slice-selective capabilities.  The function creates a Pulseq RF pulse object defining the characteristics of the pulse, including amplitude, duration, frequency and phase offsets. It can calculate the duration based on either the provided bandwidth or time-bandwidth product.  It also handles optional parameters for slice selection (gradients) and returns both the RF pulse and a delay object to account for ringdown time.</p>"},{"location":"matlab_api/makeBlockPulse/#syntax","title":"Syntax","text":"<pre><code>function [rf, delay] = makeBlockPulse(flip,varargin)\n</code></pre>"},{"location":"matlab_api/makeBlockPulse/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeBlockPulse(...)\n</code></pre>"},{"location":"matlab_api/makeBlockPulse/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeBlockPulse/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>flip</code> double The flip angle of the RF pulse. <code>pi/2</code> radians"},{"location":"matlab_api/makeBlockPulse/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> System parameters structure (e.g., mr.opts()).  Provides parameters like rfRasterTime, rfDeadTime, rfRingdownTime needed for pulse generation. If empty, default system parameters are used. <code>mr.opts()</code> <code>duration</code> double <code>0</code> Duration of the RF pulse. If 0, it will be calculated from bandwidth or timeBwProduct. (Units: seconds) <code>0.004</code> <code>freqOffset</code> double <code>0</code> Frequency offset of the RF pulse (Hz). (Units: Hz) <code>100</code> <code>phaseOffset</code> double <code>0</code> Phase offset of the RF pulse (radians). (Units: radians) <code>pi/4</code> <code>freqPPM</code> double <code>0</code> Frequency offset in parts per million (ppm) relative to the Larmor frequency. Can be used in addition to freqOffset. (Units: ppm) <code>10</code> <code>phasePPM</code> double <code>0</code> Phase offset in parts per million (ppm) relative to the Larmor frequency. Can be used in addition to phaseOffset. (Units: ppm) <code>5</code> <code>timeBwProduct</code> double <code>0</code> Time-bandwidth product of the RF pulse.  If greater than zero, duration is calculated as timeBwProduct/bandwidth. <code>1</code> <code>bandwidth</code> double <code>0</code> Bandwidth of the RF pulse (Hz). If greater than zero, duration is calculated as 1/(4*bandwidth). (Units: Hz) <code>2500</code> <code>maxGrad</code> double <code>0</code> Maximum gradient amplitude for slice selection (Hz/m). (Units: Hz/m) <code>50e6</code> <code>maxSlew</code> double <code>0</code> Maximum gradient slew rate for slice selection (Hz/m/s). (Units: Hz/m/s) <code>200e6</code> <code>sliceThickness</code> double <code>0</code> Slice thickness for slice selection (meters). (Units: meters) <code>0.005</code> <code>delay</code> double <code>0</code> Additional delay after the RF pulse (seconds). (Units: seconds) <code>0.001</code> <code>use</code> char <code>'u'</code> Specifies the pulse type; affects k-space trajectory calculation.  Must be one of mr.getSupportedRfUse(). Valid values: mr.getSupportedRfUse() <code>'excitation'</code>"},{"location":"matlab_api/makeBlockPulse/#returns","title":"Returns","text":"Output Type Description <code>rf</code> struct Pulseq RF pulse object containing the generated RF pulse parameters. <code>delay</code> struct Pulseq delay object accounting for RF ringdown time."},{"location":"matlab_api/makeBlockPulse/#examples","title":"Examples","text":"<pre><code>rf = mr.makeBlockPulse(pi/2, 'duration', 0.001);\n[rf, delay] = mr.makeBlockPulse(pi/4, 'bandwidth', 1000, 'freqOffset', 100, 'system', mr.opts());\n</code></pre>"},{"location":"matlab_api/makeBlockPulse/#see-also","title":"See Also","text":"<p>Sequence.addBlock, mr.opts, mr.getSupportedRfUse</p>"},{"location":"matlab_api/makeDelay/","title":"makeDelay","text":"<p>Creates a delay event for use in a Pulseq sequence.  This function generates a structure representing a delay block with a specified duration.</p>"},{"location":"matlab_api/makeDelay/#syntax","title":"Syntax","text":"<pre><code>function del = makeDelay(delay)\n</code></pre>"},{"location":"matlab_api/makeDelay/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeDelay(...)\n</code></pre>"},{"location":"matlab_api/makeDelay/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeDelay/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>delay</code> double The duration of the delay in seconds. <code>0.005</code> seconds"},{"location":"matlab_api/makeDelay/#returns","title":"Returns","text":"Output Type Description <code>del</code> struct A structure representing the delay event.  This structure contains the field 'type' with value 'delay' and the field 'delay' containing the specified delay duration."},{"location":"matlab_api/makeDelay/#examples","title":"Examples","text":"<pre><code>delayEvent = mr.makeDelay(0.01); % Creates a 10ms delay\n</code></pre>"},{"location":"matlab_api/makeDelay/#see-also","title":"See Also","text":"<p>Sequence.addBlock</p>"},{"location":"matlab_api/makeDigitalOutputPulse/","title":"makeDigitalOutputPulse","text":"<p>Creates a digital output pulse event, also known as a trigger, for a specified channel.  This function generates a structure defining the trigger parameters to be used within a Pulseq sequence.</p>"},{"location":"matlab_api/makeDigitalOutputPulse/#syntax","title":"Syntax","text":"<pre><code>function trig = makeDigitalOutputPulse(channel, varargin)\n</code></pre>"},{"location":"matlab_api/makeDigitalOutputPulse/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeDigitalOutputPulse(...)\n</code></pre>"},{"location":"matlab_api/makeDigitalOutputPulse/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeDigitalOutputPulse/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>channel</code> char Specifies the output channel for the trigger.  Valid values are 'osc0', 'osc1', and 'ext1'. <code>'osc0'</code>"},{"location":"matlab_api/makeDigitalOutputPulse/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>delay</code> double <code>0</code> Specifies the delay before the trigger starts, in seconds. (Units: seconds) <code>0.001</code> <code>duration</code> double <code>0</code> Specifies the duration of the trigger pulse, in seconds. If smaller than the system's gradRasterTime, it is set to gradRasterTime. (Units: seconds) <code>0.002</code> <code>system</code> struct <code>[]</code> A structure containing system parameters.  If empty, defaults to mr.opts().  Should contain at least gradRasterTime. <code>mr.opts()</code>"},{"location":"matlab_api/makeDigitalOutputPulse/#returns","title":"Returns","text":"Output Type Description <code>trig</code> struct A structure containing the trigger parameters: type ('output'), channel, delay, and duration."},{"location":"matlab_api/makeDigitalOutputPulse/#examples","title":"Examples","text":"<pre><code>trig = mr.makeDigitalOutputPulse('osc0', 'delay', 0.001, 'duration', 0.002);\ntrig = mr.makeDigitalOutputPulse('ext1', 'delay', 0.01);\nmySys = mr.opts('gradRasterTime', 0.0001); trig = mr.makeDigitalOutputPulse('osc1', 'system', mySys);\n</code></pre>"},{"location":"matlab_api/makeDigitalOutputPulse/#see-also","title":"See Also","text":"<p>Sequence.addBlock</p>"},{"location":"matlab_api/makeExtendedTrapezoid/","title":"makeExtendedTrapezoid","text":"<p>Creates an extended trapezoid gradient waveform.  This function allows the definition of a gradient by specifying amplitude values at specific time points. It handles system limits (maxGrad, maxSlew) and ensures that the resulting waveform adheres to the gradient raster of the specified system.  The function can either return an arbitrary gradient object (if <code>convert2arbitrary</code> is true), representing the waveform on a regularly sampled grid, or it can return a gradient with potentially irregular sampling (if <code>convert2arbitrary</code> is false).</p>"},{"location":"matlab_api/makeExtendedTrapezoid/#syntax","title":"Syntax","text":"<pre><code>function grad = makeExtendedTrapezoid(channel, varargin)\n</code></pre>"},{"location":"matlab_api/makeExtendedTrapezoid/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeExtendedTrapezoid(...)\n</code></pre>"},{"location":"matlab_api/makeExtendedTrapezoid/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeExtendedTrapezoid/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>channel</code> char The gradient channel ('x', 'y', or 'z') for the waveform. <code>'x'</code>"},{"location":"matlab_api/makeExtendedTrapezoid/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>times</code> double <code>0</code> A vector of time points specifying the instants at which the gradient amplitudes are defined. Valid values: Must be in ascending order, and all values must be distinct. The last time point must be on a gradient raster. (Units: seconds) <code>[0, 0.001, 0.002, 0.003]</code> <code>amplitudes</code> double <code>0</code> A vector of gradient amplitudes corresponding to the time points in 'times'. Valid values: Must have the same length as 'times'. (Units: Hz/m) <code>[0, 1000, 1000, 0]</code> <code>system</code> struct <code>[]</code> A structure containing system parameters (e.g., from mr.opts()). If empty, default system parameters are used. <code>mr.opts()</code> <code>maxGrad</code> double <code>0</code> Maximum gradient amplitude. If 0, the system's maxGrad is used. (Units: Hz/m) <code>2000</code> <code>maxSlew</code> double <code>0</code> Maximum gradient slew rate. If 0, the system's maxSlew is used. (Units: Hz/m/s) <code>1000000</code> <code>skip_check</code> logical <code>false</code> If true, skips checks for consistency between the first amplitude and the preceding block. Use with caution! <code>true</code> <code>convert2arbitrary</code> logical <code>false</code> If true, converts the gradient to an arbitrary gradient object, resampling it onto a regular grid based on the system's gradient raster time. If false, the gradient is defined with the specified possibly irregular sampling of <code>times</code>. <code>true</code>"},{"location":"matlab_api/makeExtendedTrapezoid/#returns","title":"Returns","text":"Output Type Description <code>grad</code> struct An arbitrary gradient object representing the extended trapezoid waveform.  The structure of this object depends on whether <code>convert2arbitrary</code> is true or false."},{"location":"matlab_api/makeExtendedTrapezoid/#examples","title":"Examples","text":"<pre><code>grad = mr.makeExtendedTrapezoid('x', [0 0.002 0.004], 'times', [0 0.001 0.003], 'amplitudes', [0 2000 0], 'system', mr.opts(), 'maxSlew', 2000000);\n</code></pre>"},{"location":"matlab_api/makeExtendedTrapezoid/#see-also","title":"See Also","text":"<p>Sequence.addBlock, mr.opts, makeTrapezoid, mr.pts2waveform, mr.makeArbitraryGrad</p>"},{"location":"matlab_api/makeExtendedTrapezoidArea/","title":"makeExtendedTrapezoidArea","text":"<p>Generates the shortest possible extended trapezoid gradient waveform with a specified area, starting and ending with optionally non-zero gradient values.  The function uses optimization techniques (fminsearch) to find the optimal gradient amplitude and plateau duration to achieve the desired area while respecting system limits (maximum gradient amplitude and slew rate).</p>"},{"location":"matlab_api/makeExtendedTrapezoidArea/#syntax","title":"Syntax","text":"<pre><code>function [grad, times, amplitudes] = makeExtendedTrapezoidArea(channel, Gs, Ge, A, sys)\n</code></pre>"},{"location":"matlab_api/makeExtendedTrapezoidArea/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeExtendedTrapezoidArea(...)\n</code></pre>"},{"location":"matlab_api/makeExtendedTrapezoidArea/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeExtendedTrapezoidArea/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>channel</code> char The gradient channel ('x', 'y', or 'z') for which to create the waveform. <code>'x'</code> <code>Gs</code> double The starting gradient amplitude. <code>100</code> Hz/m <code>Ge</code> double The ending gradient amplitude. <code>100</code> Hz/m <code>A</code> double The desired area of the extended trapezoid. <code>0.1</code> 1/m <code>sys</code> struct A structure containing system parameters.  Must include fields like 'maxSlew' (maximum slew rate in Hz/m/s), 'gradRasterTime' (gradient raster time in seconds), and 'maxGrad' (maximum gradient amplitude in Hz/m). <code>mr.opts()</code>"},{"location":"matlab_api/makeExtendedTrapezoidArea/#returns","title":"Returns","text":"Output Type Description <code>grad</code> struct A Pulseq gradient waveform structure containing the generated extended trapezoid. <code>times</code> double A vector of time points (in seconds) defining the waveform. <code>amplitudes</code> double A vector of gradient amplitudes (in Hz/m) corresponding to the time points."},{"location":"matlab_api/makeExtendedTrapezoidArea/#examples","title":"Examples","text":"<pre><code>[grad, times, amplitudes] = mr.makeExtendedTrapezoidArea('x', 100, 100, 0.1, mr.opts())\n</code></pre>"},{"location":"matlab_api/makeExtendedTrapezoidArea/#see-also","title":"See Also","text":"<p>mr.makeExtendedTrapezoid</p>"},{"location":"matlab_api/makeGaussPulse/","title":"makeGaussPulse","text":"<p>Generates a Gaussian RF pulse, optionally with slice-selective gradients.  The function creates a Gaussian RF pulse with specified flip angle and duration. It allows for adjustments in frequency and phase offsets (in Hz and radians, or as a percentage of the Larmor frequency in ppm), and includes options for apodization and precise control over bandwidth and time-bandwidth product.  Additionally, it can generate slice-selective gradients (gz) and corresponding refocusing gradients (gzr), given slice thickness and gradient limits (maxGrad, maxSlew).</p>"},{"location":"matlab_api/makeGaussPulse/#syntax","title":"Syntax","text":"<pre><code>function [rf, gz, gzr, delay] = makeGaussPulse(flip,varargin)\n</code></pre>"},{"location":"matlab_api/makeGaussPulse/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeGaussPulse(...)\n</code></pre>"},{"location":"matlab_api/makeGaussPulse/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeGaussPulse/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>flip</code> double Desired flip angle of the RF pulse. <code>pi/2</code> radians"},{"location":"matlab_api/makeGaussPulse/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> Pulseq system structure containing hardware parameters (e.g., from mr.opts()). If empty, uses default system parameters. <code>mr.opts()</code> <code>duration</code> double <code>0</code> Duration of the RF pulse. (Units: seconds) <code>0.004</code> <code>freqOffset</code> double <code>0</code> Frequency offset of the RF pulse in Hz. (Units: Hz) <code>100</code> <code>phaseOffset</code> double <code>0</code> Phase offset of the RF pulse in radians. (Units: radians) <code>pi/4</code> <code>freqPPM</code> double <code>0</code> Frequency offset specified in parts per million (ppm) relative to the Larmor frequency.  Useful for fat saturation. (Units: ppm) <code>-3.3</code> <code>phasePPM</code> double <code>0</code> Phase offset specified in parts per million (ppm) relative to the Larmor frequency. (Units: ppm) <code>0</code> <code>timeBwProduct</code> double <code>3</code> Time-bandwidth product of the Gaussian pulse. <code>4</code> <code>bandwidth</code> double <code>0</code> Bandwidth of the RF pulse in Hz (overrides timeBwProduct if specified). (Units: Hz) <code>1000</code> <code>apodization</code> double <code>0</code> Apodization parameter (0 for no apodization, 1 for full Hamming window). <code>0.5</code> <code>centerpos</code> double <code>0.5</code> Position of the pulse center (0 to 1, where 0 is the beginning and 1 is the end). <code>0.7</code> <code>maxGrad</code> double <code>0</code> Maximum gradient amplitude for slice selection. (Units: Hz/m) <code>300</code> <code>maxSlew</code> double <code>0</code> Maximum gradient slew rate for slice selection. (Units: Hz/m/s) <code>100000</code> <code>sliceThickness</code> double <code>0</code> Thickness of the slice for slice selection. (Units: meters) <code>0.005</code> <code>delay</code> double <code>0</code> Delay before the pulse. (Units: seconds) <code>0.001</code> <code>dwell</code> double <code>0</code> RF pulse dwell time. If 0, it uses the system's default rfRasterTime. (Units: seconds) <code>0.000002</code> <code>use</code> char <code>'u'</code> Specifies the intended use of the RF pulse, for k-space calculation. Valid values: mr.getSupportedRfUse() <code>'excitation'</code>"},{"location":"matlab_api/makeGaussPulse/#returns","title":"Returns","text":"Output Type Description <code>rf</code> struct Pulseq RF pulse definition. <code>gz</code> struct Pulseq slice selection gradient definition. <code>gzr</code> struct Pulseq slice refocusing gradient definition. <code>delay</code> double calculated delay"},{"location":"matlab_api/makeGaussPulse/#examples","title":"Examples","text":"<pre><code>[rf, gz] = mr.makeGaussPulse(pi/2, 'duration', 0.004, 'sliceThickness', 0.005, 'maxGrad', 300, 'maxSlew', 100000);\n</code></pre>"},{"location":"matlab_api/makeGaussPulse/#see-also","title":"See Also","text":"<p>gauss, mr.opts, Sequence.addBlock</p>"},{"location":"matlab_api/makeLabel/","title":"makeLabel","text":"<p>Creates a label event for use in Pulseq sequences.  This function generates a structure defining a label that can be added to a Pulseq sequence using <code>Sequence.addBlock</code>.  Labels allow for controlling the execution flow and parameter values within the sequence based on various counters, flags, and control signals.</p>"},{"location":"matlab_api/makeLabel/#syntax","title":"Syntax","text":"<pre><code>function out = makeLabel(type, label, value)\n</code></pre>"},{"location":"matlab_api/makeLabel/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeLabel(...)\n</code></pre>"},{"location":"matlab_api/makeLabel/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeLabel/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>type</code> char Specifies the type of label operation: 'SET' to set a label's value or 'INC' to increment it. <code>'SET'</code> <code>label</code> char Specifies the name of the label.  This should be one of the supported labels (counters, flags, or control signals) returned by <code>mr.getSupportedLabels()</code>. <code>'REP'</code> <code>value</code> double logical Specifies the value for the label.  For counters, this is a numeric value (increments can be negative). For flags, this is a logical value (true/false). <code>10 or true</code>"},{"location":"matlab_api/makeLabel/#returns","title":"Returns","text":"Output Type Description <code>out</code> struct A structure containing the label information.  It has fields 'type' ('labelset' or 'labelinc'), 'label' (the label name), and 'value' (the label value)."},{"location":"matlab_api/makeLabel/#examples","title":"Examples","text":"<pre><code>label1 = mr.makeLabel('SET', 'REP', 10);\nlabel2 = mr.makeLabel('INC', 'SLC', -1);\nlabel3 = mr.makeLabel('SET', 'NAV', true);\n</code></pre>"},{"location":"matlab_api/makeLabel/#see-also","title":"See Also","text":"<p>Sequence.addBlock, mr.getSupportedLabels</p>"},{"location":"matlab_api/makeSLRpulse/","title":"makeSLRpulse","text":"<p>Generates a selective excitation RF pulse using the Shinnar-Le Roux (SLR) algorithm. This function acts as a wrapper for a Python function that utilizes the sigpy library. It designs RF pulses for various applications, including excitation, refocusing, and inversion.</p>"},{"location":"matlab_api/makeSLRpulse/#syntax","title":"Syntax","text":"<pre><code>function [rf, gz, gzr, delay] = makeSLRpulse(flip,varargin)\n</code></pre>"},{"location":"matlab_api/makeSLRpulse/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeSLRpulse(...)\n</code></pre>"},{"location":"matlab_api/makeSLRpulse/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeSLRpulse/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>flip</code> double The desired flip angle of the RF pulse. <code>pi/2</code> radians"},{"location":"matlab_api/makeSLRpulse/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> A structure containing system parameters (e.g., from mr.opts()).  If empty, default parameters will be used. <code>mr.opts()</code> <code>duration</code> double <code>1e-3</code> The duration of the RF pulse. (Units: seconds) <code>0.004</code> <code>freqOffset</code> double <code>0</code> Frequency offset of the RF pulse. (Units: Hz) <code>100</code> <code>phaseOffset</code> double <code>0</code> Phase offset of the RF pulse. (Units: radians) <code>pi/4</code> <code>freqPPM</code> double <code>0</code> Frequency offset in parts per million (ppm). (Units: ppm) <code>10</code> <code>phasePPM</code> double <code>0</code> Phase offset in parts per million (ppm). (Units: ppm) <code>5</code> <code>timeBwProduct</code> double <code>4</code> Time-bandwidth product of the pulse. <code>6</code> <code>passbandRipple</code> double <code>0.01</code> Passband ripple of the filter. <code>0.005</code> <code>stopbandRipple</code> double <code>0.01</code> Stopband ripple of the filter. <code>0.005</code> <code>filterType</code> char <code>'mt'</code> Type of filter used for pulse design ('mt', 'ms', 'pm', 'min', 'max', 'ls'). <code>'ls'</code> <code>apodization</code> double <code>0</code> Apodization parameter (currently not used). <code>0.1</code> <code>centerpos</code> double <code>0.5</code> Center position (currently not used). <code>0.6</code> <code>maxGrad</code> double <code>0</code> Maximum gradient amplitude. (Units: Hz/m) <code>2000</code> <code>maxSlew</code> double <code>0</code> Maximum gradient slew rate. (Units: Hz/m/s) <code>100000</code> <code>sliceThickness</code> double <code>0</code> Slice thickness. (Units: meters) <code>0.005</code> <code>delay</code> double <code>0</code> Additional delay before the pulse. (Units: seconds) <code>0.001</code> <code>dwell</code> double <code>0</code> Dwell time (currently not used). (Units: seconds) <code>0.000001</code> <code>use</code> char <code>'excitation'</code> Pulse type ('excitation', 'refocusing', etc.). <code>'refocusing'</code> <code>pythonCmd</code> char <code>''</code> Python command (currently not used). <code>''</code>"},{"location":"matlab_api/makeSLRpulse/#returns","title":"Returns","text":"Output Type Description <code>rf</code> struct The designed RF pulse (Pulseq sequence). <code>gz</code> struct The slice-selective gradient (Pulseq sequence). <code>gzr</code> struct The refocusing gradient (Pulseq sequence, might be empty). <code>delay</code> double The total delay associated with the pulse"},{"location":"matlab_api/makeSLRpulse/#examples","title":"Examples","text":"<pre><code>[rf, gz, gzr, delay] = mr.makeSLRpulse(pi/2, 'duration', 4e-3, 'system', mr.opts(), 'sliceThickness', 0.005)\n</code></pre>"},{"location":"matlab_api/makeSLRpulse/#see-also","title":"See Also","text":"<p>mr.opts</p>"},{"location":"matlab_api/makeSincPulse/","title":"makeSincPulse","text":"<p>Generates a slice-selective sinc pulse and optionally its corresponding slice selection and refocusing gradients.  It allows for specifying various parameters to control the pulse's characteristics, including flip angle, duration, frequency and phase offsets, and gradient limits.</p>"},{"location":"matlab_api/makeSincPulse/#syntax","title":"Syntax","text":"<pre><code>function [rf, gz, gzr, delay] = makeSincPulse(flip,varargin)\n</code></pre>"},{"location":"matlab_api/makeSincPulse/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeSincPulse(...)\n</code></pre>"},{"location":"matlab_api/makeSincPulse/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeSincPulse/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>flip</code> double Desired flip angle of the RF pulse. <code>pi/2</code> radians"},{"location":"matlab_api/makeSincPulse/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> System limits struct (e.g., from mr.opts()). If empty, uses default system parameters. <code>mr.opts()</code> <code>duration</code> double <code>0</code> Duration of the sinc pulse. (Units: seconds) <code>0.004</code> <code>freqOffset</code> double <code>0</code> Frequency offset of the RF pulse. (Units: Hz) <code>100</code> <code>phaseOffset</code> double <code>0</code> Phase offset of the RF pulse. (Units: radians) <code>pi/4</code> <code>freqPPM</code> double <code>0</code> Frequency offset specified in parts per million (PPM) relative to the Larmor frequency. (Units: ppm) <code>-3.3</code> <code>phasePPM</code> double <code>0</code> Phase offset specified in parts per million (PPM). (Units: ppm) <code>0</code> <code>timeBwProduct</code> double <code>4</code> Time-bandwidth product of the sinc pulse. <code>6</code> <code>apodization</code> double <code>0</code> Apodization factor (0 for rectangular window, 1 for Hamming window). <code>0.5</code> <code>centerpos</code> double <code>0.5</code> Relative position of the pulse center within its duration (0-1). <code>0.7</code> <code>maxGrad</code> double <code>0</code> Maximum gradient amplitude. (Units: Hz/m) <code>100e6</code> <code>maxSlew</code> double <code>0</code> Maximum gradient slew rate. (Units: Hz/m/s) <code>100e6</code> <code>sliceThickness</code> double <code>0</code> Slice thickness for slice-selective excitation. (Units: meters) <code>0.005</code> <code>delay</code> double <code>0</code> Additional delay after the pulse. (Units: seconds) <code>0.001</code> <code>dwell</code> double <code>0</code> RF pulse dwell time (if 0, uses system.rfRasterTime). (Units: seconds) <code>1e-6</code> <code>use</code> char <code>'u'</code> Specifies the pulse use ('u' for excitation, 'r' for refocusing). Valid values: ['u', 'r'] <code>'excitation'</code>"},{"location":"matlab_api/makeSincPulse/#returns","title":"Returns","text":"Output Type Description <code>rf</code> struct Structure containing the RF pulse waveform. <code>gz</code> struct Structure containing the slice-selection gradient waveform (optional). <code>gzr</code> struct Structure containing the slice-refocusing gradient waveform (optional). <code>delay</code> double Delay added after the pulse (seconds)."},{"location":"matlab_api/makeSincPulse/#examples","title":"Examples","text":"<pre><code>[rf, gz] = mr.makeSincPulse(pi/2, 'duration', 0.005, 'sliceThickness', 0.003, 'maxGrad', 40e6, 'maxSlew', 100e6);\n</code></pre>"},{"location":"matlab_api/makeSincPulse/#see-also","title":"See Also","text":"<p>mr.opts, sinc</p>"},{"location":"matlab_api/makeSoftDelay/","title":"makeSoftDelay","text":"<p>Creates a soft delay event for use with Pulseq sequences. This event modifies the duration of an empty (pure delay) block within a sequence, allowing for adjustments to timings like TE or TR.  The duration is calculated using the formula: dur = input / factor + offset.  This function is typically used in conjunction with <code>Sequence.addBlock()</code> and <code>Sequence.applySoftDelay()</code>.</p>"},{"location":"matlab_api/makeSoftDelay/#syntax","title":"Syntax","text":"<pre><code>function sd = makeSoftDelay(varargin)\n</code></pre>"},{"location":"matlab_api/makeSoftDelay/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeSoftDelay(...)\n</code></pre>"},{"location":"matlab_api/makeSoftDelay/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeSoftDelay/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>numID</code> double A numeric ID that uniquely identifies this soft delay event.  It's used to link this event to specific blocks within the sequence. <code>1</code> <code>hint</code> char A string hint associated with the soft delay event. This hint should be unique for each numID to distinguish between different types of delays. <code>TE_adjust</code>"},{"location":"matlab_api/makeSoftDelay/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>offset</code> double <code>0</code> A constant offset added to the calculated delay duration.  This can be used to fine-tune the delay. Valid values: Any numeric value (positive or negative) (Units: seconds) <code>0.001</code> <code>factor</code> double <code>1</code> A scaling factor applied to the input value before adding the offset.  This allows for scaling of the delay. Valid values: Any numeric value (positive or negative) <code>2</code>"},{"location":"matlab_api/makeSoftDelay/#returns","title":"Returns","text":"Output Type Description <code>sd</code> struct A structure containing the parameters of the created soft delay event. This structure is then used with <code>Sequence.applySoftDelay()</code> to apply the delay to the sequence."},{"location":"matlab_api/makeSoftDelay/#examples","title":"Examples","text":"<pre><code>sd = mr.makeSoftDelay(1, 'TE_adjust', 'offset', 0.002, 'factor', 0.5);\nsd = mr.makeSoftDelay(2, 'TR_adjust');\n</code></pre>"},{"location":"matlab_api/makeSoftDelay/#see-also","title":"See Also","text":"<p>Sequence.addBlock, Sequence.applySoftDelay</p>"},{"location":"matlab_api/makeTrapezoid/","title":"makeTrapezoid","text":"<p>Generates a trapezoidal gradient waveform for a specified channel in a Pulseq sequence.  The function offers flexibility in defining the waveform, allowing specification through various parameter combinations: total duration and area, flat-top duration and area, or amplitude.  It automatically calculates the necessary ramp times based on system limits (maxSlew, maxGrad) if not explicitly provided.  The function handles different scenarios and input combinations, ensuring a valid trapezoidal waveform is produced.</p>"},{"location":"matlab_api/makeTrapezoid/#syntax","title":"Syntax","text":"<pre><code>function grad=makeTrapezoid(channel, varargin)\n</code></pre>"},{"location":"matlab_api/makeTrapezoid/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeTrapezoid(...)\n</code></pre>"},{"location":"matlab_api/makeTrapezoid/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeTrapezoid/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>channel</code> char Specifies the gradient channel ('x', 'y', or 'z') for the trapezoid. <code>'x'</code>"},{"location":"matlab_api/makeTrapezoid/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> A structure containing system limits (e.g., maxSlew, maxGrad, gradRasterTime). If empty, defaults to mr.opts(). <code>mr.opts()</code> <code>duration</code> double <code>0</code> Total duration of the trapezoid, including ramps.  Must be &gt; 0 when used. (Units: seconds) <code>0.005</code> <code>area</code> double <code>[]</code> Total area of the trapezoid, including ramps. (Units: 1/m) <code>0.01</code> <code>flatTime</code> double <code>[]</code> Duration of the flat-top portion of the trapezoid. (Units: seconds) <code>0.003</code> <code>flatArea</code> double <code>[]</code> Area of the flat-top portion of the trapezoid (excluding ramps). (Units: 1/m) <code>0.008</code> <code>amplitude</code> double <code>[]</code> Amplitude of the flat-top portion of the trapezoid. (Units: Hz/m) <code>1000</code> <code>maxGrad</code> double <code>0</code> Maximum gradient amplitude allowed. If not specified, defaults to system.maxGrad. (Units: Hz/m) <code>2000</code> <code>maxSlew</code> double <code>0</code> Maximum gradient slew rate allowed. If not specified, defaults to system.maxSlew. (Units: Hz/m/s) <code>200000</code> <code>riseTime</code> double <code>0</code> Time it takes for the gradient to rise to its amplitude. If not specified, it will be calculated based on maxSlew and amplitude. (Units: seconds) <code>0.001</code> <code>fallTime</code> double <code>0</code> Time it takes for the gradient to fall from its amplitude to zero. If not specified, it will be equal to riseTime. (Units: seconds) <code>0.001</code> <code>delay</code> double <code>0</code> Delay before the trapezoid starts. (Units: seconds) <code>0.002</code>"},{"location":"matlab_api/makeTrapezoid/#returns","title":"Returns","text":"Output Type Description <code>grad</code> struct A Pulseq gradient waveform structure representing the trapezoid."},{"location":"matlab_api/makeTrapezoid/#examples","title":"Examples","text":"<pre><code>grad = mr.makeTrapezoid('x', 'duration', 0.005, 'area', 0.01);\ngrad = mr.makeTrapezoid('y', 'flatTime', 0.003, 'flatArea', 0.008, 'maxGrad', 2000);\ngrad = mr.makeTrapezoid('z', 'amplitude', 1000, 'maxSlew', 150000);\n</code></pre>"},{"location":"matlab_api/makeTrapezoid/#see-also","title":"See Also","text":"<p>Sequence.addBlock, mr.opts</p>"},{"location":"matlab_api/makeTrigger/","title":"makeTrigger","text":"<p>Creates a trigger event for synchronization with an external signal.  This function generates a structure defining a trigger event for use within a Pulseq sequence.  It specifies the trigger channel, delay before the trigger, and duration after the trigger.  The duration is constrained to be at least as long as the system's gradient raster time.</p>"},{"location":"matlab_api/makeTrigger/#syntax","title":"Syntax","text":"<pre><code>function trig = makeTrigger(channel, varargin)\n</code></pre>"},{"location":"matlab_api/makeTrigger/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.makeTrigger(...)\n</code></pre>"},{"location":"matlab_api/makeTrigger/#parameters","title":"Parameters","text":""},{"location":"matlab_api/makeTrigger/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>channel</code> char The channel to use for the trigger.  Valid values are 'physio1' and 'physio2' (Siemens-specific). <code>'physio1'</code>"},{"location":"matlab_api/makeTrigger/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>delay</code> double <code>0</code> The delay (in seconds) before the trigger event starts. (Units: seconds) <code>0.001</code> <code>duration</code> double <code>0</code> The duration (in seconds) of the trigger event.  If shorter than the system's gradient raster time, it is automatically adjusted to match the raster time. (Units: seconds) <code>0.005</code> <code>system</code> struct <code>[]</code> A structure containing system parameters (e.g., from mr.opts()). If not provided, mr.opts() is used. <code>mr.opts()</code>"},{"location":"matlab_api/makeTrigger/#returns","title":"Returns","text":"Output Type Description <code>trig</code> struct A structure defining the trigger event. Contains fields: type ('trigger'), channel (the selected channel), delay (delay before trigger), and duration (duration of trigger)."},{"location":"matlab_api/makeTrigger/#examples","title":"Examples","text":"<pre><code>trig = mr.makeTrigger('physio1', 'delay', 0.01, 'duration', 0.02);\ntrig = mr.makeTrigger('physio2');\nmySys = mr.opts('MaxGrad', 40); trig = mr.makeTrigger('physio1','system',mySys);\n</code></pre>"},{"location":"matlab_api/makeTrigger/#see-also","title":"See Also","text":"<p>Sequence.addBlock, mr.opts</p>"},{"location":"matlab_api/md5/","title":"md5","text":"<p>digest = md5(message) Compute the MD5 digest of the message, as a hexadecimal digest. based on the source code from https://rosettacode.org/wiki/MD5 Follow the MD5 algorithm from RFC 1321 [1] and Wikipedia [2]. [1] http://tools.ietf.org/html/rfc1321 [2] http://en.wikipedia.org/wiki/MD5 m is the modulus for 32-bit unsigned arithmetic.</p>"},{"location":"matlab_api/md5/#syntax","title":"Syntax","text":"<pre><code>function digest = md5(message)\n</code></pre>"},{"location":"matlab_api/md5/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.md5(...)\n</code></pre>"},{"location":"matlab_api/md5/#parameters","title":"Parameters","text":"<p>No parameters</p>"},{"location":"matlab_api/md5/#returns","title":"Returns","text":"Output Type Description <code>digest</code> unknown"},{"location":"matlab_api/melodyToPitchesAndDurations/","title":"melodyToPitchesAndDurations","text":"<p>mrMusic.melodyToPitchesAdnDurations : convert melody to the channel-pitch-duration tables</p>"},{"location":"matlab_api/melodyToPitchesAndDurations/#syntax","title":"Syntax","text":"<pre><code>function [pitches, durations] = melodyToPitchesAndDurations(melody, varargin)\n</code></pre>"},{"location":"matlab_api/melodyToPitchesAndDurations/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.melodyToPitchesAndDurations(...)\n</code></pre>"},{"location":"matlab_api/melodyToPitchesAndDurations/#parameters","title":"Parameters","text":"<p>No parameters</p>"},{"location":"matlab_api/melodyToPitchesAndDurations/#returns","title":"Returns","text":"Output Type Description <code>[pitches, durations]</code> unknown"},{"location":"matlab_api/melodyToScale/","title":"melodyToScale","text":"<p>mrMusic.melodyToPitchesAdnDurations : convert melody to another melody object that consists of all notes used in the original melody played one after one another in the ascending order to form a scale-like pattern. It is mainly useful for checking the resonances of the particular scanner and making sure that all notes sound equaly nice on the real hardware. As a duration of the note the typical note duration from the melody is used. The optional paramater speed allows to slow down (speed &lt; 1) or accelerate (speed&gt;1) the tempo.</p>"},{"location":"matlab_api/melodyToScale/#syntax","title":"Syntax","text":"<pre><code>function [melody, timeSign] = melodyToScale(melody,speed)\n</code></pre>"},{"location":"matlab_api/melodyToScale/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.melodyToScale(...)\n</code></pre>"},{"location":"matlab_api/melodyToScale/#parameters","title":"Parameters","text":"<p>No parameters</p>"},{"location":"matlab_api/melodyToScale/#returns","title":"Returns","text":"Output Type Description <code>[melody, timeSign]</code> unknown"},{"location":"matlab_api/modGradAxis/","title":"modGradAxis","text":"<p>This function modifies the amplitude of gradient events along a specified axis ('x', 'y', or 'z') within a Pulseq sequence.  It scales all gradient events on the selected axis by a given modifier.  It handles both single- and multi-point gradient events.  The function operates on the gradient events that have already been added to the sequence object's gradient library.</p>"},{"location":"matlab_api/modGradAxis/#syntax","title":"Syntax","text":"<pre><code>function modGradAxis(obj,axis,modifier)\n</code></pre>"},{"location":"matlab_api/modGradAxis/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.modGradAxis(...)\n</code></pre>"},{"location":"matlab_api/modGradAxis/#parameters","title":"Parameters","text":""},{"location":"matlab_api/modGradAxis/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> struct The Pulseq sequence object containing the gradient library and block events. <code>mySeq</code> <code>axis</code> char The axis ('x', 'y', or 'z') along which to modify the gradient amplitudes. <code>'x'</code> <code>modifier</code> double The scaling factor applied to the gradient amplitudes on the specified axis.  A value of -1 inverts the gradients. <code>-1</code>"},{"location":"matlab_api/modGradAxis/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>trajectory_delay</code> double <code>0</code> This parameter seems unused in the provided code excerpt.  Its purpose is unclear. (Units: seconds) <code>0.001</code>"},{"location":"matlab_api/modGradAxis/#returns","title":"Returns","text":"Output Type Description <code>none</code> none This function modifies the sequence object in place and does not return any values."},{"location":"matlab_api/modGradAxis/#examples","title":"Examples","text":"<pre><code>seq.modGradAxis(mySeq, 'x', 2); % Doubles the amplitude of all x-gradients\nseq.modGradAxis(mySeq, 'y', -1); % Inverts the amplitude of all y-gradients\n</code></pre>"},{"location":"matlab_api/modGradAxis/#see-also","title":"See Also","text":"<p>flipGradAxis</p>"},{"location":"matlab_api/multiply/","title":"multiply","text":"<p>This function calculates the product of two quaternions.  A quaternion is represented as a 1x4 vector, where the first element is the scalar part and the remaining three elements represent the vector part. The function can handle single quaternions (1x4 vectors) or collections of quaternions (Nx4 matrices).</p>"},{"location":"matlab_api/multiply/#syntax","title":"Syntax","text":"<pre><code>function qout = multiply(q1,q2)\n</code></pre>"},{"location":"matlab_api/multiply/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.aux.quat.multiply(...)\n</code></pre>"},{"location":"matlab_api/multiply/#parameters","title":"Parameters","text":""},{"location":"matlab_api/multiply/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>q1</code> double The first quaternion or a collection of quaternions.  Each quaternion is represented as a 1x4 vector or row in an Nx4 matrix. <code>[1, 0, 0, 0]</code> <code>q2</code> double The second quaternion or a collection of quaternions.  Must have the same number of rows as q1 if q1 is an Nx4 matrix. Each quaternion is represented as a 1x4 vector or row in an Nx4 matrix. <code>[0, 1, 0, 0]</code>"},{"location":"matlab_api/multiply/#returns","title":"Returns","text":"Output Type Description <code>qout</code> double The resulting quaternion or collection of quaternions representing the product of q1 and q2. The output will have the same dimensions as the input quaternions."},{"location":"matlab_api/multiply/#examples","title":"Examples","text":"<pre><code>qout = mr.multiply([1, 0, 0, 0], [0, 1, 0, 0]);\nqout = mr.multiply([1, 0, 0, 0; 0, 1, 0, 0], [0, 1, 0, 0; 0, 0, 1, 0]);\n</code></pre>"},{"location":"matlab_api/musicToSequence/","title":"musicToSequence","text":"<p>populate the Pulseq sequence baased on the provided pitches and durations</p>"},{"location":"matlab_api/musicToSequence/#syntax","title":"Syntax","text":"<pre><code>function seq = musicToSequence(seq, pitches, durations, varargin)\n</code></pre>"},{"location":"matlab_api/musicToSequence/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.musicToSequence(...)\n</code></pre>"},{"location":"matlab_api/musicToSequence/#parameters","title":"Parameters","text":"<p>No parameters</p>"},{"location":"matlab_api/musicToSequence/#returns","title":"Returns","text":"Output Type Description <code>seq</code> unknown"},{"location":"matlab_api/normalize/","title":"normalize","text":"<p>This function normalizes a quaternion or an array of quaternions.  It scales each quaternion to have a unit norm (magnitude of 1).  Quaternions with a norm of zero are left unchanged.</p>"},{"location":"matlab_api/normalize/#syntax","title":"Syntax","text":"<pre><code>function q = normalize(q)\n</code></pre>"},{"location":"matlab_api/normalize/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.aux.quat.normalize(...)\n</code></pre>"},{"location":"matlab_api/normalize/#parameters","title":"Parameters","text":""},{"location":"matlab_api/normalize/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>q</code> double A quaternion or an array of quaternions. Each quaternion is represented as a row vector of four elements [w, x, y, z]. <code>[0.707, 0, 0, 0.707]</code>"},{"location":"matlab_api/normalize/#returns","title":"Returns","text":"Output Type Description <code>q</code> double The normalized quaternion or array of quaternions.  Each quaternion will have a magnitude of approximately 1 (or remain unchanged if the original magnitude was zero)."},{"location":"matlab_api/normalize/#examples","title":"Examples","text":"<pre><code>q_normalized = mr.normalize([1, 2, 3, 4]);\nq_array_normalized = mr.normalize([0.707, 0, 0, 0.707; 0, 0.707, 0, 0.707]);\n</code></pre>"},{"location":"matlab_api/opts/","title":"opts","text":"<p>Sets gradient limits and other system properties of the MR system.  It allows users to define or retrieve system parameters such as maximum gradient strength, slew rate, RF pulse parameters, and timing parameters. The function uses an input parser for flexible parameter specification and incorporates default values for system characteristics.</p>"},{"location":"matlab_api/opts/#syntax","title":"Syntax","text":"<pre><code>function out=opts(varargin)\n</code></pre>"},{"location":"matlab_api/opts/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.opts(...)\n</code></pre>"},{"location":"matlab_api/opts/#parameters","title":"Parameters","text":""},{"location":"matlab_api/opts/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>gradUnit</code> string <code>validGradUnits{1}</code> Specifies the units for maximum gradient amplitude.  Must be one of the validGradUnits. Valid values: ['Hz/m', 'mT/m', 'rad/ms/mm'] <code>'mT/m'</code> <code>slewUnit</code> string <code>validSlewUnits{1}</code> Specifies the units for maximum slew rate. Must be one of the validSlewUnits. Valid values: ['Hz/m/s', 'mT/m/ms', 'T/m/s', 'rad/ms/mm/ms'] <code>'T/m/s'</code> <code>b1Unit</code> string <code>validB1Units{1}</code> Specifies the units for maximum B1 amplitude. Must be one of the validB1Units. Valid values: ['Hz', 'T', 'mT', 'uT'] <code>'uT'</code> <code>maxGrad</code> double <code>[]</code> Specifies the maximum gradient amplitude. (Units: Hz/m) <code>40</code> <code>maxSlew</code> double <code>[]</code> Specifies the maximum gradient slew rate. (Units: Hz/m/s) <code>170</code> <code>maxB1</code> double <code>[]</code> Specifies the maximum RF amplitude. (Units: Hz) <code>20</code> <code>riseTime</code> double <code>[]</code> Specifies the rise time of the gradient waveforms. (Units: seconds) <code>0.001</code> <code>rfDeadTime</code> double <code>defaultOpts.rfDeadTime</code> Specifies the dead time after an RF pulse. (Units: seconds) <code>0</code> <code>rfRingdownTime</code> double <code>defaultOpts.rfRingdownTime</code> Specifies the ringdown time after an RF pulse. (Units: seconds) <code>0</code> <code>adcDeadTime</code> double <code>defaultOpts.adcDeadTime</code> Specifies the dead time after ADC sampling. (Units: seconds) <code>0</code> <code>adcRasterTime</code> double <code>defaultOpts.adcRasterTime</code> Specifies the raster time for ADC sampling. (Units: seconds) <code>100e-9</code> <code>rfRasterTime</code> double <code>defaultOpts.rfRasterTime</code> Specifies the raster time for RF pulses. (Units: seconds) <code>1e-6</code> <code>gradRasterTime</code> double <code>defaultOpts.gradRasterTime</code> Specifies the raster time for gradient waveforms. (Units: seconds) <code>10e-6</code> <code>blockDurationRaster</code> double <code>defaultOpts.blockDurationRaster</code> Specifies the raster time for a block of events. (Units: seconds) <code>10e-6</code> <code>adcSamplesLimit</code> double <code>defaultOpts.adcSamplesLimit</code> Specifies the maximum number of ADC samples. <code>0</code> <code>rfSamplesLimit</code> double <code>defaultOpts.rfSamplesLimit</code> Specifies the maximum number of RF samples. <code>0</code> <code>adcSamplesDivisor</code> double <code>defaultOpts.adcSamplesDivisor</code> Specifies the divisor for ADC samples. The actual number of samples should be an integer multiple of this divisor. <code>4</code> <code>gamma</code> double <code>defaultOpts.gamma</code> Specifies the gyromagnetic ratio. (Units: Hz/T) <code>42576000</code> <code>B0</code> double <code>defaultOpts.B0</code> Specifies the main magnetic field strength. (Units: T) <code>1.5</code> <code>setAsDefault</code> logical <code>false</code> If true, sets the specified parameters as the new default options. <code>true</code>"},{"location":"matlab_api/opts/#returns","title":"Returns","text":"Output Type Description <code>out</code> struct A structure containing the system parameters."},{"location":"matlab_api/opts/#examples","title":"Examples","text":"<pre><code>mr.opts('maxGrad',30,'gradUnit','mT/m')\nmr.opts()\nmyOpts = mr.opts('maxSlew', 200, 'slewUnit', 'T/m/s');\n</code></pre>"},{"location":"matlab_api/opts/#see-also","title":"See Also","text":"<p>mr.convert</p>"},{"location":"matlab_api/paperPlot/","title":"paperPlot","text":"<p>This helper function generates a plot of a Pulseq sequence in a style suitable for scientific publications. It allows customization of various aspects of the plot's appearance, such as line width, axes color, and the colors of different gradient and RF components.</p>"},{"location":"matlab_api/paperPlot/#syntax","title":"Syntax","text":"<pre><code>function sp = paperPlot(obj, varargin)\n</code></pre>"},{"location":"matlab_api/paperPlot/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.paperPlot(...)\n</code></pre>"},{"location":"matlab_api/paperPlot/#parameters","title":"Parameters","text":""},{"location":"matlab_api/paperPlot/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> Pulseq sequence object The Pulseq sequence object to be plotted. <code>seqObj</code>"},{"location":"matlab_api/paperPlot/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>blockRange</code> numeric array <code>[1 inf]</code> Specifies the range of blocks in the sequence to be plotted.  It's a two-element vector [first last], where 'first' and 'last' are the indices of the first and last blocks to include, respectively. Defaults to plotting the entire sequence. Valid values: Two-element numeric array <code>[5 10]</code> <code>lineWidth</code> double <code>1.2</code> Specifies the width of the lines used in the plot. Valid values: Positive numeric value <code>2.0</code> <code>axesColor</code> char or 1x3 numeric array <code>[0.5 0.5 0.5]</code> Specifies the color of the horizontal axes. Can be a standard color name (e.g., 'red', 'blue'), a hexadecimal RGB string (e.g., '#FF0000'), or a 1x3 vector of RGB values (e.g., [1 0 0]). Valid values: Valid MATLAB color specification <code>'black'</code> <code>rfColor</code> char or 1x3 numeric array <code>'black'</code> Specifies the color of the RF and ADC events in the plot.  Uses the same color specification as axesColor. Valid values: Valid MATLAB color specification <code>[0 1 0]</code> <code>gxColor</code> char or 1x3 numeric array <code>'blue'</code> Specifies the color of the X gradients in the plot. Uses the same color specification as axesColor. Valid values: Valid MATLAB color specification <code>'red'</code> <code>gyColor</code> char or 1x3 numeric array <code>'red'</code> Specifies the color of the Y gradients in the plot. Uses the same color specification as axesColor. Valid values: Valid MATLAB color specification <code>'green'</code> <code>gzColor</code> char or 1x3 numeric array <code>[0 0.5 0.3]</code> Specifies the color of the Z gradients in the plot. Uses the same color specification as axesColor. Valid values: Valid MATLAB color specification <code>'cyan'</code> <code>rfPlot</code> char <code>'abs'</code> Specifies how RF pulses are plotted: 'abs' for the magnitude, 'real' for the real part, or 'imag' for the imaginary part. Valid values: 'abs', 'real', 'imag' <code>'real'</code>"},{"location":"matlab_api/paperPlot/#returns","title":"Returns","text":"Output Type Description <code>sp</code> double Handle to the generated figure."},{"location":"matlab_api/paperPlot/#examples","title":"Examples","text":"<pre><code>sp = seq.paperPlot(seqObj);\nsp = seq.paperPlot(seqObj, 'blockRange', [10 20], 'lineWidth', 2, 'rfColor', 'red');\n</code></pre>"},{"location":"matlab_api/parsemr/","title":"parsemr","text":"<p>PARSEMR Load a sequence file and display a summary of the sequence events PARSEMR(filename) Load a single file and display a summary of the sequence</p> <p>PARSEMR({file1,file2}) Load each filename in the cell array and display a summary of the sequence</p> <p>See also mr.Sequence</p>"},{"location":"matlab_api/parsemr/#syntax","title":"Syntax","text":"<pre><code>function parsemr(seqFiles)\n</code></pre>"},{"location":"matlab_api/parsemr/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.parsemr(...)\n</code></pre>"},{"location":"matlab_api/parsemr/#parameters","title":"Parameters","text":"<p>No parameters</p>"},{"location":"matlab_api/plot/","title":"plot","text":"<p>This function plots a Pulseq sequence object in a new figure.  It offers various options to control the appearance and content of the plot, including specifying time ranges, block ranges, color schemes, and display units for time. The function can also produce stacked plots and include dynamic guides for verifying event alignment. It utilizes the mr.aux.SeqPlot class internally for the actual plotting functionality.</p>"},{"location":"matlab_api/plot/#syntax","title":"Syntax","text":"<pre><code>function sp = plot(obj, varargin)\n</code></pre>"},{"location":"matlab_api/plot/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.plot(...)\n</code></pre>"},{"location":"matlab_api/plot/#parameters","title":"Parameters","text":""},{"location":"matlab_api/plot/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> object A Pulseq sequence object to be plotted.  This is an instance of the Sequence class. <code>seqObj</code>"},{"location":"matlab_api/plot/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>blockRange</code> numeric <code>[1 inf]</code> Specifies the range of blocks in the sequence to be plotted.  A two-element vector [first last] indicating the first and last block indices to include. Defaults to plotting all blocks. <code>[5 10]</code> <code>lineWidth</code> double <code>1.2</code> Specifies the line width for the plotted waveforms. <code>2.0</code> <code>axesColor</code> numeric <code>[0.5 0.5 0.5]</code> Sets the color of the horizontal axes. A three-element RGB vector. <code>[0.8 0.2 0.2]</code> <code>rfColor</code> char <code>'black'</code> Specifies the color of the RF and ADC events. <code>'red'</code> <code>gxColor</code> char <code>'blue'</code> Specifies the color of the X gradients. <code>'green'</code> <code>gyColor</code> char <code>'red'</code> Specifies the color of the Y gradients. <code>'magenta'</code> <code>gzColor</code> numeric <code>[0 0.5 0.3]</code> Specifies the color of the Z gradients. A three-element RGB vector. <code>[0.5 0 0.8]</code> <code>rfPlot</code> char <code>'abs'</code> Specifies how RF pulses are plotted: 'abs' (absolute value), 'real' (real part), or 'imag' (imaginary part). Valid values: 'abs', 'real', 'imag' <code>'real'</code> <code>timeRange</code> numeric <code>[]</code> Specifies the time range to plot. A two-element vector [start stop] defining the start and end times in seconds. (Units: seconds) <code>[0.01 0.05]</code> <code>timeDisp</code> char <code>[]</code> Specifies the units for time display: 's', 'ms', or 'us'. Valid values: 's', 'ms', 'us' <code>'ms'</code> <code>label</code> char <code>[]</code> Specifies which ADC event labels to plot. A comma-separated string of label names. <code>'LIN,REP'</code> <code>showBlocks</code> logical numeric <code>0</code> If true (or 1), plots grid and tick labels at block boundaries. <code>stacked</code> logical numeric <code>0</code> If true (or 1), arranges plots vertically in a stacked layout sharing the same x-axis. <code>showGuides</code> logical numeric <code>0</code> If true (or 1), displays dynamic hairline guides that follow the data cursor to aid in verifying event alignment."},{"location":"matlab_api/plot/#returns","title":"Returns","text":"Output Type Description <code>sp</code> object A handle to the figure created by the plot function; returned only if one output argument is requested."},{"location":"matlab_api/plot/#examples","title":"Examples","text":"<pre><code>seq.plot(seqObj)\nseq.plot(seqObj, 'timeRange', [0.01 0.05], 'showBlocks', 1)\nf = seq.plot(seqObj, 'stacked', true, 'label', 'LIN,REP')\n</code></pre>"},{"location":"matlab_api/plot/#see-also","title":"See Also","text":"<p>mr.aux.SeqPlot, paperPlot</p>"},{"location":"matlab_api/pts2waveform/","title":"pts2waveform","text":"<p>This function interpolates a set of points (times, amplitudes) to generate a waveform with a specified gradient raster time.  It takes time points and corresponding amplitude values as input, and outputs a waveform sampled at the specified raster time. The interpolation ensures a smooth waveform consistent with the gradient hardware's resolution.</p>"},{"location":"matlab_api/pts2waveform/#syntax","title":"Syntax","text":"<pre><code>function waveform = pts2waveform(times, amplitudes, gradRasterTime)\n</code></pre>"},{"location":"matlab_api/pts2waveform/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.pts2waveform(...)\n</code></pre>"},{"location":"matlab_api/pts2waveform/#parameters","title":"Parameters","text":""},{"location":"matlab_api/pts2waveform/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>times</code> double A vector of time points at which the amplitudes are defined. <code>[0, 0.001, 0.002]</code> seconds <code>amplitudes</code> double A vector of amplitude values corresponding to the time points in 'times'. <code>[0, 100, 0]</code> Hz/m <code>gradRasterTime</code> double The time resolution of the gradient waveform. The output waveform will be sampled at this interval. <code>0.0001</code> seconds"},{"location":"matlab_api/pts2waveform/#returns","title":"Returns","text":"Output Type Description <code>waveform</code> double A vector representing the interpolated gradient waveform, sampled at the specified 'gradRasterTime'."},{"location":"matlab_api/pts2waveform/#examples","title":"Examples","text":"<pre><code>waveform = mr.pts2waveform([0, 0.001, 0.002], [0, 100, 0], 0.0001);\n</code></pre>"},{"location":"matlab_api/read/","title":"read","text":"<p>Loads a Pulseq sequence from a specified file into a sequence object.  The function reads definitions, signature information, and sequence data from the file, populating the object's properties accordingly.  It handles optional parameters to detect RF pulse usage and provides error handling for file opening.</p>"},{"location":"matlab_api/read/#syntax","title":"Syntax","text":"<pre><code>function read(obj,filename,varargin)\n</code></pre>"},{"location":"matlab_api/read/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.read(...)\n</code></pre>"},{"location":"matlab_api/read/#parameters","title":"Parameters","text":""},{"location":"matlab_api/read/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> struct The Pulseq sequence object to load the data into. This object will be modified in place. <code>seqObj</code>"},{"location":"matlab_api/read/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>filename</code> char <code>N/A</code> The name of the file containing the Pulseq sequence data. <code>'my_sequences/gre.seq'</code> <code>major</code> double <code>N/A</code> Not explicitly used in provided code, likely part of version information (unused). Valid values: N/A <code>1</code> <code>minor</code> double <code>N/A</code> Not explicitly used in provided code, likely part of version information (unused). Valid values: N/A <code>0</code> <code>revision</code> double <code>N/A</code> Not explicitly used in provided code, likely part of version information (unused). Valid values: N/A <code>0</code>"},{"location":"matlab_api/read/#returns","title":"Returns","text":"Output Type Description <code>none</code> none The function modifies the input <code>obj</code> directly.  It does not return a value."},{"location":"matlab_api/read/#examples","title":"Examples","text":"<pre><code>seq.read(seqObj, 'my_sequences/gre.seq')\nseq.read(seqObj, 'my_sequences/gre.seq', 'detectRFuse')\n</code></pre>"},{"location":"matlab_api/read/#see-also","title":"See Also","text":"<p>write</p>"},{"location":"matlab_api/readBinary/","title":"readBinary","text":"<p>Loads a Pulseq sequence from a binary file.  This function reads a binary file containing a Pulseq sequence and populates a Pulseq sequence object with the data.  The binary file format is described in the Pulseq specification at http://pulseq.github.io.  The function reads various sections of the binary file, including definitions, blocks, RF pulses, gradients, ADC events, delays, and shapes, and stores them in the appropriate fields of the sequence object.</p>"},{"location":"matlab_api/readBinary/#syntax","title":"Syntax","text":"<pre><code>function readBinary(obj,filename)\n</code></pre>"},{"location":"matlab_api/readBinary/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.readBinary(...)\n</code></pre>"},{"location":"matlab_api/readBinary/#parameters","title":"Parameters","text":""},{"location":"matlab_api/readBinary/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> struct A Pulseq sequence object.  This object will be populated with the data read from the binary file. <code>seqObj</code> <code>filename</code> string The path to the binary file containing the Pulseq sequence. <code>'sequences/gre.bin'</code>"},{"location":"matlab_api/readBinary/#examples","title":"Examples","text":"<pre><code>seq.readBinary(seqObj, 'sequences/gre.bin')\n</code></pre>"},{"location":"matlab_api/readBinary/#see-also","title":"See Also","text":"<p>writeBinary</p>"},{"location":"matlab_api/readasc/","title":"readasc","text":"<p>Reads Siemens ASC ASCII-formatted text files and returns a MATLAB structure containing the data.  Handles files that may be split into two parts (e.g., ####.asc and ####_GSWD_SAFETY.asc), merging the data from both if found.</p>"},{"location":"matlab_api/readasc/#syntax","title":"Syntax","text":"<pre><code>function [asc, extra] = readasc(filePathBasic)\n</code></pre>"},{"location":"matlab_api/readasc/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.Siemens.readasc(...)\n</code></pre>"},{"location":"matlab_api/readasc/#parameters","title":"Parameters","text":""},{"location":"matlab_api/readasc/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>filePathBasic</code> string The base path and filename of the Siemens ASC file (e.g., 'path/to/file.asc'). The function will automatically check for a corresponding '_GSWD_SAFETY' file if it exists. <code>'path/to/my_scan.asc'</code>"},{"location":"matlab_api/readasc/#returns","title":"Returns","text":"Output Type Description <code>asc</code> struct A MATLAB structure containing the data read from the ASC file(s). Field names and values correspond to the parameters defined in the ASC file. <code>extra</code> struct This output is currently not used by the provided code excerpt.  It might be used for additional extracted information in the full function implementation."},{"location":"matlab_api/readasc/#examples","title":"Examples","text":"<pre><code>myAsc = mr.readasc('path/to/my_scan.asc');\n[prot, yaps] = mr.readasc('path/to/another_scan.asc');\n</code></pre>"},{"location":"matlab_api/restoreAdditionalShapeSamples/","title":"restoreAdditionalShapeSamples","text":"<p>This function post-processes a gradient waveform, specifically addressing issues that can arise when trapezoidal gradients are converted into arbitrary shapes.  It aims to restore samples at the edges of gradient raster intervals to ensure accuracy.  The function identifies and corrects discrepancies between the reconstructed waveform and the original, particularly important in situations like spiral gradients where small deviations can occur.</p>"},{"location":"matlab_api/restoreAdditionalShapeSamples/#syntax","title":"Syntax","text":"<pre><code>function [tt_chg, waveform_chg] = restoreAdditionalShapeSamples(tt,waveform,first,last,gradRasterTime,iBlock)\n</code></pre>"},{"location":"matlab_api/restoreAdditionalShapeSamples/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.restoreAdditionalShapeSamples(...)\n</code></pre>"},{"location":"matlab_api/restoreAdditionalShapeSamples/#parameters","title":"Parameters","text":""},{"location":"matlab_api/restoreAdditionalShapeSamples/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>tt</code> double Time vector corresponding to the original gradient waveform. <code>[0 0.001 0.002 0.003]</code> seconds <code>waveform</code> double Original gradient waveform amplitude values. <code>[0 100 100 0]</code> Hz/m <code>first</code> double Amplitude of the first sample of the original gradient waveform. <code>0</code> Hz/m <code>last</code> double Amplitude of the last sample of the original gradient waveform. <code>0</code> Hz/m <code>gradRasterTime</code> double Time interval of the gradient raster. <code>0.000001</code> seconds <code>iBlock</code> double Index of the current block (optional, used for warning messages). <code>1</code>"},{"location":"matlab_api/restoreAdditionalShapeSamples/#returns","title":"Returns","text":"Output Type Description <code>tt_chg</code> double Modified time vector after shape restoration. <code>waveform_chg</code> double Modified gradient waveform after shape restoration."},{"location":"matlab_api/restoreAdditionalShapeSamples/#examples","title":"Examples","text":"<pre><code>[tt_chg, waveform_chg] = mr.restoreAdditionalShapeSamples([0 1e-3 2e-3], [0 100 0], 0, 0, 1e-6, 1);\n</code></pre>"},{"location":"matlab_api/rotate/","title":"rotate","text":"<p>Rotates a 3D vector by a given unit quaternion.  The function efficiently implements quaternion rotation using explicit formulas to avoid the overhead of general quaternion multiplication.</p>"},{"location":"matlab_api/rotate/#syntax","title":"Syntax","text":"<pre><code>function r = rotate(q,v)\n</code></pre>"},{"location":"matlab_api/rotate/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.aux.quat.rotate(...)\n</code></pre>"},{"location":"matlab_api/rotate/#parameters","title":"Parameters","text":""},{"location":"matlab_api/rotate/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>q</code> double A unit quaternion representing the rotation.  It should be a 4-element vector or an N x 4 matrix where each row represents a quaternion.  The quaternion should be in the form [scalar, vector_x, vector_y, vector_z]. <code>[1, 0, 0, 0]</code> <code>v</code> double A 3D vector or an N x 3 matrix of 3D vectors to be rotated. Each column represents a component (x, y, z) of the vector. <code>[1; 2; 3]</code>"},{"location":"matlab_api/rotate/#returns","title":"Returns","text":"Output Type Description <code>r</code> double The rotated vector(s).  If 'v' is a 3D vector, 'r' is a 3D vector. If 'v' is an N x 3 matrix, 'r' is an N x 3 matrix where each row represents a rotated vector."},{"location":"matlab_api/rotate/#examples","title":"Examples","text":"<pre><code>r = mr.rotate([1 0 0 0], [1; 0; 0]); % No rotation\n r = mr.rotate([0 1 0 0], [1; 0; 0]); % Rotation by 180 degrees around x-axis\n</code></pre>"},{"location":"matlab_api/rotate3D/","title":"rotate3D","text":"<p>Rotates gradient objects within a Pulseq block using a provided rotation matrix or quaternion.  Non-gradient objects are unaffected.  It accepts either a 3x3 rotation matrix or a unit quaternion (scalar component first). An optional 'system' parameter can specify system limits. The function returns either a cell array or a list of rotated objects, suitable for use with <code>seq.addBlock()</code>.</p>"},{"location":"matlab_api/rotate3D/#syntax","title":"Syntax","text":"<pre><code>function [varargout] = rotate3D(rotation, varargin)\n</code></pre>"},{"location":"matlab_api/rotate3D/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.rotate3D(...)\n</code></pre>"},{"location":"matlab_api/rotate3D/#parameters","title":"Parameters","text":""},{"location":"matlab_api/rotate3D/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>rotation</code> double A 3x3 rotation matrix or a 4-element unit quaternion (scalar component first) specifying the rotation to be applied. <code>[1 0 0; 0 1 0; 0 0 1] or [1 0 0 0]</code>"},{"location":"matlab_api/rotate3D/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> A structure containing system limits (e.g., <code>gradRasterTime</code>, etc.).  Must be placed as the first or last optional argument, preceded or followed by the keyword 'system'. Valid values: Must contain at least 'gradRasterTime' field. <code>struct('gradRasterTime', 4e-6)</code> <code>obj</code> struct cell <code>[]</code> One or more Pulseq gradient objects to be rotated.  Can be a cell array of multiple objects or a sequence of objects. Valid values: Pulseq gradient objects or a cell array of them."},{"location":"matlab_api/rotate3D/#returns","title":"Returns","text":"Output Type Description <code>varargout</code> cell struct"},{"location":"matlab_api/rotate3D/#examples","title":"Examples","text":"<pre><code>[rotatedObjects] = mr.rotate3D([1 0 0; 0 1 0; 0 0 1], grad_x, grad_y, grad_z);\n[rotatedObjects] = mr.rotate3D([0 0 1; 1 0 0; 0 1 0], grad_x, grad_y, 'system', systemStruct);\n[rotatedObjects] = mr.rotate3D([1 0 0 0], {grad_x, grad_y, grad_z});\n</code></pre>"},{"location":"matlab_api/rotate3D/#see-also","title":"See Also","text":"<p>mr.rotate, Sequence.addBlock, mr.aux.quat.toRotMat</p>"},{"location":"matlab_api/scaleGrad/","title":"scaleGrad","text":"<p>Scales a gradient waveform by a given scalar value.  It handles both trapezoidal and arbitrary waveforms. Optionally, it checks the scaled gradient against system limits (maximum gradient amplitude and slew rate) to prevent exceeding hardware capabilities.</p>"},{"location":"matlab_api/scaleGrad/#syntax","title":"Syntax","text":"<pre><code>function [grad] = scaleGrad(grad, scale, system)\n</code></pre>"},{"location":"matlab_api/scaleGrad/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.scaleGrad(...)\n</code></pre>"},{"location":"matlab_api/scaleGrad/#parameters","title":"Parameters","text":""},{"location":"matlab_api/scaleGrad/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>grad</code> struct Structure containing the gradient waveform to be scaled. For trapezoidal gradients, it contains fields like 'amplitude', 'area', 'flatArea', 'riseTime', and 'fallTime'. For arbitrary waveforms, it contains fields like 'waveform' and 'tt'. <code>{type: 'trap', amplitude: 10, area: 0.001, flatArea: 0.0005, riseTime: 0.001, fallTime: 0.001}</code> <code>scale</code> double Scalar value by which to scale the gradient waveform. <code>2.5</code>"},{"location":"matlab_api/scaleGrad/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>N/A</code> Structure containing system limits.  Must contain fields 'maxGrad' (maximum gradient amplitude in Hz/m) and 'maxSlew' (maximum slew rate in Hz/m/s). Valid values: Must be a struct with 'maxGrad' and 'maxSlew' fields. <code>{maxGrad: 40e6, maxSlew: 150e6}</code>"},{"location":"matlab_api/scaleGrad/#returns","title":"Returns","text":"Output Type Description <code>grad</code> struct The scaled gradient waveform structure.  The 'id' field, if present, will be removed."},{"location":"matlab_api/scaleGrad/#examples","title":"Examples","text":"<pre><code>[grad_scaled] = mr.scaleGrad(grad, 2);\n[grad_scaled] = mr.scaleGrad(grad, 0.5, system);\n</code></pre>"},{"location":"matlab_api/scaleGrad/#see-also","title":"See Also","text":"<p>makeTrapezoid</p>"},{"location":"matlab_api/setBlock/","title":"setBlock","text":"<p>This function adds or replaces a block of events within a Pulseq sequence. It accepts events in uncompressed form and stores them in the sequence's internal, compressed, non-redundant libraries.  It handles different input formats: a pre-defined block structure, individual events, or a duration with subsequent events.  Error checking ensures that event durations do not exceed a specified duration when provided.</p>"},{"location":"matlab_api/setBlock/#syntax","title":"Syntax","text":"<pre><code>function setBlock(obj, index, varargin)\n</code></pre>"},{"location":"matlab_api/setBlock/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.setBlock(...)\n</code></pre>"},{"location":"matlab_api/setBlock/#parameters","title":"Parameters","text":""},{"location":"matlab_api/setBlock/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> struct The Pulseq sequence object to modify.  This object contains the sequence information. <code>seq</code> <code>index</code> double The index specifying the location (block number) within the sequence where the new block should be added or replaced.  Indexing starts at 1. <code>1</code>"},{"location":"matlab_api/setBlock/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>trajectory_delay</code> double <code>0</code> Delay added to the trajectory of the block.  This is relevant to gradient and RF events in the block. (Units: seconds) <code>0.001</code>"},{"location":"matlab_api/setBlock/#returns","title":"Returns","text":"Output Type Description <code>none</code> none This function modifies the Pulseq sequence object in place. It does not return any value."},{"location":"matlab_api/setBlock/#examples","title":"Examples","text":"<pre><code>seq.setBlock(seq, 1, rf_event1, grad_event1); % Adds a block with an RF and a gradient event at index 1\nseq.setBlock(seq, 2, block_struct); % Replaces block at index 2 with a given block structure\nseq.setBlock(seq, 3, 0.01, rf_event2, grad_event2); % Creates a block with duration 0.01 seconds at index 3\n</code></pre>"},{"location":"matlab_api/setBlock/#see-also","title":"See Also","text":"<p>getBlock, addBlock</p>"},{"location":"matlab_api/setDefinition/","title":"setDefinition","text":"<p>This function modifies or creates a custom definition within a Pulseq sequence object.  It allows users to store key-value pairs as metadata associated with the sequence.</p>"},{"location":"matlab_api/setDefinition/#syntax","title":"Syntax","text":"<pre><code>function setDefinition(seqObj,key,val)\n</code></pre>"},{"location":"matlab_api/setDefinition/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.setDefinition(...)\n</code></pre>"},{"location":"matlab_api/setDefinition/#parameters","title":"Parameters","text":""},{"location":"matlab_api/setDefinition/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>seqObj</code> struct The Pulseq sequence object to modify. This object holds the sequence definition. <code>mr.Sequence()</code> <code>key</code> char The name of the definition to set or modify. This acts as the key for the key-value pair. <code>'FOV'</code> <code>val</code> double string cell The value to assign to the specified definition key. The type of value depends on the definition. For example, it could be a numerical value for field of view (FOV), or a string."},{"location":"matlab_api/setDefinition/#examples","title":"Examples","text":"<pre><code>seq.setDefinition(seqObj, 'FOV', [0.2, 0.2, 0.2]); % Sets the FOV definition\nseq.setDefinition(seqObj, 'PatientName', 'John Doe'); % Sets the patient name definition\n</code></pre>"},{"location":"matlab_api/setDefinition/#see-also","title":"See Also","text":"<p>getDefinition</p>"},{"location":"matlab_api/simRf/","title":"simRf","text":"<p>Simulates the effect of an RF pulse on nuclear magnetization using a quaternion-based rotation formalism.  It takes a Pulseq RF pulse definition as input and returns the resulting magnetization components, frequency axis, and refocusing efficiency.</p>"},{"location":"matlab_api/simRf/#syntax","title":"Syntax","text":"<pre><code>function [Mz_z,Mz_xy,F,ref_eff,Mx_xy,My_xy]=simRf(rf,rephase_factor,prephase_factor)\n</code></pre>"},{"location":"matlab_api/simRf/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.simRf(...)\n</code></pre>"},{"location":"matlab_api/simRf/#parameters","title":"Parameters","text":""},{"location":"matlab_api/simRf/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>rf</code> struct A Pulseq RF pulse structure.  This structure contains all the parameters defining the RF pulse, such as amplitude, duration, shape, frequency, phase, etc. <code>Pulseq RF pulse structure (created using Pulseq functions)</code>"},{"location":"matlab_api/simRf/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>rephase_factor</code> double <code>0</code> A factor used to correct the phase of the magnetization, particularly important for slice-selective excitation pulses.  It accounts for the timing difference between the pulse's center and its duration. Valid values: Any real number <code>0.004</code> <code>prephase_factor</code> double <code>0</code> An experimental parameter used for simulating refocusing pulses or spoiling.  It allows for additional phase adjustments beyond the rephase factor. Valid values: Any real number <code>0</code>"},{"location":"matlab_api/simRf/#returns","title":"Returns","text":"Output Type Description <code>Mz_z</code> double The z-component of the magnetization after the RF pulse, assuming initial magnetization along the z-axis. <code>Mz_xy</code> double The xy-component of the magnetization after the RF pulse, assuming initial magnetization along the z-axis. <code>F</code> double The frequency axis in Hz. <code>ref_eff</code> double The refocusing efficiency of the pulse as a complex number. The magnitude reflects the refocusing and the phase is related to the effective phase of the RF pulse. <code>Mx_xy</code> double The xy-component of the magnetization after the RF pulse, assuming initial magnetization along the x-axis. <code>My_xy</code> double The xy-component of the magnetization after the RF pulse, assuming initial magnetization along the y-axis."},{"location":"matlab_api/simRf/#examples","title":"Examples","text":"<pre><code>[Mz_z,Mz_xy,F,ref_eff,Mx_xy,My_xy] = mr.simRf(rf_pulse_struct);\n</code></pre>"},{"location":"matlab_api/simRf/#see-also","title":"See Also","text":"<p>mr.calcRfBandwidth</p>"},{"location":"matlab_api/sinc/","title":"sinc","text":"<p>This function calculates the sinc function: sinc(x) = sin(\u03c0x)/(\u03c0x). It handles the case where x is zero to avoid division by zero errors.  This is a helpful function for users who may not have the Signal Processing Toolbox installed.</p>"},{"location":"matlab_api/sinc/#syntax","title":"Syntax","text":"<pre><code>function y = sinc(x)\n</code></pre>"},{"location":"matlab_api/sinc/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.sinc(...)\n</code></pre>"},{"location":"matlab_api/sinc/#parameters","title":"Parameters","text":""},{"location":"matlab_api/sinc/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>x</code> double The input value for the sinc function.  Can be a scalar or an array. <code>0:0.1:10</code>"},{"location":"matlab_api/sinc/#returns","title":"Returns","text":"Output Type Description <code>y</code> double The calculated sinc value(s) corresponding to the input x.  If x is an array, y will be an array of the same size."},{"location":"matlab_api/sinc/#examples","title":"Examples","text":"<pre><code>y = mr.sinc(0:0.1:10);\n</code></pre>"},{"location":"matlab_api/sinc/#see-also","title":"See Also","text":"<p>makeSincPulse</p>"},{"location":"matlab_api/sound/","title":"sound","text":"<p>Plays the sequence waveforms through the system speaker.  It processes the waveforms from the Pulseq sequence object, applies channel weighting, performs interpolation to match the desired sample rate, applies a Gaussian filter to suppress ringing artifacts, normalizes the amplitude, and then plays the resulting audio.  The function allows specifying a range of blocks to play and provides an option to only generate the sound data without playing it.</p>"},{"location":"matlab_api/sound/#syntax","title":"Syntax","text":"<pre><code>function soundData=sound(obj, varargin)\n</code></pre>"},{"location":"matlab_api/sound/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.sound(...)\n</code></pre>"},{"location":"matlab_api/sound/#parameters","title":"Parameters","text":""},{"location":"matlab_api/sound/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> Pulseq sequence object The Pulseq sequence object containing the waveforms and timing information. <code>seq</code>"},{"location":"matlab_api/sound/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>blockRange</code> double <code>[1 inf]</code> Specifies the range of blocks in the sequence to play.  Defaults to playing all blocks. Valid values: A two-element numeric vector [start_block end_block].  end_block can be Inf to indicate the end of the sequence. <code>[5, 10]</code> <code>channelWeights</code> double <code>[1 1 1]</code> Specifies the weights for the three channels (x, y, z). These weights scale the amplitudes of the corresponding channel waveforms before combining them for playback. Valid values: A three-element numeric vector [weight_x weight_y weight_z]. <code>[0.8, 1.2, 0.5]</code> <code>onlyProduceSoundData</code> logical <code>false</code> If true, the function only produces the sound data without actually playing it. This is useful if you want to process or save the sound data before playback. Valid values: true or false <code>true</code>"},{"location":"matlab_api/sound/#returns","title":"Returns","text":"Output Type Description <code>soundData</code> double A 2xN matrix containing the processed sound data for two channels.  Each column represents a sample.  If onlyProduceSoundData is true, this is the only output."},{"location":"matlab_api/sound/#examples","title":"Examples","text":"<pre><code>soundData = seq.sound(seq); % Plays the entire sequence\nsoundData = seq.sound(seq, 'blockRange', [10, 20]); % Plays blocks 10-20\nseq.sound(seq, 'channelWeights', [0.5, 1, 0], 'onlyProduceSoundData', true); % Generates sound data without playing, weighting channels differently\n</code></pre>"},{"location":"matlab_api/sound/#see-also","title":"See Also","text":"<p>waveforms_and_times</p>"},{"location":"matlab_api/splitGradient/","title":"splitGradient","text":"<p>This function decomposes a trapezoidal gradient into its constituent parts: slew-up, flat-top, and slew-down.  It takes a trapezoidal gradient structure as input and returns three separate extended trapezoid gradient structures representing the individual components. The delays within these components are adjusted to ensure that when added together using <code>addGradients</code>, the resulting gradient is equivalent to the original input gradient.</p>"},{"location":"matlab_api/splitGradient/#syntax","title":"Syntax","text":"<pre><code>function [grads] = splitGradient(grad, varargin)\n</code></pre>"},{"location":"matlab_api/splitGradient/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.splitGradient(...)\n</code></pre>"},{"location":"matlab_api/splitGradient/#parameters","title":"Parameters","text":""},{"location":"matlab_api/splitGradient/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>grad</code> struct A structure representing a trapezoidal gradient.  This structure must contain fields defining the gradient's amplitude, rise time, flat time, fall time, delay, and channel ('x','y','z').  It should be created using functions such as <code>mr.makeTrapezoid</code>. <code>mr.makeTrapezoid('x', 10, 0.001, 0.002, 0.001, 0)</code>"},{"location":"matlab_api/splitGradient/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> A structure containing system parameters (e.g., gradient raster time). If omitted, default system parameters are used from <code>mr.opts()</code>. Valid values: A valid mr.opts structure <code>mr.opts()</code>"},{"location":"matlab_api/splitGradient/#returns","title":"Returns","text":"Output Type Description <code>grads</code> struct An array of three extended trapezoid gradient structures: slew-up, flat-top, and slew-down gradients."},{"location":"matlab_api/splitGradient/#examples","title":"Examples","text":"<pre><code>[grads] = mr.splitGradient(mr.makeTrapezoid('x', 40, 0.001, 0.002, 0.001, 0), mr.opts('gradRasterTime', 0.0001));\n</code></pre>"},{"location":"matlab_api/splitGradient/#see-also","title":"See Also","text":"<p>splitGradientAt, makeExtendedTrapezoid, makeTrapezoid, Sequence.addBlock, mr.opts</p>"},{"location":"matlab_api/splitGradientAt/","title":"splitGradientAt","text":"<p>Splits a trapezoidal or arbitrary gradient into two parts at a specified time point.  The function divides a gradient waveform, either a trapezoid or an arbitrary shaped gradient, into two separate gradients at a given time.  It adjusts the delays to ensure that combining the resulting gradients using <code>addGradients</code> recreates the original gradient. For trapezoidal gradients, it returns extended trapezoids; for arbitrary gradients, it returns arbitrary gradient objects.</p>"},{"location":"matlab_api/splitGradientAt/#syntax","title":"Syntax","text":"<pre><code>function [varargout] = splitGradientAt(grad, timepoint, varargin)\n</code></pre>"},{"location":"matlab_api/splitGradientAt/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.splitGradientAt(...)\n</code></pre>"},{"location":"matlab_api/splitGradientAt/#parameters","title":"Parameters","text":""},{"location":"matlab_api/splitGradientAt/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>grad</code> struct Structure representing the gradient waveform to be split.  This structure contains fields like 'type' ('grad' or 'trap'), 'tt' (time points), 'waveform' (amplitude values), 'channel', and 'delay'. <code>{type:'trap', tt:[0 1 2 3], waveform:[0 100 100 0], channel:'x', delay:0}</code> <code>timepoint</code> double Time point (in seconds) at which to split the gradient waveform. <code>0.002</code> seconds"},{"location":"matlab_api/splitGradientAt/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>[]</code> Structure containing system parameters, such as <code>gradRasterTime</code>. If not provided, default system parameters are used (via <code>mr.opts()</code>). Valid values: A structure with fields such as <code>gradRasterTime</code>. <code>mr.opts()</code>"},{"location":"matlab_api/splitGradientAt/#returns","title":"Returns","text":"Output Type Description <code>grads</code> cell Cell array containing the two resulting gradient structures. If nargout == 1, it returns a single cell array with both gradients. If nargout &gt; 1, it returns each gradient separately."},{"location":"matlab_api/splitGradientAt/#examples","title":"Examples","text":"<pre><code>[grad1, grad2] = mr.splitGradientAt(myGradient, 0.001, mr.opts());\n[grads] = mr.splitGradientAt(myGradient, 0.001);\n</code></pre>"},{"location":"matlab_api/splitGradientAt/#see-also","title":"See Also","text":"<p>addGradients, makeExtendedTrapezoid, makeTrapezoid, Sequence.addBlock, mr.opts</p>"},{"location":"matlab_api/testReport/","title":"testReport","text":"<p>Analyzes a Pulseq sequence object and generates a text report summarizing key sequence parameters.  The report includes information such as RF flip angles, echo time (TE), repetition time (TR), and other relevant sequence characteristics.  An optional 'system' parameter allows for comparison of sequence parameters against the limits of a specified MR system.</p>"},{"location":"matlab_api/testReport/#syntax","title":"Syntax","text":"<pre><code>function [ report ] = testReport( obj, varargin )\n</code></pre>"},{"location":"matlab_api/testReport/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.testReport(...)\n</code></pre>"},{"location":"matlab_api/testReport/#parameters","title":"Parameters","text":""},{"location":"matlab_api/testReport/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> Pulseq sequence object A Pulseq sequence object containing the sequence information to be analyzed. <code>mySeq</code>"},{"location":"matlab_api/testReport/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>system</code> struct <code>struct([])</code> A structure containing MR system specifications to compare against. If omitted, no system-specific checks are performed. Valid values: A structure with fields representing system limits (e.g., gradient limits, slew rate limits, etc.). The exact fields depend on the specific tests performed by the function. <code>{ 'maxGrad': 40, 'maxSlew': 120 }</code>"},{"location":"matlab_api/testReport/#returns","title":"Returns","text":"Output Type Description <code>report</code> string A text string containing the analysis report of the input Pulseq sequence."},{"location":"matlab_api/testReport/#examples","title":"Examples","text":"<pre><code>report = seq.testReport(mySequence);\nreport = seq.testReport(mySequence, 'system', systemParams);\n</code></pre>"},{"location":"matlab_api/toRotMat/","title":"toRotMat","text":"<p>This function converts a normalized quaternion into its corresponding 3x3 rotation matrix.  The quaternion must be a 4-element vector.</p>"},{"location":"matlab_api/toRotMat/#syntax","title":"Syntax","text":"<pre><code>function r = toRotMat(q)\n</code></pre>"},{"location":"matlab_api/toRotMat/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.aux.quat.toRotMat(...)\n</code></pre>"},{"location":"matlab_api/toRotMat/#parameters","title":"Parameters","text":""},{"location":"matlab_api/toRotMat/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>q</code> double A 4-element vector representing a normalized quaternion [q1, q2, q3, q4]. <code>[0.707, 0, 0, 0.707]</code>"},{"location":"matlab_api/toRotMat/#returns","title":"Returns","text":"Output Type Description <code>r</code> double A 3x3 rotation matrix corresponding to the input quaternion."},{"location":"matlab_api/toRotMat/#examples","title":"Examples","text":"<pre><code>r = mr.toRotMat([0.707, 0, 0, 0.707]);\n</code></pre>"},{"location":"matlab_api/traj2grad/","title":"traj2grad","text":"<p>Converts a k-space trajectory into gradient waveforms using finite differences.  The input trajectory is assumed to be in units of 1/m and sampled at the raster edges (unless otherwise specified). The function calculates both the gradient waveform and the slew rate. It offers options for handling the first gradient step and for a more conservative slew rate estimate.</p>"},{"location":"matlab_api/traj2grad/#syntax","title":"Syntax","text":"<pre><code>function [g sr]=traj2grad(k,varargin)\n</code></pre>"},{"location":"matlab_api/traj2grad/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.traj2grad(...)\n</code></pre>"},{"location":"matlab_api/traj2grad/#parameters","title":"Parameters","text":""},{"location":"matlab_api/traj2grad/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>k</code> double The k-space trajectory.  The size of k is [nChannel nTime], where nChannel is the number of channels and nTime is the number of time points. <code>[0.1 0.2 0.3; 0.4 0.5 0.6]</code> 1/m"},{"location":"matlab_api/traj2grad/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>first</code> double <code>[]</code> The initial gradient value. If not provided, it defaults to zero. (Units: Hz/m) <code>[10; 20]</code> <code>firstGradStepHalfRaster</code> logical <code>true</code> Specifies whether the first gradient step should be considered half a raster time.  Affects the slew rate calculation. <code>true</code> <code>conservativeSlewEstimate</code> logical <code>false</code> If true, uses a conservative estimate for the slew rate, taking the maximum absolute slew rate between adjacent gradient points. If false, uses the average of adjacent slew rates. <code>false</code> <code>system</code> struct <code>[]</code> A structure containing system parameters. If not provided, it defaults to mr.opts().  Likely contains parameters such as gradRasterTime. <code>mr.opts()</code> <code>RasterTime</code> double <code>[]</code> The time duration of one raster time unit.  If not provided, it defaults to the gradRasterTime from the 'system' parameter (or mr.opts().gradRasterTime if 'system' is not provided). (Units: seconds) <code>0.000004</code>"},{"location":"matlab_api/traj2grad/#returns","title":"Returns","text":"Output Type Description <code>g</code> double The calculated gradient waveform in Hz/m. <code>sr</code> double The calculated slew rate in Hz/m/s."},{"location":"matlab_api/traj2grad/#examples","title":"Examples","text":"<pre><code>g = mr.traj2grad(k);\ng = mr.traj2grad(k, 'RasterTime', 0.000004);\n[g, sr] = mr.traj2grad(k, 'system', mr.opts('maxSlewRate', 150), 'firstGradStepHalfRaster', false);\n</code></pre>"},{"location":"matlab_api/traj2grad/#see-also","title":"See Also","text":"<p>mr.opts, Sequence.makeArbitraryGrad</p>"},{"location":"matlab_api/transform/","title":"transform","text":"<p>Creates a transformed copy of a Pulseq sequence by applying a rotation, translation, or a 4x4 homogeneous transformation matrix.  It modifies the sequence's gradient waveforms and calculates updated k-space phase information based on the transformation.</p>"},{"location":"matlab_api/transform/#syntax","title":"Syntax","text":"<pre><code>function [seq2, gw_pp]= transform(seq, varargin)\n</code></pre>"},{"location":"matlab_api/transform/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.transform(...)\n</code></pre>"},{"location":"matlab_api/transform/#parameters","title":"Parameters","text":""},{"location":"matlab_api/transform/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>seq</code> struct The input Pulseq sequence structure to be transformed. <code>mySequence</code>"},{"location":"matlab_api/transform/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>rotation</code> double <code>[]</code> A 3x3 rotation matrix to apply to the sequence.  Cannot be used with 'transform'. Valid values: 3x3 numeric matrix <code>[1 0 0; 0 1 0; 0 0 1]</code> <code>translation</code> double <code>[]</code> A 1x3 translation vector in Pulseq logical coordinates [x, y, z]. Cannot be used with 'transform'. Valid values: 1x3 numeric vector (Units: meters) <code>[0.01 0 0]</code> <code>offset</code> double <code>[]</code> A translation vector in Pulseq logical coordinates [x, y, z]. Valid values: 1x3 numeric vector (Units: meters) <code>[0.02, 0, 0]</code> <code>transform</code> double <code>[]</code> A 4x4 homogeneous transformation matrix containing both rotation and translation (in lab coordinates). Cannot be used with 'rotation' or 'translation'. Valid values: 4x4 numeric matrix <code>[1 0 0 0.01; 0 1 0 0; 0 0 1 0; 0 0 0 1]</code> <code>system</code> struct <code>[]</code> Optional MR system description. If not provided, system properties from the input sequence are inherited. <code>mr.opts('maxGrad', 40, 'maxSlew', 130)</code> <code>sameSeq</code> logical <code>false</code> If true, the output sequence will be a pointer to the input sequence; otherwise, a copy is created. <code>true</code> <code>blockRange</code> double <code>[1 inf]</code> Specifies the range of blocks in the sequence to process.  The second value can be 'inf' for all blocks. Valid values: 1x2 numeric vector <code>[10, 20]</code> <code>gw_pp</code> cell <code>{}</code> Optional pre-calculated gradient piecewise polynomial (k-space) data. If provided, the function will reuse this data instead of recalculating it. <code>{}</code>"},{"location":"matlab_api/transform/#returns","title":"Returns","text":"Output Type Description <code>seq2</code> struct The transformed Pulseq sequence. <code>gw_pp</code> cell Gradient piecewise polynomial (k-space) data for the transformed sequence."},{"location":"matlab_api/transform/#examples","title":"Examples","text":"<pre><code>[seq2, gw_pp] = mr.transform(mySequence, 'rotation', rotMatrix, 'offset', [0.01, 0, 0]);\n[seq2, gw_pp] = mr.transform(mySequence, 'transform', homogeneousTransformMatrix);\n</code></pre>"},{"location":"matlab_api/transform/#see-also","title":"See Also","text":"<p>mr.rotate, mr.rotate3D</p>"},{"location":"matlab_api/version/","title":"version","text":"<p>Returns the version information for the Pulseq Matlab package.  The specific version information returned ('pulseq' or 'output') depends on the input parameter <code>type</code>.</p>"},{"location":"matlab_api/version/#syntax","title":"Syntax","text":"<pre><code>function [version_major, version_minor, version_revision, version_combined]=version(type)\n</code></pre>"},{"location":"matlab_api/version/#calling-pattern","title":"Calling Pattern","text":"<pre><code>mr.aux.version(...)\n</code></pre>"},{"location":"matlab_api/version/#parameters","title":"Parameters","text":""},{"location":"matlab_api/version/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>type</code> char Specifies the type of version information to return.  'pulseq' returns the version of the Matlab package, while 'output' returns the version number written to the output file by the <code>seq.write()</code> function. <code>'pulseq'</code>"},{"location":"matlab_api/version/#returns","title":"Returns","text":"Output Type Description <code>version_major</code> double Major version number. <code>version_minor</code> double Minor version number. <code>version_revision</code> double Revision version number. <code>version_combined</code> double Combined version number (major1000000 + minor1000 + revision)."},{"location":"matlab_api/version/#examples","title":"Examples","text":"<pre><code>mr.version('pulseq')\nmr.version('output')\n</code></pre>"},{"location":"matlab_api/version/#see-also","title":"See Also","text":"<p>seq.write</p>"},{"location":"matlab_api/waveforms_and_times/","title":"waveforms_and_times","text":"<p>This function extracts and organizes waveform data from a Pulseq sequence object. It decompresses the gradient waveforms, returning them as a cell array where each cell contains time points and corresponding gradient amplitude values for each gradient axis (typically x, y, and z).  It also returns timing information for excitation and refocusing RF pulses, and ADC sampling points, including frequency and phase offsets.  If the <code>appendRF</code> flag is true, RF waveforms are included in the output.</p>"},{"location":"matlab_api/waveforms_and_times/#syntax","title":"Syntax","text":"<pre><code>function [wave_data, tfp_excitation, tfp_refocusing, t_adc, fp_adc, pm_adc]=waveforms_and_times(obj, appendRF, blockRange)\n</code></pre>"},{"location":"matlab_api/waveforms_and_times/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.waveforms_and_times(...)\n</code></pre>"},{"location":"matlab_api/waveforms_and_times/#parameters","title":"Parameters","text":""},{"location":"matlab_api/waveforms_and_times/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> struct A Pulseq sequence object containing the waveform data. <code>mr.Sequence()</code> <code>appendRF</code> logical A boolean flag indicating whether to include RF waveforms in the output.  True includes RF data; False excludes it. <code>true</code> <code>blockRange</code> numeric A two-element vector specifying the range of blocks in the sequence to process.  The first element is the starting block index, and the second element is the ending block index. <code>[1, 10]</code>"},{"location":"matlab_api/waveforms_and_times/#optional-parameters","title":"Optional Parameters","text":"Name Type Default Description Example <code>trajectory_delay</code> double <code>0</code> Delay added to the trajectory. (Units: seconds) <code>0.001</code> <code>gradient_offset</code> double <code>0</code> Offset added to the gradient waveforms. (Units: Hz/m) <code>100</code> <code>blockRange</code> numeric <code>[1 inf]</code> A two-element vector specifying the range of blocks in the sequence to process. Defaults to processing all blocks. <code>[5,15]</code> <code>externalWaveformsAndTimes</code> struct <code>struct([])</code> Allows for providing external waveforms and timing data. <code>struct('gradients', { [1 2], [3 4] }, 'rf', { [5 6], [7 8] })</code>"},{"location":"matlab_api/waveforms_and_times/#returns","title":"Returns","text":"Output Type Description <code>wave_data</code> cell A cell array containing the gradient waveforms. Each cell represents a gradient axis (x, y, z) and contains a matrix of time points and corresponding amplitude values. <code>tfp_excitation</code> numeric Time points, frequency, and phase offsets of the excitation RF pulses. <code>tfp_refocusing</code> numeric Time points, frequency, and phase offsets of the refocusing RF pulses. <code>t_adc</code> numeric Time points of all ADC sampling points. <code>fp_adc</code> numeric Frequency and phase offsets of each ADC object. <code>pm_adc</code> numeric Phase modulation of every ADC sample beyond the data stored in fp_adc."},{"location":"matlab_api/waveforms_and_times/#examples","title":"Examples","text":"<pre><code>[wave_data, tfp_excitation, tfp_refocusing, t_adc, fp_adc, pm_adc] = seq.waveforms_and_times(seq, true, [1, 10]);\n</code></pre>"},{"location":"matlab_api/waveforms_and_times/#see-also","title":"See Also","text":"<p>getBlock</p>"},{"location":"matlab_api/write/","title":"write","text":"<p>Writes a Pulseq sequence object to a file in the Pulseq open file format.  This function serializes the sequence data, including definitions, block events, and RF events, into a text-based file that can be later read back into MATLAB using the <code>read</code> function.</p>"},{"location":"matlab_api/write/#syntax","title":"Syntax","text":"<pre><code>function write(obj,filename,create_signature)\n</code></pre>"},{"location":"matlab_api/write/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.write(...)\n</code></pre>"},{"location":"matlab_api/write/#parameters","title":"Parameters","text":""},{"location":"matlab_api/write/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> struct A Pulseq sequence object containing the sequence data to be written to the file. This object is created using the Pulseq toolbox and contains information about the sequence's blocks, RF pulses, gradients, and other parameters. <code>seqObj</code> <code>filename</code> char The name of the file to write the sequence data to, including the full path.  The file extension '.seq' is usually used. <code>'my_sequences/gre.seq'</code> <code>create_signature</code> logical A boolean value indicating whether to create a signature (MD5 hash) for the sequence file. If true (default), a signature is generated and included in the file. <code>true</code>"},{"location":"matlab_api/write/#examples","title":"Examples","text":"<pre><code>seq.write(seqObj, 'my_sequences/gre.seq')\nseq.write(seqObj, 'my_sequences/gre.seq', false)\n</code></pre>"},{"location":"matlab_api/write/#see-also","title":"See Also","text":"<p>read</p>"},{"location":"matlab_api/writeBinary/","title":"writeBinary","text":"<p>Writes a Pulseq sequence object to a file in binary format, using the Pulseq open file format specification.  This function serializes the sequence data, including header information, definitions, block events, RF pulses, and gradients, into a binary file for later use or sharing.</p>"},{"location":"matlab_api/writeBinary/#syntax","title":"Syntax","text":"<pre><code>function writeBinary(obj,filename)\n</code></pre>"},{"location":"matlab_api/writeBinary/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.writeBinary(...)\n</code></pre>"},{"location":"matlab_api/writeBinary/#parameters","title":"Parameters","text":""},{"location":"matlab_api/writeBinary/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> struct A Pulseq sequence object containing all the information to be written to the file.  This object typically contains information about the sequence's definitions, block events, RF pulses, and gradients. <code>seqObj</code> <code>filename</code> char The name of the file to write the sequence data to.  The filename should include the '.bin' extension. <code>'sequences/gre.bin'</code>"},{"location":"matlab_api/writeBinary/#examples","title":"Examples","text":"<pre><code>seq.writeBinary(seqObj,'sequences/gre.bin')\n</code></pre>"},{"location":"matlab_api/writeBinary/#see-also","title":"See Also","text":"<p>readBinary</p>"},{"location":"matlab_api/write_v141/","title":"write_v141","text":"<p>Writes a Pulseq sequence object to a file in version 1.4.1 format.  This function takes a Pulseq sequence object and a filename as input and writes the sequence data to the specified file using the Pulseq open file format. It also includes an optional parameter to control whether a signature is created.</p>"},{"location":"matlab_api/write_v141/#syntax","title":"Syntax","text":"<pre><code>function write_v141(obj,filename,create_signature)\n</code></pre>"},{"location":"matlab_api/write_v141/#calling-pattern","title":"Calling Pattern","text":"<pre><code>seq.write_v141(...)\n</code></pre>"},{"location":"matlab_api/write_v141/#parameters","title":"Parameters","text":""},{"location":"matlab_api/write_v141/#required-parameters","title":"Required Parameters","text":"Name Type Description Example Units <code>obj</code> struct The Pulseq sequence object containing the sequence data to be written to the file. This object is expected to contain fields such as 'blockEvents', 'blockDurations', 'rfLibrary', and 'definitions'. <code>seqObj</code> <code>filename</code> char The name of the file to which the sequence data should be written.  This includes the full path. <code>'my_sequences/gre.seq'</code> <code>create_signature</code> logical A boolean flag indicating whether a signature should be created for the file (default is true if not provided). <code>true</code>"},{"location":"matlab_api/write_v141/#examples","title":"Examples","text":"<pre><code>seq.write_v141(seqObj, 'my_sequences/gre.seq', true);\nseq.write_v141(seqObj, 'my_sequences/gre.seq');\n</code></pre>"},{"location":"matlab_api/write_v141/#see-also","title":"See Also","text":"<p>mr.aux.version, write, read</p>"}]}